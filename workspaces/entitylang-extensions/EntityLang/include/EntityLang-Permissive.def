definition

module org/lang/EntityLang/ArithmeticExpression
exports
  sorts WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATERTOKENSTAR

  lexical syntax
    ~[A-Za-z0-9\_]                 -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF            

  lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  (

  sorts WATEREOF

  lexical restrictions
    WATEREOF -/- ~[]

  lexical syntax
    %% Lexical insertion recovery rules                              
                                                  -> "entity"        {recover, cons("INSERTION")}
                                                  -> ")"             {recover, cons("INSERTION")}
                                                  -> "def"           {recover, cons("INSERTION")}
                                                  -> ","             {recover, cons("INSERTION")}
                                                  -> ":"             {recover, cons("INSERTION")}
    "\""                                          -> INSERTOPENQUOTE {recover}
    INSERTOPENQUOTE StringChar* "\n"              -> STRING          {cons("INSERTEND")}
    INSERTOPENQUOTE StringChar* WATEREOF          -> STRING          {cons("INSERTEND")}
    "/*"                                          -> INSERTSTART     {recover}
    INSERTSTART ( ~[\*] | CommentChar )* WATEREOF -> LAYOUT          {cons("INSERTEND")}
                                                  -> "module"        {recover, cons("INSERTION")}
                                                  -> "imports"       {recover, cons("INSERTION")}
                                                  -> "}"             {recover, cons("INSERTION")}
                                                  -> ";"             {recover, cons("INSERTION")}
                                                  -> "var"           {recover, cons("INSERTION")}

  syntax
    %% Kernel syntax insertion recovery rules   

  )

  (

  context-free syntax
    INT         -> Exp {cons("Int")}
    STRING      -> Exp {cons("String")}
    Exp "+" Exp -> Exp {cons("Plus"), assoc}
    Exp "*" Exp -> Exp {cons("Times"), assoc}

  context-free priorities
    Exp "*" Exp -> Exp  >
    Exp "+" Exp -> Exp 

  )

module org/lang/EntityLang/ArithExpAnalysis


module org/lang/EntityLang/ArithExpChecks


module org/lang/EntityLang/builderDescriptor


module org/lang/EntityLang/builderDefinition


module org/lang/EntityLang/referenceResolver


module org/lang/EntityLang/contentAssistant


module org/lang/EntityLang/JavaCodeGen


module org/lang/EntityLang/PrettyPrinter


module org/lang/EntityLang/typeSystem


module org/lang/EntityLang/CommonLex
exports
  context-free syntax
    ID         -> QID 
    QID "." ID -> QID {cons("QId")}

  lexical syntax
    {ID "/"}+ -> FILENAME 

module org/lang/EntityLang/ImportUtil


module org/lang/EntityLang/Entity
exports
  context-free syntax
    Entity                          -> Definition 
    "entity" ID "{" EntityElem* "}" -> Entity     {cons("Entity")}

module org/lang/EntityLang/EntityAnalysis


module org/lang/EntityLang/EntityConstructors


module org/lang/EntityLang/EntityRenamings


module org/lang/EntityLang/EntityStorage


module org/lang/EntityLang/EntityTypeChecks


module org/lang/EntityLang/EntityEditorDef


module org/lang/EntityLang/Expression
exports
  context-free syntax
    "new" ID "(" ")" -> Exp {cons("New")}

  (

  context-free syntax
    ID          -> Exp {cons("VarRef"), prefer}
    QID         -> Exp {cons("QVarRef")}
    "(" Exp ")" -> Exp {bracket}
    Exp "<" Exp -> Exp {cons("LT"), non-assoc}

  context-free syntax
    "this" -> Exp {cons("This")}

  )

module org/lang/EntityLang/ExpSignatures


module org/lang/EntityLang/ExpAnalysis


module org/lang/EntityLang/ExpRenaming


module org/lang/EntityLang/ExpStorage


module org/lang/EntityLang/ExpTypeChecks


module org/lang/EntityLang/ExpEditor


module org/lang/EntityLang/Function
exports
  context-free syntax
    FunctionDef                                     -> Definition   
    FunctionCall                                    -> Exp          
    "def" ID "(" {Param ","}* ")" ReturnType? Block -> FunctionDef  {cons("FunctionDef")}
    ID "(" {Exp ","}* ")"                           -> FunctionCall {cons("FunctionCall")}

  context-free syntax
    "return" Exp ";" -> Statement  {cons("Return")}
    ID ":" Type      -> Param      {cons("Param")}
    ":" Type         -> ReturnType {cons("ReturnType")}

module org/lang/EntityLang/FunctionConstructors


module org/lang/EntityLang/FunctionAnalysis


module org/lang/EntityLang/FunctionStore


module org/lang/EntityLang/FunctionRenaming


module org/lang/EntityLang/FunctionStaticChecks


module org/lang/EntityLang/identifierDefinition
exports
  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]* -> ID 

module org/lang/EntityLang/literals
exports
  lexical syntax
    "-"? [0-9]+           -> INT           
    "\"" StringChar* "\"" -> STRING        
    ~[\"\n]               -> StringChar    
    "\\\""                -> StringChar    
    BackSlashChar         -> StringChar    
    "\\"                  -> BackSlashChar 

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    BackSlashChar -/- [\"]

module org/lang/EntityLang/keywordDefinition
exports
  lexical syntax
    "Int"    -> RESERVED 
    "String" -> RESERVED 
    "this"   -> RESERVED 
    RESERVED -> ID       {reject}

  lexical restrictions
    "Int" "String" -/- [A-Za-z0-9\_]

module org/lang/EntityLang/layout
exports
  lexical syntax
    [\ \t\n\r]                         -> LAYOUT      
    [\*]                               -> CommentChar 
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT      
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT      
                                       -> EOF         

  (

  lexical restrictions
    EOF -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

module org-lib-namespace-Mix[Ctx2]


module org-lang-EntityLang-generated-Mix[Ctx0]


module org/lang/EntityLang/mainDescriptor
imports org-lang-EntityLang-generated-Mix[OLEG0] org-lib-namespace-Mix[OLN0]

module org/lang/EntityLang/Main
exports
  context-free syntax
    Module -> Start 

module org/lang/EntityLang/MainAnalysis


module org/lang/EntityLang/MainStaticChecker


module org/lang/EntityLang/Module
exports
  context-free syntax
    "module" ID Definition* -> Module     {cons("Module")}
    "imports" FILENAME      -> Definition {cons("Imports")}

module org/lang/EntityLang/ModuleConstructors


module org/lang/EntityLang/ModuleAnalysis


module org/lang/EntityLang/ModuleStore


module org/lang/EntityLang/ModuleRenamings


module org/lang/EntityLang/ModuleStaticChecks


module org/lang/EntityLang/ModuleEditorDef


module org/lang/EntityLang/Property
exports
  context-free syntax
    Property    -> EntityElem 
    ID ":" Type -> Property   {cons("Property")}
    Exp "." ID  -> Exp        {cons("PropertyAccess")}

module org/lang/EntityLang/PropertySignatures


module org/lang/EntityLang/PropertyAnalysis


module org/lang/EntityLang/PropertyRenamings


module org/lang/EntityLang/PropertyStore


module org/lang/EntityLang/PropertyStaticChecks


module org/lang/EntityLang/PropertyEditorDef


module org/lang/EntityLang/Statement
exports
  context-free syntax
    Exp ":=" Exp ";"   -> Statement {cons("Assign")}
    "{" Statement* "}" -> Block     {cons("Block")}
    Block              -> Statement 
    VarDecl            -> Statement 
    Exp ";"            -> Statement {cons("Statement")}

  (

  context-free syntax
    "var" ID ":" Type ";" -> VarDecl {cons("VarDecl")}

  context-free syntax
    "if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}
    "while" "(" Exp ")" Block           -> Statement {cons("While")}

  )

module org/lang/EntityLang/StatementAnalysis


module org/lang/EntityLang/StatementStaticChecking


module org/lang/EntityLang/Type
exports
  context-free syntax
    ID       -> Type {cons("Type")}
    "Int"    -> Type {cons("IntegerType"), prefer}
    "String" -> Type {cons("StringType"), prefer}

module org/lang/EntityLang/TypePP


module org/lang/EntityLang/TypeStore


module org/lang/EntityLang/TypeStaticChecks


module org/lang/EntityLang/TypeEditorDef


module org/lang/EntityLang/TypeAnalysis


module EntityLang
imports org/lang/EntityLang/TypeAnalysis org/lang/EntityLang/TypeEditorDef
        org/lang/EntityLang/TypeStaticChecks org/lang/EntityLang/TypeStore
        org/lang/EntityLang/TypePP org/lang/EntityLang/Type
        org/lang/EntityLang/StatementStaticChecking
        org/lang/EntityLang/StatementAnalysis org/lang/EntityLang/Statement
        org/lang/EntityLang/PropertyEditorDef
        org/lang/EntityLang/PropertyStaticChecks
        org/lang/EntityLang/PropertyStore org/lang/EntityLang/PropertyRenamings
        org/lang/EntityLang/PropertyAnalysis
        org/lang/EntityLang/PropertySignatures org/lang/EntityLang/Property
        org/lang/EntityLang/ModuleEditorDef
        org/lang/EntityLang/ModuleStaticChecks
        org/lang/EntityLang/ModuleRenamings org/lang/EntityLang/ModuleStore
        org/lang/EntityLang/ModuleAnalysis
        org/lang/EntityLang/ModuleConstructors org/lang/EntityLang/Module
        org/lang/EntityLang/MainStaticChecker org/lang/EntityLang/MainAnalysis
        org/lang/EntityLang/Main org/lang/EntityLang/mainDescriptor
        org/lang/EntityLang/layout org/lang/EntityLang/keywordDefinition
        org/lang/EntityLang/literals org/lang/EntityLang/identifierDefinition
        org/lang/EntityLang/FunctionStaticChecks
        org/lang/EntityLang/FunctionRenaming org/lang/EntityLang/FunctionStore
        org/lang/EntityLang/FunctionAnalysis
        org/lang/EntityLang/FunctionConstructors org/lang/EntityLang/Function
        org/lang/EntityLang/ExpEditor org/lang/EntityLang/ExpTypeChecks
        org/lang/EntityLang/ExpStorage org/lang/EntityLang/ExpRenaming
        org/lang/EntityLang/ExpAnalysis org/lang/EntityLang/ExpSignatures
        org/lang/EntityLang/Expression org/lang/EntityLang/EntityEditorDef
        org/lang/EntityLang/EntityTypeChecks org/lang/EntityLang/EntityStorage
        org/lang/EntityLang/EntityRenamings
        org/lang/EntityLang/EntityConstructors
        org/lang/EntityLang/EntityAnalysis org/lang/EntityLang/Entity
        org/lang/EntityLang/ImportUtil org/lang/EntityLang/CommonLex
        org/lang/EntityLang/typeSystem org/lang/EntityLang/PrettyPrinter
        org/lang/EntityLang/JavaCodeGen org/lang/EntityLang/contentAssistant
        org/lang/EntityLang/referenceResolver
        org/lang/EntityLang/builderDefinition
        org/lang/EntityLang/builderDescriptor org/lang/EntityLang/ArithExpChecks
        org/lang/EntityLang/ArithExpAnalysis
        org/lang/EntityLang/ArithmeticExpression

exports
  context-free start-symbols
    Start