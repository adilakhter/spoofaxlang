package org.lang.mobl 

module ExpressionDef 

context-free syntax
	"!" Exp                       -> Exp {"Not"}
	LimitedSetExp                 -> Exp

 	Exp BoolMethodId Exp         -> Exp {"BinMethodCall", left}
    Exp CompareMethodId Exp      -> Exp {"BinMethodCall", left}
    Exp TermOperatorMethodId Exp -> Exp {"BinMethodCall", left}
    Exp OperatorMethodId Exp     -> Exp {"BinMethodCall", left}

    Exp "?" Exp ":" Exp          -> Exp {left, "Choice"}
    QId "<" {Type ","}* ">" "(" {Exp ","}* ")"      -> Exp {"CollectionCons", prefer}
    Type "{" {PropVal ","}* "}"  -> Exp {"EntityCons", deprecated("Please use the SomeEntity(name=...) syntax instead")}

    "[" {Exp ","}* "]"           -> Exp {"List"}

    "(" Exp "," {Exp ","}* ")"   -> Exp {"Tuple"}

    "async" "(" {Exp ","}* ")"   -> Exp {"AsyncCall", prefer}

    "{" Statement* "}"             -> Exp {"Callback"}
    "control" "(" {FArg ","}* ")" "{" ScreenElem* "}"          -> Exp {"AnonymousControl"}
    "function" "(" {FArg ","}* ")" "{" Statement* "}"          -> Exp {"AnonymousFunctionNoReturnType"}
    "function" "(" {FArg ","}* ")" ":" Type "{" Statement* "}" -> Exp {"AnonymousFunction"}

    ID "=" Exp                  -> PropVal {"PropVal"}

    "$data" "(" Path ")"           -> Exp {"ImportData"}
    
context-free syntax %% Expressions
    %%StringQuotation               -> LimitedSetExp {cons("String")}
    STRING                        -> LimitedSetExp {"String"}
    NUMBER                        -> LimitedSetExp {"Num"}
    "true"                        -> LimitedSetExp {"True"}
    "false"                       -> LimitedSetExp {"False"}
    "null"                        -> LimitedSetExp {"Null"}
    "this"                        -> LimitedSetExp {"This"}

    QId "(" {NamedExp ","}* ")"   -> LimitedExp {"Call"}
    QId                           -> LimitedExp {"Var"}
    "(" Exp ")"                   -> LimitedExp {"Brackets"}

    Exp "." ID "(" {NamedExp ","}* ")" -> LimitedExp {"MethodCall"}
    Exp "." ID                    -> LimitedExp {"FieldAccess"}
    Exp "[" Exp "]"               -> LimitedExp {left, "Indexer"}

    %%LimitedExp                    -> Exp
    LimitedExp                    -> LimitedSetExp

    Exp                           -> NamedExp
    ID "=" Exp                    -> NamedExp {cons("NamedExp")}

   

  context-free syntax %% Filters
    %%Exp                                      -> NonSetExp
    %%SetCompExp                               -> NonSetExp {reject}

    %%NonSetExp Filter                         -> SetCompExp {cons("SetComp")}
    %%SetCompExp                               -> Exp
    LimitedExp Filter+                        -> Exp {cons("SetComp")}

    "where" SetExp                           -> Filter {cons("WhereFilter")}
    "order" "by" OrderExp                    -> Filter {cons("OrderByFilter")}
    "prefetch" {ID ","}+                     -> Filter {cons("PrefetchFilter")}
    "limit" Exp                              -> Filter {cons("LimitFilter")}
    "offset" Exp                             -> Filter {cons("OffsetFilter")}

    ID                                       -> OrderExp {cons("OrderNonSpecific")}
    ID "asc"                                 -> OrderExp {cons("OrderAscending")}
    ID "desc"                                -> OrderExp {cons("OrderDescending")}

    %%"where" SetExp                           -> Filter {cons("FilterNoOrderByNoLimit")}
    %%"order" "by" OrderExp                    -> Filter {cons("FilterNoWhereNoLimit")}
    %%"where" SetExp "order" "by" OrderExp     -> Filter {cons("FilterNoLimit")}
    %%"where" SetExp Limit                     -> Filter {cons("FilterNoOrderBy")}
    %%"order" "by" OrderExp Limit              -> Filter {cons("FilterNoWhere")}
    %%Limit                                    -> Filter {cons("FilterNoWhereNoOrderBy")}
    %%"where" Exp "order" "by" OrderExp Limit  -> Filter {cons("Filter")}
    %%ID                                       -> OrderExp {cons("OrderNonSpecific")}
    %%ID "asc"                                 -> OrderExp {cons("OrderAscending")}
    %%ID "desc"                                -> OrderExp {cons("OrderDescending")}
    %%"limit" Exp "offset" Exp     -> Limit {cons("Limit")}
    %%"limit" Exp                        -> Limit {cons("LimitNoOffset")}
    %%"offset" Exp                       -> Limit {cons("LimitNoLimit")}

    ID "==" LimitedSetExp                        -> SetExp {cons("SetEq")}
    ID "!=" LimitedSetExp                        -> SetExp {cons("SetNotEq")}
    ID "<" LimitedSetExp                         -> SetExp {cons("SetLt")}
    ID "<=" LimitedSetExp                        -> SetExp {cons("SetLeq")}
    ID ">" LimitedSetExp                         -> SetExp {cons("SetGt")}
    ID ">=" LimitedSetExp                        -> SetExp {cons("SetGeq")}
    ID "in" LimitedSetExp                        -> SetExp {cons("SetIn")}
    ID "not" "in" LimitedSetExp                  -> SetExp {cons("SetNotIn")}

    SetExp "&&" SetExp                       -> SetExp {left, cons("SetAnd"), prefer}


  context-free priorities
    Exp "." ID -> LimitedExp
  > Exp "." ID "(" {NamedExp ","}* ")" -> LimitedExp
  > Exp TermOperatorMethodId Exp -> Exp
  > Exp OperatorMethodId Exp -> Exp
  > Exp CompareMethodId Exp -> Exp
  > Exp BoolMethodId Exp -> Exp
  > "!" Exp -> Exp
  > Exp "?" Exp ":" Exp -> Exp
  > LimitedExp Filter+ -> Exp


  context-free priorities
  {
    ID "==" LimitedSetExp                        -> SetExp
    ID "!=" LimitedSetExp                        -> SetExp
    ID "<" LimitedSetExp                         -> SetExp
    ID "<=" LimitedSetExp                        -> SetExp
    ID ">" LimitedSetExp                         -> SetExp
    ID ">=" LimitedSetExp                        -> SetExp
  }
  > SetExp "&&" SetExp                 -> SetExp


  lexical syntax
    "||"                     -> BoolMethodId
    "&&"                     -> BoolMethodId
    "=="                     -> CompareMethodId
    "!="                     -> CompareMethodId
    "<"                      -> CompareMethodId
    "<="                     -> CompareMethodId
    ">"                      -> CompareMethodId
    ">="                     -> CompareMethodId
    "*"                      -> TermOperatorMethodId
    "/"                      -> TermOperatorMethodId
    "<<"                     -> TermOperatorMethodId
    ">>"                     -> TermOperatorMethodId
    "&"                      -> TermOperatorMethodId
    "|"                      -> TermOperatorMethodId
    "%"                      -> TermOperatorMethodId
    "+"                      -> OperatorMethodId
    "-"                      -> OperatorMethodId
    "++"                     -> PostFixId
    "--"                     -> PostFixId
    BoolMethodId             -> MethodId
    CompareMethodId          -> MethodId
    TermOperatorMethodId     -> MethodId
    OperatorMethodId         -> MethodId
    PostFixId                -> MethodId
	