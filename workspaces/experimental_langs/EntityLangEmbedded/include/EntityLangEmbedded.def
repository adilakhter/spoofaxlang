definition
module org/lang/EntityLang/ArithmeticExpression
exports
  context-free syntax
    INT         -> Exp {cons("Int")}
    STRING      -> Exp {cons("String")}
    Exp "+" Exp -> Exp {cons("Plus"), assoc}
    Exp "*" Exp -> Exp {cons("Times"), assoc}

  context-free priorities
    Exp "*" Exp -> Exp  >
    Exp "+" Exp -> Exp 

module org/lang/EntityLang/CommonLex
exports
  context-free syntax
    EID         -> QID 
    QID "." EID -> QID {cons("QId")}

  lexical syntax
    {EID "/"}+ -> FILENAME 

module org/lang/EntityLang/Entity
exports
  context-free syntax
    Entity                           -> Definition 
    "entity" EID "{" EntityElem* "}" -> Entity     {cons("Entity"), prefer}

module org/lang/EntityLang/Expression
exports
  context-free syntax
    "new" EID "(" ")" -> Exp {cons("New")}

  (

  context-free syntax
    EID         -> Exp {cons("VarRef"), prefer}
    QID         -> Exp {cons("QVarRef"), avoid}
    "(" Exp ")" -> Exp {bracket}
    Exp "<" Exp -> Exp {cons("LT"), non-assoc}

  context-free syntax
    "this" -> Exp {cons("This")}

  )

module org/lang/EntityLang/Function
exports
  context-free syntax
    FunctionDef                                      -> Definition   
    FunctionCall                                     -> Exp          
    "def" EID "(" {Param ","}* ")" ReturnType? Block -> FunctionDef  {cons("FunctionDef")}
    EID "(" {Exp ","}* ")"                           -> FunctionCall {cons("FunctionCall")}

  context-free syntax
    "return" Exp ";" -> Statement  {cons("Return")}
    EID ":" Type     -> Param      {cons("Param")}
    ":" Type         -> ReturnType {cons("ReturnType")}

module org/lang/EntityLang/Common
exports
  lexical syntax
    [a-zA-Z] [a-zA-Z0-9]* -> EID 

  (

  lexical syntax
    "-"? [0-9]+           -> INT           
    "\"" StringChar* "\"" -> STRING        
    ~[\"\n]               -> StringChar    
    "\\\""                -> StringChar    
    BackSlashChar         -> StringChar    
    "\\"                  -> BackSlashChar 

  (

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    EID -/- [a-zA-Z0-9\_]
    BackSlashChar -/- [\"]

  (

  lexical syntax
    "Int"    -> RESERVED 
    "String" -> RESERVED 
    "this"   -> RESERVED 
    RESERVED -> EID      {reject}

  (

  lexical restrictions
    "Int" "String" -/- [A-Za-z0-9\_]

  (

  lexical syntax
    [\ \t\n\r]                         -> LAYOUT      
    [\*]                               -> CommentChar 
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT      
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT      
                                       -> EOF         

  (

  lexical restrictions
    EOF -/- ~[]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

  )

  )

  )

  )

  )

module org/lang/EntityLang/Main
exports
  context-free syntax
    Module -> Start 

module org/lang/EntityLang/Module
exports
  context-free syntax
    "module" EID Definition* -> Module     {cons("Module")}
    "imports" FILENAME       -> Definition {cons("Imports")}

module org/lang/EntityLang/Property
exports
  context-free syntax
    Property     -> EntityElem 
    EID ":" Type -> Property   {cons("Property")}
    Exp "." EID  -> Exp        {cons("PropertyAccess")}

module org/lang/ql/TinySql
exports
  context-free syntax
    QueryBody FromExp          -> QueryExp {cons("TinySqlExp")}
    QueryBody FromExp WhereExp -> QueryExp {cons("TinySqlExp"), prefer}

  (

  context-free syntax
    "SELECT" {Exp ","}+ -> QueryBody {cons("Select")}
    "FROM" Exp          -> FromExp   {cons("From")}
    "WHERE" Exp         -> WhereExp  {cons("Where")}

  (

  context-free syntax
    Ref         -> Exp {cons("FieldRef"), avoid}
    Ref "." EID -> Exp {cons("QFieldRef")}
    EID         -> Ref 
    STRING      -> Exp {cons("QString")}

  lexical syntax
    "WHERE"  -> RESERVED 
    "SELECT" -> RESERVED 
    "FROM"   -> RESERVED 

  )

  )

module org-lang-ql-Mix[Ctx305]
imports org/lang/ql/TinySql

          [ FromExp   => FromExp[[Ctx305]]
            WhereExp  => WhereExp[[Ctx305]]
            Exp       => Exp[[Ctx305]]
            QueryExp  => QueryExp[[Ctx305]]
            Ref       => Ref[[Ctx305]]
            QueryBody => QueryBody[[Ctx305]] ]

module org/lang/EntityLang/QLExpDecl
imports org-lang-ql-Mix[OLQ32]

exports
  context-free syntax
    "<|" QueryExp[[OLQ32]] "|>" -> Exp 

module org/lang/EntityLang/Statement
exports
  context-free syntax
    Exp ":=" Exp ";"   -> Statement {cons("Assign")}
    "{" Statement* "}" -> Block     {cons("Block")}
    Block              -> Statement 
    VarDecl            -> Statement 
    Exp ";"            -> Statement {cons("Statement")}

  (

  context-free syntax
    "var" EID ":" Type ";" -> VarDecl {cons("VarDecl")}

  context-free syntax
    "if" "(" Exp ")" Block "else" Block -> Statement {cons("If")}
    "while" "(" Exp ")" Block           -> Statement {cons("While")}

  )

module org/lang/EntityLang/Type
exports
  context-free syntax
    EID      -> Type {cons("Type")}
    "Int"    -> Type {cons("IntegerType"), prefer}
    "String" -> Type {cons("StringType"), prefer}

module EntityLangEmbedded
imports org/lang/EntityLang/Type
 org/lang/EntityLang/Statement
 org/lang/EntityLang/QLExpDecl
 org/lang/EntityLang/Property
 org/lang/EntityLang/Module
 org/lang/EntityLang/Main
 org/lang/EntityLang/Common
 org/lang/EntityLang/Function
 org/lang/EntityLang/Expression
 org/lang/EntityLang/Entity
 org/lang/EntityLang/CommonLex
 org/lang/EntityLang/ArithmeticExpression


exports
  context-free start-symbols
    Start