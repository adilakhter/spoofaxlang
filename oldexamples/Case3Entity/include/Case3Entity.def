definition
module Common

exports

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9\_]* -> ID
    "-"? [0-9]+            -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]

module Case3Entity

imports Common

exports
  context-free start-symbols
    Start
    
  context-free syntax
    "module" ID Definition*       								-> Start {cons("Module")}
     Entity 													-> Definition
     "entity" ID  "{" Property* "}" 							-> Entity {cons("Entity")}
    "entity" ID Inherits "{" Property* "}" 						-> Entity {cons("Entity")}
     InheritOperator ID												-> Inherits{cons("Inherits")}
    
    ID ValueTypePropertyOp Type				    					-> Property {cons("EntityMember") }
    ID ReferenceTypePropertyOperator ReferenceType 					-> Property {cons("EntityReference") }
    ID ReferenceTypePropertyOperator ReferenceType InversePropertyDecl 		-> Property {cons("EntityReference") }
    ID CompositeTypePropertyOperator ReferenceType 							-> Property {cons("EntityReference") }
    ID CompositeTypePropertyOperator ReferenceType 	InversePropertyDecl	-> Property {cons("EntityReference") }
    
    "Set" "<" Type ">" 		   										-> ReferenceType{cons("Set")}
    "List" "<" Type ">" 		   									-> ReferenceType{cons("List")}
    Type 															-> ReferenceType
    ID                    	        								-> Type {cons("Type")}
    
    
    %%Anotation
    "(" "inverse" "=" ReferencedProp ")"									-> InversePropertyDecl{cons("InversePropertyDecl")}
    "(" "inverse" "=" ID "." ReferencedProp ")"							-> InversePropertyDecl{cons("InversePropertyDecl")}
    ID																		-> ReferencedProp  
    
exports	
    sorts ValueTypePropertyOp InheritOperator  CompositeTypePropertyOperator ReferenceTypePropertyOperator
    context-free syntax
    ValueTypePropSymbol											-> ValueTypePropertyOp {cons("ValueTypePropertyOp")}
    ReferenceTypePropSymbol 									-> ReferenceTypePropertyOperator {cons("Reference")}
    CompositionSymbol 											-> CompositeTypePropertyOperator {cons("Composite")}
    InheritenceSymbol					 					    -> InheritOperator{cons("InheritenceOp")}
    													
	lexical syntax 
	"::"	-> ValueTypePropSymbol
	"->"	-> ReferenceTypePropSymbol
	"<>"	-> CompositionSymbol
	":"		-> InheritenceSymbol