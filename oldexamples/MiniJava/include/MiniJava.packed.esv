Module("MiniJava.main.packed",Imports([Import("MiniJava.main"),Import("MiniJava-Builders"),Import("MiniJava-Colorer"),Import("MiniJava-Completions"),Import("MiniJava-Folding"),Import("MiniJava-Outliner"),Import("MiniJava-References"),Import("MiniJava-Syntax"),Import("MiniJava-Builders.generated"),Import("MiniJava-Colorer.generated"),Import("MiniJava-Completions.generated"),Import("MiniJava-References.generated"),Import("MiniJava-Syntax.generated")]),[Language(" General properties",[LanguageName("MiniJava"),LanguageId("org.strategoxt.spoofax.minijava"),Extends(Values(["Root"])),Description(String("\"Spoofax/IMP-generated editor for the MiniJava language\"")),URL("http://strategoxt.org"),Extensions(Values(["mjv"])),Table("include/MiniJava.tbl"),StartSymbols([Sort("Program")])]),Builders("",[SemanticProvider("include/minijava.ctree"),SemanticObserver(Strategy("editor-analyse")),Builder(String("\"Abstract syntax (selection)\""),Strategy("generate-aterm"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Desugar (selection)\""),Strategy("desugar-aterm"),[OpenEditor,RealTime,Meta,Source]),Builder(String("\"Analysed abstract syntax (selection)\""),Strategy("rename-aterm"),[OpenEditor,RealTime,Meta]),Builder(String("\"Run\""),Strategy("run-in-jvm"),[]),OnSave(Strategy("generate-jbc-all"),None)]),Colorer(" Default, token-based highlighting",[ColorRule(Token(TK_KEYWORD),Attribute(ColorRGB("127","0","85"),NoColor,BOLD)),ColorRule(Token(TK_IDENTIFIER),AttributeRef("default")),ColorRule(Token(TK_STRING),AttributeRef("blue")),ColorRule(Token(TK_NUMBER),AttributeRef("darkgreen")),ColorRule(Token(TK_VAR),Attribute(ColorRGB("255","0","100"),NoColor,ITALIC)),ColorRule(Token(TK_OPERATOR),Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorRule(Token(TK_LAYOUT),Attribute(ColorRGB("63","127","95"),NoColor,ITALIC))]),Colorer(" System colors",[ColorDef("darkred",Attribute(ColorRGB("128","0","0"),NoColor,NORMAL)),ColorDef("red",Attribute(ColorRGB("255","0","0"),NoColor,NORMAL)),ColorDef("darkgreen",Attribute(ColorRGB("0","128","0"),NoColor,NORMAL)),ColorDef("green",Attribute(ColorRGB("0","255","0"),NoColor,NORMAL)),ColorDef("darkblue",Attribute(ColorRGB("0","0","128"),NoColor,NORMAL)),ColorDef("blue",Attribute(ColorRGB("0","0","255"),NoColor,NORMAL)),ColorDef("cyan",Attribute(ColorRGB("0","255","255"),NoColor,NORMAL)),ColorDef("magenta",Attribute(ColorRGB("255","0","255"),NoColor,NORMAL)),ColorDef("yellow",Attribute(ColorRGB("255","255","0"),NoColor,NORMAL)),ColorDef("white",Attribute(ColorRGB("255","255","255"),NoColor,NORMAL)),ColorDef("black",Attribute(ColorRGB("0","0","0"),NoColor,NORMAL)),ColorDef("gray",Attribute(ColorRGB("128","128","128"),NoColor,NORMAL)),ColorDef("grey",AttributeRef("gray")),ColorDef("orange",Attribute(ColorRGB("255","165","0"),NoColor,NORMAL)),ColorDef("pink",Attribute(ColorRGB("255","105","180"),NoColor,NORMAL)),ColorDef("brown",Attribute(ColorRGB("139","69","19"),NoColor,NORMAL)),ColorDef("default",Attribute(ColorDefault,NoColor,NORMAL))]),Completions("",[CompletionTemplateEx([],NoCompletionPrefix,[String("\"class \""),Placeholder("<Main>"),String("\" {\\n\\n\\tpublic static void main(String[] \""),Placeholder("<args>"),String("\") {\\n\\t\\t<s>\\n\\t}\\n}\"")],[Blank]),CompletionTemplateEx([],NoCompletionPrefix,[String("\"class \""),Placeholder("<C>"),String("\" {\\n\\n\\t\\n}\"")],[Blank]),CompletionTemplateEx([],NoCompletionPrefix,[String("\"public \""),Placeholder("<t>"),String("\" \""),Placeholder("<m>"),String("\"() {\\n\\treturn \""),Placeholder("<e>"),String("\";\\n}\"")],[Blank]),CompletionTemplateEx([],NoCompletionPrefix,[String("\"System.out.println(\""),Placeholder("<e>"),String("\");\\n\"")],[Blank]),CompletionProposer(Strategy("editor-complete")),CompletionTrigger(String("\"extends \""),None),CompletionTrigger(String("\"new \""),None),CompletionTrigger(String("\"\\.\""),None)]),Folding("",[FoldRule(SortAndConstructor(Sort("MainClass"),Constructor("MainClass")),None),FoldRule(SortAndConstructor(Sort("MainMethod"),Constructor("MainMethod")),None),FoldRule(SortAndConstructor(Sort("ClassDecl"),Constructor("Class")),None),FoldRule(SortAndConstructor(Sort("MethodDecl"),Constructor("Method")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("Block")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("If")),None),FoldRule(SortAndConstructor(Sort("Statement"),Constructor("While")),None)]),Outliner("",[OutlineRule(Sort("Program")),OutlineRule(Sort("MainClass")),OutlineRule(Sort("MainMethod")),OutlineRule(Sort("MainParamDecl")),OutlineRule(Sort("MainType")),OutlineRule(Sort("MainParamType")),OutlineRule(Sort("ClassDecl")),OutlineRule(Sort("MethodDecl")),OutlineRule(Sort("ParamDecl")),OutlineRule(Sort("VarDecl")),OutlineRule(Sort("Type"))]),References("",[ReferenceRule("_",Strategy("editor-resolve")),HoverRule("_",Strategy("editor-hover"))]),Language(" Syntax properties (static defaults)",[LineCommentPrefix(String("\"//\"")),BlockCommentDefs(BlockCommentDef(String("\"/*\""),"*",String("\"*/\""))),FenceDefs([FenceDef("[","]"),FenceDef("(",")"),FenceDef("{","}")]),IndentDefs([IndentDef(String("\"=\"")),IndentDef(String("\":\""))]),IdentifierLexical(String("\"[A-Za-z0-9_]+\""))])])