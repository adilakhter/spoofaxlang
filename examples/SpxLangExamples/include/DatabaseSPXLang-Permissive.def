definition

module languages/DatabaseLang/codecompletion


module languages/DatabaseLang/commonsyntax


module languages/DatabaseLang/colordescription


module languages/DatabaseLang/Common
exports
  lexical syntax
    [a-zA-Z\_] [a-zA-Z0-9\_]*          -> ID            
    "-"? [0-9]+                        -> INT           
    "\"" StringChar* "\""              -> STRING        
    ~[\"\n]                            -> StringChar    
    "\\\""                             -> StringChar    
    BackSlashChar                      -> StringChar    
    "\\"                               -> BackSlashChar 
    [\ \t\n\r]                         -> LAYOUT        
    [\*]                               -> CommentChar   
    "/*" ( ~[\*] | CommentChar )* "*/" -> LAYOUT        
    "//" ~[\n\r]* [\n\r] | EOF         -> LAYOUT        
                                       -> EOF           

  (

  lexical syntax
    "KEY"              -> RESERVED 
    "FOREIGN"          -> RESERVED 
    "PRIMARY"          -> RESERVED 
    "REFERENCES"       -> RESERVED 
    "CONSTRAINT"       -> RESERVED 
    "TABLE"            -> RESERVED 
    "SCHEMA"           -> RESERVED 
    "int"              -> RESERVED 
    "uniqueidentifier" -> RESERVED 
    "datetime"         -> RESERVED 
    RESERVED           -> ID       {reject}

  (

  lexical restrictions
    CommentChar -/- [\/]
    INT -/- [0-9]
    ID -/- [a-zA-Z0-9\_]
    "SCHEMA" -/- [a-zA-Z0-9\_]
    EOF -/- ~[]
    BackSlashChar -/- [\"]

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/] . [\/]
    LAYOUT? -/- [\/] . [\*]

  )

  )

module languages-lib-generated-Mix[Ctx12]


module languages/DatabaseLang/languagedescription
imports languages-lib-generated-Mix[LLG3]

module languages-Entitylang-generated-Mix[Ctx14]


module languages/DatabaseLang/dataDef
imports languages-Entitylang-generated-Mix[LEG3]

exports
  context-free start-symbols
    Start

  (

  context-free syntax
    "SCHEMA" ID TableDef*                                 -> Start         {cons("DatabaseSchema")}
    "CREATE" "TABLE" ID "(" {TableProperty ","}* ")" ";"  -> TableDef      {cons("TableDef")}
    ID DBType                                             -> TableProperty {cons("ColumnDef")}
    "CONSTRAINT" ID RefConstraint                         -> TableProperty {cons("ConstraintDef")}
    "PRIMARY" "KEY" "(" ID ")"                            -> RefConstraint {cons("PKConstraint")}
    "FOREIGN" "KEY" "(" ID ")" "REFERENCES" ID "(" ID ")" -> RefConstraint {cons("FKConstraint")}

  context-free syntax
    "int"              -> DBType {cons("IntegerDBType"), prefer}
    "varchar"          -> DBType {cons("StringDBType"), prefer}
    "datetime"         -> DBType {cons("DateTimeDBType"), prefer}
    "uniqueidentifier" -> DBType {cons("UuidDBType"), prefer}

  )

module languages/DatabaseLang/languagebuilders


module languages/DatabaseLang/prettyprinter


module languages/DatabaseLang/adapter


module DatabaseSPXLang
imports languages/DatabaseLang/adapter languages/DatabaseLang/prettyprinter
        languages/DatabaseLang/languagebuilders languages/DatabaseLang/dataDef
        languages/DatabaseLang/languagedescription languages/DatabaseLang/Common
        languages/DatabaseLang/colordescription
        languages/DatabaseLang/commonsyntax
        languages/DatabaseLang/codecompletion