<?xml version="1.0" encoding="UTF-8" ?>

<project name="build.spx.imp.generator.helper">

       
       <!--
        <target name="spoofaximp.default" depends="spoofaximp.default.ctree"/>
		<target name="spoofaximp.default.ctree" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.ctree,sdf2imp,refresh"/>
        <target name="spoofaximp.default.jar" depends="check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,java.jar,stratego.jar.helper,sdf2imp,refresh"/>
    -->
        <!-- Initialization -->
        <available file="${build}/org/strategoxt/imp/spoofax/generator/Main.class" property="java.jar.enabled"/>
        <condition property="java.jar.import" value="" else="">
            <isset property="java.jar.enabled"/>
        </condition>
        <condition property="java.jar.classpath" value=":${include}/${strmodule}-java.jar" else="">
            <isset property="java.jar.enabled"/>
        </condition>
        <available file="${trans}/${strmodule}.str" property="build.stratego.enabled"/>
        <dirname property="externaldefdir" file="${externaldef}"/>
        <condition property="externaldefimport" value="-I &quot;${externaldefdir}&quot;" else="">
            <isset property="externaldef"/>
        </condition>
        <condition property="externaljarimport1" value=":${externaljar}" else="">
            <isset property="externaljar"/>
        </condition>
        <condition property="externaljarimport2" value=":${externaljarx}" else="">
            <isset property="externaljarx"/>
        </condition>
        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
            <isset property="eclipse.running"/>
        </condition>
        <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
            <available classname="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        </condition>
        <condition property="externaljarflags" value="${externaljarflags}" else="">
            <isset property="externaljarflags"/>
        </condition>
        <condition property="metasdfmodule.available" value="1">
            <available file="${syntax}/${metasdfmodule}.sdf"/>
        </condition>
        
        <fail unless="build" message="Please use build.main.xml to build this project or configure the required properties manually"/>
        <mkdir dir="${build}"/>
        <mkdir dir="${src-gen}"/>
        <mkdir dir="${dist}"/>
        <mkdir dir="${include}"/>
        <mkdir dir="${lib}"/>
        <mkdir dir="${syntax}"/>

        <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/>
        
	<target name="sdf2imp.eclipse" if="eclipse.running" depends="sdf2rtg">
    	<java classname="org.strategoxt.imp.metatooling.building.AntDescriptorBuilder" failonerror="true">
	        <arg value="${include}/${esvmodule}.packed.esv"/>
        </java>
    </target>
        
    <target name="refresh" if="eclipse.running">
            <eclipse.convertPath fileSystemPath="${basedir}" property="projectdir"/>
            <eclipse.convertPath fileSystemPath="${syntax}" property="syntaxdir"/>
            <eclipse.convertPath fileSystemPath="${lib}" property="libdir"/>
        	<eclipse.convertPath fileSystemPath="${src-gen}" property="eclipse.path.src-gen"/>
            	
            <eclipse.refreshLocal resource="${libdir}" depth="infinite"/>
        	<eclipse.refreshLocal resource="${libdir}/java-front" depth="infinite"/>
        	
        	<eclipse.refreshLocal resource="${projectdir}/build.generated.xml" depth="infinite"/>
			<eclipse.refreshLocal resource="${projectdir}/src/syntax" depth="infinite"/>
        	<eclipse.refreshLocal resource="${projectdir}/src/sdf2imp" depth="infinite"/>
        	            
        	<eclipse.refreshLocal resource="${syntaxdir}/${editorservice}.pp.generated" depth="infinite"/>
        	
        	<eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
            <eclipse.convertPath fileSystemPath="${build}" property="eclipse.path.build"/>
            <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
            
        </target>
        
    <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2rtg">
        <java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
            <arg value="-i"/>
            <arg value="${basedir}/editor/${esvmodule}.main.esv"/>
            <arg value="-p"/>
            <arg value="${include}/${sdfmodule}.tbl"/>
        </java>
    </target>

	<target name="sdf2table-main" depends="make-permissive-main">
		
		<antcall target="sdf2table">
			<param name="sdfmodule" value = "${editorservice}"/>
		</antcall>
		
		<antcall target="sdf2table">
			<param name="sdfmodule" value = "${str-java-editorservice}"/>
		</antcall>
		
		<!-- Generating *.TBL from the *.DEF specified in LIB-->	
		<antcall target="sdf2table">
			<param name="sdfmodule" value = "Stratego-xml"/>
			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="sdf2table">
			<param name="sdfmodule" value = "Stratego-rtg"/>
			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="sdf2table">
			<param name="sdfmodule" value = "Stratego-Box"/>
			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="sdf2table">
			<param name="sdfmodule" value = "Stratego-Java-15"/>
			<param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
	</target>	
	
	<target name = "make-permissive-main" depends= "pack-sdf-main"> 
		<antcall target="make-permissive">
			<param name="sdfmodule" value = "${editorservice}"/>
		</antcall>
		<antcall target="make-permissive">
			<param name="sdfmodule" value = "${str-java-editorservice}"/>
		</antcall>
		<antcall target="make-permissive">
			<param name="sdfmodule" value = "Stratego-xml"/>
		</antcall>
		<antcall target="make-permissive">
			<param name="sdfmodule" value = "Stratego-rtg"/>
		</antcall>
		<antcall target="make-permissive">
			<param name="sdfmodule" value = "Stratego-Box"/>
		</antcall>
		
		<antcall target="make-permissive">
			<param name="sdfmodule" value = "Stratego-Java-15"/>
		</antcall>
		
		<antcall target="meta-sdf2table.helper" />
	</target>
	
	<target name="pack-sdf-main" > 
		<antcall target="pack-sdf">
			<param name = "sdfmodule" value = "${editorservice}"/>
			<param name = "build.sdf.imports" value=""/>
		</antcall>
		
		<antcall target="pack-sdf">
			<param name="sdfmodule"         value = "${str-java-editorservice}"/>
			<param name="build.sdf.imports" value="-Idef ${java-front}/Stratego-Java-EBlock.def -Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="pack-sdf">
			<param name="syntax" value = "${xml-front}\syntax"/>
			<param name="sdfmodule" value = "Stratego-xml"/>
			<param name="build.sdf.imports" value="-Idef &quot;${lib}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="pack-sdf">
			<param name="syntax" value = "${lib}\stratego-rtg\syntax"/>
			<param name="sdfmodule" value = "Stratego-rtg"/>
			<param name="build.sdf.imports" value="-Idef &quot;${lib}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="pack-sdf">
			<param name="syntax" value = "${lib}\stratego-gpp\syntax"/>
			<param name="sdfmodule" value = "Stratego-Box"/>
			<param name="build.sdf.imports" value="-Idef &quot;${lib}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
		
		<antcall target="pack-sdf">
			<param name="syntax" value = "${java-front}"/>
			<param name="sdfmodule" value = "Stratego-Java-15"/>
			<param name="build.sdf.imports" value="-Idef &quot;${lib}/StrategoMix.def&quot; ${build.sdf.imports}" />
		</antcall>
	</target>
	
	<!-- Generating Signature files from RTG Definitions -->
	<target name = "rtg2sig-main" if="build.stratego.enabled" depends="sdf2rtg-main">
		<antcall target="rtg2sig">
			<param name="sdfmodule" value = "${editorservice}"/>
		</antcall>	
		
		<antcall target="rtg2sig">
			<param name="sdfmodule" value = "${str-java-editorservice}"/>
		</antcall>
	</target>	
	
	<target name="sdf2rtg-main" depends="pack-sdf-main" >
			<antcall target="sdf2rtg">
				<param name="sdfmodule" value = "${editorservice}"/>
			</antcall>
			<antcall target="sdf2rtg">
				<param name="sdfmodule" value = "${str-java-editorservice}"/>
			</antcall>
	</target>
		
	 
	
    <target name="check-classpath">
        <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
        <antcall target="check-classpath.helper"/>  
    </target>
    
    <target name="init" if="eclipse.running">
        <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
        <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
            <arg value="${include}"/>
        </java>
    </target>
  
    <target name="check-classpath.helper" unless="check-classpath.available">
        <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
        <echo level="error" message="Make sure it is on the class path."/>
        <echo level="error" message=""/>               
        <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
        <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
        <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
        <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
        <fail/>
    </target>
    
	<target name="sdf2table">
        <apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
            <arg value="-i"/>
            <srcfile/>
            <arg value="-o"/>
            <targetfile/>
            <arg value="-m"/>
            <arg value="${sdfmodule}"/>
            
            <fileset file="${include}/${sdfmodule}-Permissive.def"/>
            <mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
        </apply>
    </target>
	
    <target name="make-permissive">
        <dependset>
            <srcfileset file="${include}/${sdfmodule}.def"/>
            <targetfileset file="${include}/${sdfmodule}-Permissive.def"/>
        </dependset>
        <available file="${include}/${sdfmodule}-Permissive.def" property="permissive-grammar.available"/>
        <antcall target="make-permissive.helper"/>
    </target>

    <target name="make-permissive.helper" unless="permissive-grammar.available">
        <java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
            <arg value="-i"/>
            <arg value="${include}/${sdfmodule}.def"/>
            <arg value="-o"/>
            <arg value="${include}/${sdfmodule}-Permissive.def"/>
            <arg line="--optimize on"/>
        </java>
    </target>
	
    <target name="meta-sdf2table" if="metasdfmodule.available">
        <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
        <antcall target="sdf2table">
            <param name="sdfmodule" value="${metasdfmodule}"/>
            <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
        </antcall>
        <antcall target="meta-sdf2table.helper"/>
    </target>
        
    <target name="meta-sdf2table.helper" if="eclipse.running">
       <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
       <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
    </target>
 
    <target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
            <mkdir dir="utils"/>
            <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
            <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
            <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
            <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
        </target>
		
	<target name="pack-sdf" unless="externaldef">
        <dependset>
            <srcfileset dir="${syntax}">
                <include name="**/*.sdf"/>
            </srcfileset>
            <srcfileset dir="${lib}">
                <include name="**/*.def"/>
            </srcfileset>
            <targetfileset file="${include}/${sdfmodule}.def"/>
        </dependset>
  
    	<available file="${include}/${sdfmodule}.def" property="pack-sdf.available"/>
    	
		<antcall target = "pack-sdf.helper">
    		<param name = "sdfmodule"  value = "${sdfmodule}"/>
    		<param name = "build.sdf.imports" value="${build.sdf.imports}"/>
    	</antcall>		
    </target>
    
    <target name="pack-sdf.helper" unless="pack-sdf.available">
        <condition property="utils-include" value="-I ${utils}" else="">
            <available file="${utils}"/>
        </condition>
        <java classname="run" failonerror="true">
            <arg value="org.strategoxt.tools.main-pack-sdf"/>
            <arg value="-i"/>
            <arg value="${syntax}/${sdfmodule}.sdf"/>
            <arg value="-o"/>
            <arg value="${include}/${sdfmodule}.def"/>
            <arg value="-I"/>
            <arg value="${syntax}"/>
            <arg value="-I"/>
            <arg value="${lib}"/>
            <arg line="${utils-include}"/>
            <arg line="${build.sdf.imports}"/>
        </java>
    </target>
    
    <target name="copy-sdf" if="externaldef">
        <copy file="${externaldef}" tofile="${include}/${sdfmodule}.def" preservelastmodified="true"/>
    </target>

    <target name="copy-jar" if="externaljar">
        <copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
    </target>
	
	   <target name="sdf2rtg">
        <dependset>
            <srcfileset file="${include}/${sdfmodule}.def"/>
            <targetfileset file="${include}/${sdfmodule}.rtg"/>
        </dependset>
        <available file="${include}/${sdfmodule}.rtg" property="sdf2rtg.available"/>
        <antcall target="sdf2rtg.helper"/>
    </target>
	
    <target name="sdf2rtg.helper" unless="sdf2rtg.available">
        <java classname="run" failonerror="true">
            <arg value="org.strategoxt.tools.main-sdf2rtg"/>
            <arg value="-i"/>
            <arg value="${include}/${sdfmodule}.def"/>
            <arg value="-m"/>
            <arg value="${sdfmodule}"/>
            <arg value="-o"/>
            <arg value="${include}/${sdfmodule}.rtg"/>
            <arg value="--ignore-missing-cons"/>
            <arg value="-Xnativepath"/>
            <arg value="${build.strategoxt.sdf}"/>
        </java>
    </target>
		
	<target name="rtg2sig" if="build.stratego.enabled">
        <dependset>
            <srcfileset file="${include}/${sdfmodule}.rtg"/>
            <targetfileset file="${include}/${sdfmodule}.str"/>
        </dependset>
        <available file="${include}/${sdfmodule}.str" property="rtg2sig.available"/>
        <antcall target="rtg2sig.helper"/>
    </target>
    
    <target name="rtg2sig.helper" unless="rtg2sig.available">
        <java classname="run" failonerror="true">
            <arg value="org.strategoxt.tools.main-rtg2sig"/>
            <arg value="-i"/>
            <arg value="${include}/${sdfmodule}.rtg"/>
            <arg value="-o"/>
            <arg value="${include}/${sdfmodule}.str"/>
            <arg value="--module"/>
            <arg value="${sdfmodule}"/>
        </java>
    </target>
        	
		<target name="ppgen-main"  depends="pack-sdf-main"> 
			<antcall target="ppgen">
				<param name="sdfmodule" value = "${editorservice}"/>
			</antcall>
			<antcall target="ppgen">
				<param name="sdfmodule" value = "${str-java-editorservice}"/>
			</antcall>
		</target>
	 	
		<target name="pppack-main" depends="pack-sdf-main"> 
			<antcall target="pppack">
				<param name="sdfmodule" value = "${editorservice}-pretty"/>
			</antcall>
			<antcall target="pppack">
				<param name="sdfmodule" value = "${str-java-editorservice}"/>
			</antcall>
		</target>
	
	
        <target name="ppgen" if="build.stratego.enabled">
            <dependset>
                <srcfileset file="${include}/${sdfmodule}.def"/>
                <targetfileset file="${syntax}/${sdfmodule}.generated.pp"/>
                <targetfileset file="${include}/${sdfmodule}.generated.pp.af"/>
            </dependset>
            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
            <antcall target="ppgen.helper"/>
            <available file="${include}/${sdfmodule}.generated.pp.af" property="ppgen.available"/>
            <antcall target="ppgen.helper.fallback"/>
        </target>
    
        <target name="ppgen.helper" unless="ppgen.available">
            <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
            <java classname="run" failonerror="false">
                <arg value="org.strategoxt.tools.main-ppgen"/>
                <arg value="-i"/>
                <arg value="${include}/${sdfmodule}.def"/>
                <arg value="-t"/>
                <arg value="-b"/>
                <arg value="-o"/>
                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
            </java>
            <java classname="run" failonerror="false">
                <arg value="org.strategoxt.tools.main-pp-pp-table"/>
                <arg value="-i"/>
                <arg value="${include}/${sdfmodule}.generated.pp.af"/>
                <arg value="-o"/>
                <arg value="${syntax}/${sdfmodule}.generated.pp"/>
            </java>
        </target>
    
        <target name="ppgen.helper.fallback" unless="ppgen.available">
            <echo file="${include}/${sdfmodule}.generated.pp.af" message="PP-Table([])"/>
        </target>
        
        <target name="pppack" if="build.stratego.enabled" >
            <dependset>
                <srcfileset file="${syntax}/${sdfmodule}.pp"/>
                <targetfileset file="${include}/${sdfmodule}.pp.af"/>
            </dependset>
            <available file="${syntax}/${sdfmodule}.pp" property="pppack.source-available"/>
            <antcall target="pppack.helper"/>
            <available file="${include}/${sdfmodule}.pp.af" property="pppack.available"/>
            <antcall target="pppack.helper.fallback"/>
        </target>
    
        <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
            <java classname="run" failonerror="true">
                <arg value="org.strategoxt.tools.main-parse-pp-table"/>
                <arg value="-i"/>
                <arg value="${syntax}/${sdfmodule}.pp"/>
                <arg value="-o"/>
                <arg value="${include}/${sdfmodule}.pp.af"/>
            </java>
        </target>
    
        <target name="pppack.helper.fallback" unless="pppack.available">
            <echo file="${include}/${sdfmodule}.pp.af" message="PP-Table([])"/>
        </target>
    
        <!-- Aster to Stratego -->
        <target name="stratego.aster">
            <available file="${trans}/${strmodule}.rtree" property="aster-output.available"/>
            <fileset dir="${basedir}" id="aster-input-set">
              <include name="**/*.astr"/>
            </fileset>
            <pathconvert pathsep=" " setonempty="false" property="aster-input" refid="aster-input-set"/>
            <dependset>
                <srcfileset dir="${basedir}">
                    <include name="**/*.astr"/>
                </srcfileset>
                <targetfileset file="${trans}/${strmodule}.rtree"/>
            </dependset>
            <condition property="aster-output.uptodate">
                <and>
                    <isset property="aster-output.available"/>
                    <available file="${trans}/${strmodule}.rtree"/>
                </and>
            </condition>
            <available file="${trans}/${strmodule}.rtree" property="aster-output.uptodate"/>
            <antcall target="stratego.aster.helper"/>
        </target>
    
        <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
            <java classname="org.strategoxt.aster.Main" failonerror="true">
                <arg value="-i"/>
                <arg line="${aster-input}"/>
            </java>
        </target>
        
        <target name="java.jar" if="java.jar.enabled">
            <jar basedir="${build}" excludes="trans/**" update="true" destfile="${include}/${strmodule}-java.jar"/>
        </target>
    
        <!-- Stratego to Java interpreter -->
        <target name="stratego.ctree" depends="rtg2sig-main">
            <dependset>
                <srcfileset dir="${basedir}">
                    <include name="**/*.str"/>
                    <include name="**/*.astr"/>
                    <exclude name="lib/*.generated.str"/>
                </srcfileset>
                <targetfileset file="${include}/${strmodule}.ctree"/>
            </dependset>
            <available file="${include}/${strmodule}.ctree" property="strc-java.available"/>
            <antcall target="copy-jar"/>
            <antcall target="stratego.jvm.helper">
                <param name="build.stratego.outputfile" value="${include}/${strmodule}.ctree"/>
                <param name="build.stratego.extraargs" value="-F"/>
            </antcall>
        </target>
    
        <!-- Stratego to Java compiler -->
        <target name="stratego.jar" depends="sdf2table-main,rtg2sig-main,utils-files">
            <dependset>
                <srcfileset dir="${basedir}">
                    <include name="**/*.str"/>
                    <include name="**/*.astr"/>
                    <exclude name="lib/*.generated.str"/>
                </srcfileset>
                <targetfileset file="${src-gen}/trans/Main.java"/>
            </dependset>
            <available file="${src-gen}/trans/Main.java" property="strc-java.available"/>
            <antcall target="copy-jar"/>
            <antcall target="stratego.jar.deletehelper"/>
            
          <property name="build.stratego.packagename" value="org.strategoxt.imp.spoofax.generator"/>
        	<antcall target="stratego.jvm.helper">
              <param name="build.stratego.outputfile" value="${src-gen}/${strmodule}.java"/>
              <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
          </antcall>
        	
        	<javac classpath="utils/strategoxt.jar:${src-gen}${externaljarimport1}${externaljarimport2}${java.jar.classpath}" 
        	        		   srcdir="${src-gen}" 
        	        		   destdir="${build}" 
        	        		   source="1.5" 
        	        		   target="1.5" 
        	        		   debug="on">	
    				<compilerarg line = "-J-Xmx256m -J-Xms100m -J-server -J-XX:+UseParallelGC -nowarn "/>
        	</javac>

  		<!-- copy imported terms -->
      <copy todir="${build}/org/strategoxt/imp/spoofax/generator">
        <fileset dir="${src-gen}" excludes="**/*.java"/>
      </copy>
      
    	<!-- creating MENIFEST FILE  -->
    	<mkdir dir = "${build}/META-INF"/>
			<property name="build.stratego.manifestfile.path" value="${build}/META-INF/MANIFEST.MF"/>
    
    	<antcall target="create-manifest.stratego.jar">
	    	<param name="sdf2imp.Class-Path" value = "strategoxt.jar"/>
				<param name="sdf2imp.Main-Class" value = "${build.stratego.packagename}.${strmodule}"/>
			</antcall>	
          
    	<jar 
      	basedir="${build}" 
      	includes="org/strategoxt/imp/spoofax/generator/**" 
        destfile="${include}/${outputjar}.tmp.jar"
        manifest="${build.stratego.manifestfile.path}"
      />
    	    
      <move file="${include}/${outputjar}.tmp.jar" tofile="${include}/${outputjar}.jar" failonerror="true"/>
  		<copy file="${include}/${outputjar}.jar" todir="${lib}" failonerror="true"/>
      <delete>
      	<fileset dir="${build}" includes="org/strategoxt/imp/spoofax/generator/**"/>
      	<fileset dir="${build}" includes="META-INF/**"/>
      </delete>
    </target>
		
	<tstamp>
        <format property="timestamp.isoformat"  pattern="yyyy-mm-dd'T'HH:mm:ss" locale="en"/>
    </tstamp>
            		
		
    <!-- Creates Menifest files  for STRATEGO jar -->            			
    <target name="create-manifest.stratego.jar" description="Create menifast file for *jar" >
        <manifest file="${build.stratego.manifestfile.path}">
            <attribute name="Built-On" value="${timestamp.isoformat}"/>
            <attribute name="Class-Path" value="${sdf2imp.Class-Path}"/>
            <attribute name="Main-Class" value="${sdf2imp.Main-Class}"/>
        </manifest>
    </target>

		<target name="stratego.jar.deletehelper" unless="strc-java.available">
            <delete>
                <fileset dir="${src-gen}" includes="trans/**"/>
                <fileset dir="${build}" includes="trans/**"/>
            </delete>
        </target>
            
        <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
        	
        	<java classname="org.strategoxt.strj.Main" failonerror="true">
                <arg value="-i"/>
                <arg value="${trans}/${strmodule}.str"/>
                <arg value="-o"/>
                <arg value="${build.stratego.outputfile}"/>
            		<arg value="-p"/>
                <arg value="${build.stratego.packagename}"/>
                <arg value="-m"/>
                <arg value="main-${strmodule}"/>
                <arg value="--library"/>
                <arg value="--clean"/>
                <arg line="${build.stratego.args}"/>
                <arg line="${build.stratego.extraargs}"/>
                <arg line="${externaljarflags}"/>
                <arg line="${externaldefimport}"/>
                <arg line="-I &quot;${lib}&quot; -I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
            </java>
            <delete file="${include}/${strmodule}.rtree" failonerror="false"/>
        	<mkdir dir="${build}/org/strategoxt/imp/generator"/>
        </target>
                
    
        
        <target name="clean" description="clean up">
            <delete dir="${build}"/>
            <delete file="${include}/${editorservice}.def"/>
        		<delete file="${include}/${str-java-editorservice}.def"/>
        		<delete>
        		    <fileset dir="${src-gen}" includes="**/*"/>
      		  </delete>
        </target>
	
    </project>