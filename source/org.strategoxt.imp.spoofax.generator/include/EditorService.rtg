
regular tree grammar
  start Module
  productions
    ListStarOfImport0           -> ListPlusOfImport0
    ListStarOfImport0           -> <nil>()
    ListStarOfImport0           -> <conc>(ListStarOfImport0,ListStarOfImport0)
    ListPlusOfImport0           -> <conc>(ListStarOfImport0,ListPlusOfImport0)
    ListPlusOfImport0           -> <conc>(ListPlusOfImport0,ListStarOfImport0)
    ListPlusOfImport0           -> <conc>(ListPlusOfImport0,ListPlusOfImport0)
    ListPlusOfImport0           -> <cons>(Import,ListStarOfImport0)
    ListStarOfSection0          -> ListPlusOfSection0
    ListStarOfSection0          -> <nil>()
    ListStarOfSection0          -> <conc>(ListStarOfSection0,ListStarOfSection0)
    ListPlusOfSection0          -> <conc>(ListStarOfSection0,ListPlusOfSection0)
    ListPlusOfSection0          -> <conc>(ListPlusOfSection0,ListStarOfSection0)
    ListPlusOfSection0          -> <conc>(ListPlusOfSection0,ListPlusOfSection0)
    ListPlusOfSection0          -> <cons>(Section,ListStarOfSection0)
    ListStarOfFileName0         -> <string>
    ListPlusOfFileName0         -> <string>
    ListStarOfBuilderOption0    -> ListPlusOfBuilderOption0
    ListStarOfBuilderOption0    -> <nil>()
    ListStarOfBuilderOption0    -> <conc>(ListStarOfBuilderOption0,ListStarOfBuilderOption0)
    ListPlusOfBuilderOption0    -> <conc>(ListStarOfBuilderOption0,ListPlusOfBuilderOption0)
    ListPlusOfBuilderOption0    -> <conc>(ListPlusOfBuilderOption0,ListStarOfBuilderOption0)
    ListPlusOfBuilderOption0    -> <conc>(ListPlusOfBuilderOption0,ListPlusOfBuilderOption0)
    ListPlusOfBuilderOption0    -> <cons>(BuilderOption,ListStarOfBuilderOption0)
    ListStarOfSemanticNode0     -> ListPlusOfSemanticNode0
    ListStarOfSemanticNode0     -> <nil>()
    ListStarOfSemanticNode0     -> <conc>(ListStarOfSemanticNode0,ListStarOfSemanticNode0)
    ListPlusOfSemanticNode0     -> <conc>(ListStarOfSemanticNode0,ListPlusOfSemanticNode0)
    ListPlusOfSemanticNode0     -> <conc>(ListPlusOfSemanticNode0,ListStarOfSemanticNode0)
    ListPlusOfSemanticNode0     -> <conc>(ListPlusOfSemanticNode0,ListPlusOfSemanticNode0)
    ListPlusOfSemanticNode0     -> <cons>(SemanticNode,ListStarOfSemanticNode0)
    ListStarOfSemanticRule0     -> ListPlusOfSemanticRule0
    ListStarOfSemanticRule0     -> <nil>()
    ListStarOfSemanticRule0     -> <conc>(ListStarOfSemanticRule0,ListStarOfSemanticRule0)
    ListPlusOfSemanticRule0     -> <conc>(ListStarOfSemanticRule0,ListPlusOfSemanticRule0)
    ListPlusOfSemanticRule0     -> <conc>(ListPlusOfSemanticRule0,ListStarOfSemanticRule0)
    ListPlusOfSemanticRule0     -> <conc>(ListPlusOfSemanticRule0,ListPlusOfSemanticRule0)
    ListPlusOfSemanticRule0     -> <cons>(SemanticRule,ListStarOfSemanticRule0)
    ListStarOfCompletionAnno0   -> ListPlusOfCompletionAnno0
    ListStarOfCompletionAnno0   -> <nil>()
    ListStarOfCompletionAnno0   -> <conc>(ListStarOfCompletionAnno0,ListStarOfCompletionAnno0)
    ListPlusOfCompletionAnno0   -> <conc>(ListStarOfCompletionAnno0,ListPlusOfCompletionAnno0)
    ListPlusOfCompletionAnno0   -> <conc>(ListPlusOfCompletionAnno0,ListStarOfCompletionAnno0)
    ListPlusOfCompletionAnno0   -> <conc>(ListPlusOfCompletionAnno0,ListPlusOfCompletionAnno0)
    ListPlusOfCompletionAnno0   -> <cons>(CompletionAnno,ListStarOfCompletionAnno0)
    ListStarOfSort0             -> ListPlusOfSort0
    ListStarOfSort0             -> <nil>()
    ListStarOfSort0             -> <conc>(ListStarOfSort0,ListStarOfSort0)
    ListPlusOfSort0             -> <conc>(ListStarOfSort0,ListPlusOfSort0)
    ListPlusOfSort0             -> <conc>(ListPlusOfSort0,ListStarOfSort0)
    ListPlusOfSort0             -> <conc>(ListPlusOfSort0,ListPlusOfSort0)
    ListPlusOfSort0             -> <cons>(Sort,ListStarOfSort0)
    ListStarOfCompletionPart0   -> ListPlusOfCompletionPart0
    ListStarOfCompletionPart0   -> <nil>()
    ListStarOfCompletionPart0   -> <conc>(ListStarOfCompletionPart0,ListStarOfCompletionPart0)
    ListPlusOfCompletionPart0   -> <conc>(ListStarOfCompletionPart0,ListPlusOfCompletionPart0)
    ListPlusOfCompletionPart0   -> <conc>(ListPlusOfCompletionPart0,ListStarOfCompletionPart0)
    ListPlusOfCompletionPart0   -> <conc>(ListPlusOfCompletionPart0,ListPlusOfCompletionPart0)
    ListPlusOfCompletionPart0   -> <cons>(CompletionPart,ListStarOfCompletionPart0)
    ListStarOfPlaceholderChar0  -> <string>
    ListPlusOfPlaceholderChar0  -> <string>
    ListStarOfColorRule0        -> ListPlusOfColorRule0
    ListStarOfColorRule0        -> <nil>()
    ListStarOfColorRule0        -> <conc>(ListStarOfColorRule0,ListStarOfColorRule0)
    ListPlusOfColorRule0        -> <conc>(ListStarOfColorRule0,ListPlusOfColorRule0)
    ListPlusOfColorRule0        -> <conc>(ListPlusOfColorRule0,ListStarOfColorRule0)
    ListPlusOfColorRule0        -> <conc>(ListPlusOfColorRule0,ListPlusOfColorRule0)
    ListPlusOfColorRule0        -> <cons>(ColorRule,ListStarOfColorRule0)
    ListStarOfOutlineRule0      -> ListPlusOfOutlineRule0
    ListStarOfOutlineRule0      -> <nil>()
    ListStarOfOutlineRule0      -> <conc>(ListStarOfOutlineRule0,ListStarOfOutlineRule0)
    ListPlusOfOutlineRule0      -> <conc>(ListStarOfOutlineRule0,ListPlusOfOutlineRule0)
    ListPlusOfOutlineRule0      -> <conc>(ListPlusOfOutlineRule0,ListStarOfOutlineRule0)
    ListPlusOfOutlineRule0      -> <conc>(ListPlusOfOutlineRule0,ListPlusOfOutlineRule0)
    ListPlusOfOutlineRule0      -> <cons>(OutlineRule,ListStarOfOutlineRule0)
    ListStarOfFoldingRule0      -> ListPlusOfFoldingRule0
    ListStarOfFoldingRule0      -> <nil>()
    ListStarOfFoldingRule0      -> <conc>(ListStarOfFoldingRule0,ListStarOfFoldingRule0)
    ListPlusOfFoldingRule0      -> <conc>(ListStarOfFoldingRule0,ListPlusOfFoldingRule0)
    ListPlusOfFoldingRule0      -> <conc>(ListPlusOfFoldingRule0,ListStarOfFoldingRule0)
    ListPlusOfFoldingRule0      -> <conc>(ListPlusOfFoldingRule0,ListPlusOfFoldingRule0)
    ListPlusOfFoldingRule0      -> <cons>(FoldingRule,ListStarOfFoldingRule0)
    ListStarOfIndentDef0        -> ListPlusOfIndentDef0
    ListStarOfIndentDef0        -> <nil>()
    ListStarOfIndentDef0        -> <conc>(ListStarOfIndentDef0,ListStarOfIndentDef0)
    ListPlusOfIndentDef0        -> <conc>(ListStarOfIndentDef0,ListPlusOfIndentDef0)
    ListPlusOfIndentDef0        -> <conc>(ListPlusOfIndentDef0,ListStarOfIndentDef0)
    ListPlusOfIndentDef0        -> <conc>(ListPlusOfIndentDef0,ListPlusOfIndentDef0)
    ListPlusOfIndentDef0        -> <cons>(IndentDef,ListStarOfIndentDef0)
    ListStarOfFenceDef0         -> ListPlusOfFenceDef0
    ListStarOfFenceDef0         -> <nil>()
    ListStarOfFenceDef0         -> <conc>(ListStarOfFenceDef0,ListStarOfFenceDef0)
    ListPlusOfFenceDef0         -> <conc>(ListStarOfFenceDef0,ListPlusOfFenceDef0)
    ListPlusOfFenceDef0         -> <conc>(ListPlusOfFenceDef0,ListStarOfFenceDef0)
    ListPlusOfFenceDef0         -> <conc>(ListPlusOfFenceDef0,ListPlusOfFenceDef0)
    ListPlusOfFenceDef0         -> <cons>(FenceDef,ListStarOfFenceDef0)
    ListStarOfPropertyValue0    -> ListPlusOfPropertyValue0
    ListStarOfPropertyValue0    -> <nil>()
    ListStarOfPropertyValue0    -> <conc>(ListStarOfPropertyValue0,ListStarOfPropertyValue0)
    ListPlusOfPropertyValue0    -> <conc>(ListStarOfPropertyValue0,ListPlusOfPropertyValue0)
    ListPlusOfPropertyValue0    -> <conc>(ListPlusOfPropertyValue0,ListStarOfPropertyValue0)
    ListPlusOfPropertyValue0    -> <conc>(ListPlusOfPropertyValue0,ListPlusOfPropertyValue0)
    ListPlusOfPropertyValue0    -> <cons>(PropertyValue,ListStarOfPropertyValue0)
    ListStarOfLanguageProperty0 -> ListPlusOfLanguageProperty0
    ListStarOfLanguageProperty0 -> <nil>()
    ListStarOfLanguageProperty0 -> <conc>(ListStarOfLanguageProperty0,ListStarOfLanguageProperty0)
    ListPlusOfLanguageProperty0 -> <conc>(ListStarOfLanguageProperty0,ListPlusOfLanguageProperty0)
    ListPlusOfLanguageProperty0 -> <conc>(ListPlusOfLanguageProperty0,ListStarOfLanguageProperty0)
    ListPlusOfLanguageProperty0 -> <conc>(ListPlusOfLanguageProperty0,ListPlusOfLanguageProperty0)
    ListPlusOfLanguageProperty0 -> <cons>(LanguageProperty,ListStarOfLanguageProperty0)
    ListStarOfCommChar0         -> <string>
    ListPlusOfCommChar0         -> <string>
    ListStarOfStringChar0       -> <string>
    ListPlusOfStringChar0       -> <string>
    OptLit0                     -> <string>
    Import                      -> ImportRenamed(ModuleName,Id)
    Import                      -> Import(ModuleName)
    Imports                     -> NoImports()
    Imports                     -> Imports(ListPlusOfImport0)
    Module                      -> Module(ModuleName,Imports,ListStarOfSection0)
    ModuleName                  -> <string>
    FileName                    -> <string>
    SemanticRule                -> Refactoring(ListStarOfSemanticNode0,String,StrategoCall,ListStarOfBuilderOption0)
    SemanticRule                -> PrettyPrint(StrategoCall)
    SemanticRule                -> PPTable(StrategoCall)
    Section                     -> Refactorings(<string>,ListStarOfSemanticRule0)
    BuilderOption               -> Source()
    BuilderOption               -> Cursor()
    BuilderOption               -> Meta()
    BuilderOption               -> Persistent()
    BuilderOption               -> RealTime()
    BuilderOption               -> OpenEditor()
    SemanticRule                -> BuilderCaption(PropertyValue)
    SemanticRule                -> Builder(String,StrategoCall,ListStarOfBuilderOption0)
    SemanticRule                -> SemanticObserver(StrategoCall)
    Section                     -> Builders(<string>,ListStarOfSemanticRule0)
    Section                     -> Builders(<string>,ListStarOfSemanticRule0)
    CompletionAnno              -> Linked()
    CompletionAnno              -> Blank()
    CompletionAnno              -> Disable()
    CompletionAnno              -> Disable()
    OptCompletionAnno           -> CompletionAnno
    OptCompletionAnno           -> None()
    CompletionPart              -> PlaceholderWithSort(PlaceholderWithSortPrefix,Id)
    CompletionPart              -> Cursor()
    CompletionPart              -> Placeholder(Placeholder)
    CompletionPart              -> String
    CompletionPrefix            -> CompletionPrefix(String)
    CompletionPrefix            -> NoCompletionPrefix()
    SemanticRule                -> CompletionTemplateEx(ListStarOfSort0,CompletionPrefix,ListPlusOfCompletionPart0,ListStarOfCompletionAnno0)
    SemanticRule                -> CompletionTrigger(PropertyValue,OptCompletionAnno)
    SemanticRule                -> CompletionTemplateEx(ListStarOfSort0,PropertyValue,ListStarOfCompletionPart0,ListStarOfCompletionAnno0)
    SemanticRule                -> CompletionTemplateWithSort(Sort,CompletionPart,ListStarOfCompletionPart0,OptCompletionAnno)
    SemanticRule                -> CompletionTemplate(Id,ListPlusOfCompletionPart0,OptCompletionAnno)
    SemanticRule                -> CompletionKeyword(PropertyValue,OptCompletionAnno)
    SemanticRule                -> IdentifierLexical(PropertyValue)
    SemanticRule                -> IdentifierLexical(PropertyValue)
    SemanticRule                -> CompletionProposer(StrategoCall)
    PlaceholderChar             -> <string>
    Placeholder                 -> <string>
    PlaceholderWithSortPrefix   -> <string>
    Section                     -> Completions(<string>,ListStarOfSemanticRule0)
    SemanticRule                -> OccurrenceRule(SemanticNode,StrategoCall)
    SemanticRule                -> HoverRule(SemanticNode,StrategoCall)
    SemanticRule                -> ReferenceRule(SemanticNode,StrategoCall)
    SemanticRule                -> ReferenceHoverRule(SemanticNode,StrategoCall,StrategoCall)
    Section                     -> References(<string>,ListStarOfSemanticRule0)
    AttributeId                 -> String
    AttributeId                 -> Id
    ColorRule                   -> ColorDef(AttributeId,Attribute)
    MaybeColor                  -> NoColor
    MaybeColor                  -> Color
    NoColor                     -> NoColor()
    Color                       -> ColorRGB(Int,Int,Int)
    Color                       -> ColorDefault()
    Font                        -> BOLD_ITALIC()
    Font                        -> BOLD_ITALIC()
    Font                        -> ITALIC()
    Font                        -> BOLD()
    Font                        -> NORMAL()
    TokenKindName               -> TK_UNKNOWN()
    TokenKindName               -> TK_ERROR()
    TokenKindName               -> TK_VAR()
    TokenKindName               -> TK_OPERATOR()
    TokenKindName               -> TK_KEYWORD()
    TokenKindName               -> TK_STRING()
    TokenKindName               -> TK_LAYOUT()
    TokenKindName               -> TK_NUMBER()
    TokenKindName               -> TK_IDENTIFIER()
    ColorNode                   -> Literal(Id)
    ColorNode                   -> Token(TokenKindName)
    ColorNode                   -> Node
    Attribute                   -> AttributeRef(AttributeId)
    Attribute                   -> Attribute(Color,MaybeColor,Font)
    ColorRule                   -> ColorRuleNamed(ColorNode,String,Attribute)
    ColorRule                   -> ColorRuleAllNamed(ColorNode,String,Attribute)
    ColorRule                   -> ColorRule(ColorNode,Attribute)
    ColorRule                   -> ColorRuleAll(ColorNode,Attribute)
    Section                     -> Colorer(<string>,ListStarOfColorRule0)
    OutlineRule                 -> OutlineRule(Node)
    Section                     -> Outliner(<string>,ListStarOfOutlineRule0)
    FoldingAnno                 -> None()
    FoldingAnno                 -> Folded()
    FoldingAnno                 -> Disable()
    FoldingAnno                 -> Disable()
    FoldingRule                 -> FoldRuleAll(Node,FoldingAnno)
    FoldingRule                 -> FoldRule(Node,FoldingAnno)
    Section                     -> Folding(<string>,ListStarOfFoldingRule0)
    IndentDef                   -> IndentDef(PropertyValue)
    FenceDef                    -> FenceDef(PropertyValue,PropertyValue)
    NoContinuation              -> NoContinuation()
    BlockCommentDef             -> BlockCommentDef(PropertyValue,NoContinuation,PropertyValue)
    BlockCommentDef             -> BlockCommentDef(PropertyValue,PropertyValue,PropertyValue)
    LanguageProperty            -> IdentifierLexical(PropertyValue)
    LanguageProperty            -> IndentDefs(ListStarOfIndentDef0)
    LanguageProperty            -> FenceDefs(ListStarOfFenceDef0)
    LanguageProperty            -> BlockCommentDefs(BlockCommentDef)
    LanguageProperty            -> LineCommentPrefix(PropertyValue)
    LanguageProperty            -> Disambiguator(StrategoCall)
    LanguageProperty            -> UnmanagedTablePrefix(Id)
    LanguageProperty            -> Aliases(PropertyValues)
    LanguageProperty            -> Extends(PropertyValues)
    LanguageProperty            -> URL(URL)
    LanguageProperty            -> StartSymbols(PropertyValues)
    LanguageProperty            -> StartSymbols(ListStarOfSort0)
    LanguageProperty            -> TableProvider(StrategoCall)
    LanguageProperty            -> Table(PropertyValue)
    LanguageProperty            -> Description(PropertyValue)
    LanguageProperty            -> Extensions(PropertyValues)
    LanguageProperty            -> LanguageId(PropertyValue)
    LanguageProperty            -> LanguageName(PropertyValue)
    PropertyValue               -> String
    PropertyValues              -> Values(ListStarOfPropertyValue0)
    URL                         -> <string>
    PropertyValue               -> <string>
    Section                     -> Language(<string>,ListStarOfLanguageProperty0)
    OnSaveAnno                  -> None()
    StrategoCall                -> Attribute(StrategoId)
    StrategoCall                -> Strategy(StrategoId)
    SemanticRule                -> OnSave(StrategoCall,OnSaveAnno)
    SemanticRule                -> SemanticProvider(PropertyValue)
    SemanticRule                -> SemanticProvider(PropertyValue)
    SemanticNode                -> Node
    SemanticNode                -> <string>
    StrategoId                  -> <string>
    Node                        -> SortAndConstructor(Sort,ConstructorId)
    Node                        -> Constructor
    Node                        -> Sort
    ConstructorId               -> Constructor(Id)
    Constructor                 -> ConstructorOnly(ConstructorId)
    String                      -> String(STRING)
    Sort                        -> ListSort(Id)
    Sort                        -> Sort(Id)
    Eof                         -> <string>
    Asterisk                    -> <string>
    CommChar                    -> <string>
    LongCom                     -> <string>
    ShortCom                    -> <string>
    Ws                          -> <string>
    SectionName                 -> <string>
    BACKSLASH                   -> <string>
    StringChar                  -> <string>
    STRING                      -> <string>
    Int                         -> <string>
    IdStar                      -> <string>
    Id                          -> <string>
