module sdf2imp/project/create-grammar

imports
  sdf2imp/util/-

strategies

  create-grammar =
    create-grammar-main;
    create-grammar-common
  
  create-grammar-main =
    <file-exists> <conc-strings> ("syntax/", <get-sdf-main-module>, ".sdf")
  <+
    name        := <get-sdf-main-module>;
    startsymbol := <StartSymbol>;
    
    <output-text-file(|["syntax"], <conc-strings> (name, ".sdf"))>
    <conc-strings>
(
"%% Grammar for the ", name, " language
%% By default, based on an example \"entities\" syntax
module ", name, "

imports Common

exports

  context-free start-symbols
    ", startsymbol, "

  context-free syntax
  
    \"module\" ID Definition*       -> ", startsymbol, " {cons(\"Module\")}
    \"entity\" ID \"{\" Property* \"}\" -> Definition {cons(\"Entity\")}
    ID \":\" Type                   -> Property {cons(\"Property\")}
    ID                            -> Type {cons(\"Type\")}
"
)
  
  create-grammar-common =
    <file-exists> <conc-strings> ("syntax/Common.sdf")
  <+
    <output-text-file(|["syntax"], "Common.sdf")>
// TODO: FLOAT

// MAYBE: unicode ID: 
//   [a-zA-Z\192-\252\255][a-zA-Z0-9\_\192-\252\254\255]* -> UID

${module Common

exports

  lexical syntax
  
    [a-zA-Z][a-zA-Z0-9]* -> ID
    "-"? [0-9]+          -> INT
    
    "\"" StringChar* "\"" -> STRING
    ~[\"\n]               -> StringChar
    "\\\""                -> StringChar
    BackSlashChar         -> StringChar
    "\\"                  -> BackSlashChar
    
    [\ \t\n\r] -> LAYOUT
    
    [\*]                             -> CommentChar
    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT
    
    -> EOF
  
  lexical restrictions
  
    %% Ensure greedy matching for lexicals
  
    CommentChar   -/- [\/]
    INT           -/- [0-9]
    ID            -/- [a-zA-Z0-9\_]
    
    %% EOF may not be followed by any char
    
    EOF           -/- ~[]

    %% Backslash chars in strings may not be followed by " 
    
    BackSlashChar -/- [\"]

  context-free restrictions
  
    %% Ensure greedy matching for comments

    LAYOUT? -/- [\ \t\n\r]
    LAYOUT? -/- [\/].[\/]
    LAYOUT? -/- [\/].[\*]
}