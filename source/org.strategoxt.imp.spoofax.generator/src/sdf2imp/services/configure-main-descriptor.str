module sdf2imp/services/configure-main-descriptor

imports
  libstratego-lib
  
  sdf2imp/util/-

strategies

  /**
   * Records the descriptor configuration, using the 
   * existing descriptor file and/or the command-line options.
   */
  configure-main-descriptor =
    current-main-descriptor-file;
    
    rules(MainDescriptor := <id>);
    
    require-option(
      where(<get-config> SdfMainModuleFlag())
    <+
      where(<set-config> (SdfMainModuleFlag(), <find-main-module>));
      with(get-sdf-main-module)
    | <NoExistingDescriptor < !"Main module (-m)" + !"language name">
    );
    
    verbose-msg(!"Using main module", get-sdf-main-module);
    
    require-option(
      // Still compulsory for sdf2rtg (StrategoXT/8??)
      where(StartSymbol) <+ rules(StartSymbol := <parameterized-sort-to-rtg-sort> <find-start-symbol>)
    | <NoExistingDescriptor < !"Start symbols (-s)" + !"language start symbols">
    );
    
    verbose-msg(!"Using start symbols", StartSymbol);
    
    require-option(
      where(BasePackage) <+ rules(BasePackage := <find-package-name>)
    | <NoExistingDescriptor < !"Package name (-p)" + !"language id">
    );
    
    verbose-msg(!"Using package name", BasePackage);
    
    require-option(
      where(EditorExtensions) <+ rules(EditorExtensions := <find-editor-extensions>)
    | <NoExistingDescriptor < !"Editor file extensions (-e)" + !"language extensions">
    );
    
    verbose-msg(!"Using file extensions", EditorExtensions)
  
  current-main-descriptor-file =
     {| InputDirPrefix, OnImportFailure:
       verbose-msg(!"Reading descriptor files");
       <add-input-dir-prefix> "editor/";
       rules(
         OnImportFailure:
           Import(m) -> Module("", NoImports(), [])
           with
             if <has-extension(|"esv")> <InputFile> then
               fatal-err-msg(|["Could not import module ", m])
             end
           where
             not(<eq> (<main-descriptor-name>, m)); // silently ignore non-main import fails
             warn(|["Could not import module", m]) //DEBUG
       );
       main-descriptor-name;
       input-descriptor-file;
       verbose-msg(!"Existing descriptor determines generated services:", main-descriptor-name)
     |}
   <+
     // Could not read the existing file: use the defaults instead, but don't overwrite the file
     main-descriptor := <conc-strings> ("(editor/", <main-descriptor-name>, ")");
     <warn(|"Error opening existing descriptor file; attempting to use defaults instead")> main-descriptor;
          
     rules(NoExistingDescriptor: _);
     default-main-descriptor

  find-main-module =
    collect-one(?LanguageName(<id>))

  find-start-symbol =
    collect-one(?StartSymbols(<id>));
    try(?Values(<id>));
    try(map(?Sort(<id>)));
    separate-by(|",");
    concat-strings

  find-editor-extensions =
    collect-one(?Extensions(Values(<id>)));
    separate-by(|",");
    concat-strings

  find-package-name =
    with(
      oncetd(?LanguageId(result))
    <+
      default-package-name => result
    );
    !result

  verbosity-scope(s|level) = 
    with( 
      oldlevel := <verbosity>;
      <set-verbosity> level
    );
    finally(
      s
    , <set-verbosity> oldlevel
    )
