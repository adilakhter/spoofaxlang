module sdf2imp/services/create-spxlang-editorservices

imports 
	sdf2imp/options
	sdf2imp/util/-
rules 
	
	create-spxlang-editorservices= 
			output-spx-editor-services;
			output-spx-derived-editor-services 
	
	output-spx-derived-editor-services = 
		lang-name       := <get-sdf-main-module>;
		file-name 	    := "editorservices.generated" ;
		rel-path-part   := <spx-file-relative-path>; 
		file-extension  := ".spx";
		package-name    := <BasePackage <+ default-package-name>;
	  
	  if is-heuristic-services-needed then 
		<output-text-file(|["src",rel-path-part] , $[[file-name][file-extension]])>
$[package [package-name].generated
		 		
[<create-spx-derived-builders-descriptor>]
		 		
[<create-spx-derived-references-descriptor>]
		 		
[<create-spx-derived-outliner-descriptor>]
		 		
[<create-spx-derived-contentfolding-descriptor>]
		 		
[<create-spx-derived-colorer-descriptor>]
		 		
[<create-spx-derived-contentcompletion-descriptor>]
		 		
[<create-spx-derived-syntax-descriptor>]
		 			
] 
	 	else
	 		  verbose-msg(!"Skipping", <concat-strings>["src/" , rel-path-part, "/", file-name,file-extension])
	 	end
 	  	
	
	output-spx-editor-services = 
		lang-name       := <get-sdf-main-module>;
		file-name 	    := "editorservices" ;
		rel-path-part   := <spx-file-relative-path>; 
		file-extension  := ".spx" ;
		package-name    := <BasePackage <+ default-package-name>;
		
		if  not(<file-exists> <concat-strings>["src/" , rel-path-part, "/", file-name,file-extension]) then 
			<output-text-file(|["src",rel-path-part] , $[[file-name][file-extension]])>
$[package [package-name]
	 		
[<create-spx-outliner-descriptor>]
	 		
[<create-spx-contentfolding-descriptor>]
	 			
[<create-spx-colorer-descriptor>]
	 		
[<create-spx-contentcompletion-descriptor>]
	 			
[<create-spx-syntax-descriptor>]
]
		else	 	 	
 			verbose-msg(!"Skipping", <concat-strings><concat-strings>["src/" , rel-path-part, "/", file-name,file-extension])
 		end 	