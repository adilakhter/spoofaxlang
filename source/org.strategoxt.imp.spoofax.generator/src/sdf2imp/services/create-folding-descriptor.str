module sdf2imp/services/create-folding-descriptor

imports
  libstratego-lib
  
  sdf2imp/util/-
  sdf2imp/services/ast-form-heuristic

strategies 
	
	build-folding-descriptor = 
		!|[ module <descriptor-name> "-Folding"
        
        folding
          ~
          ~// This file can be used for custom folding rules.
          ~//
          ~// See the imported file for a brief introduction and examples.
		 ]|
		 
	build-derived-folding-descriptor = 
		 !|[ module <descriptor-name> "-Folding.generated"
        
         folding Default folding definitions
          ~
          ~// Folding rules indicate which syntactic constructs can be folded,
          ~// and take one of the following forms:
          ~//
          ~//   <sort>.<constructor>
          ~//
          ~//   <sort>._
          ~//
          ~//   _.<constructor>
          ~//
          ~// To indicate that an element should always be folded, add
          ~// a (folded) annotation:
          ~//
          ~//   _.Imports (folded)
          ~//
          ~// To disable a folding rule defined elsewhere, add a (disabled) annotation:
          ~//
          ~//   Definition._ (disabled)
          ~
        ]|
        
strategies
	
	create-spx-contentfolding-descriptor = 	
		where(
				descriptor-name		:=	"foldingDescriptor" 
		);
!$[module [descriptor-name]
		 	
[<build-folding-descriptor;pp-descriptor-contents>]
	Start.Module
	Definition.Entity
]
	
	 	
	create-spx-derived-contentfolding-descriptor = 	
		where(
				descriptor-name		:=	"foldingDescriptor" 
		);
	!$[module [descriptor-name]
		 	
[<build-derived-folding-descriptor; pp-descriptor-contents>]
	 	]	
  
strategies

  create-folding-descriptor =
    output-initial-descriptor-file(
      <descriptor-name> "-Folding"
    , !|[
        module <descriptor-name> "-Folding"
        
        imports <descriptor-name> "-Folding.generated"
        
        folding
          ~
          ~// This file can be used for custom folding rules.
          ~//
          ~// See the imported file for a brief introduction and examples.
      ]|
    );
    
    create-derived-folding-descriptor
  
  create-derived-folding-descriptor =
    not(is-heuristic-services-needed);
    verbose-msg(!"Skipping", <descriptor-name> "-Folding.generated")
  <+
    output-derived-descriptor-file(
      <descriptor-name> "-Folding.generated"
    , 
      heuristic-folding-productions;
      map(create-folding-or-outliner-rule);
      !|[
        module <descriptor-name> "-Folding.generated"
        
        folding Default folding definitions
          ~
          ~// Folding rules indicate which syntactic constructs can be folded,
          ~// and take one of the following forms:
          ~//
          ~//   <sort>.<constructor>
          ~//
          ~//   <sort>._
          ~//
          ~//   _.<constructor>
          ~//
          ~// To indicate that an element should always be folded, add
          ~// a (folded) annotation:
          ~//
          ~//   _.Imports (folded)
          ~//
          ~// To disable a folding rule defined elsewhere, add a (disabled) annotation:
          ~//
          ~//   Definition._ (disabled)
          ~
          ~*<id>
      ]|
    )
  
  heuristic-folding-productions =
    StartSymbol;
    
    heuristic-collect-all-rtg(
      // UNDONE: not(is-list-production);
      where(
        heuristic-child-sorts;
        one(heuristic-sort-is-list)
      );
      
      where(
        heuristic-production-has-no-same-sort-descendant
      );
      
      if-verbose3(
        verbose-msg(!"Folding match:", heuristic-asfix-sort-name, constructor-name)
      )
    )
  
  create-folding-or-outliner-rule =
    where(sort := <heuristic-asfix-sort-name>);
  
    if is-list-production then
      !descriptor |[ ~(sort)*.<constructor-name> ]|
    <+
      !descriptor |[ ~(sort)* ]|
    else
      !descriptor |[ ~sort.<constructor-name> ]|
    <+
      !descriptor |[ ~sort ]|
    end
