module sdf2imp/main

imports
  libstratego-lib
  libstratego-xtc
  libstratego-rtg

  libjava-front
  
  EditorService
  
  sdf2imp/options
  sdf2imp/project/-
  sdf2imp/services/-
  sdf2imp/util/-
  sdf2imp/lib/-

overlays

  tname_ASTNODE      = tname |[ org.strategoxt.imp.runtime.parser.ast.AstNode ]|
  tname_VISITOR      = tname |[ org.strategoxt.imp.runtime.parser.ast.AbstractVisitor ]|
  tname_OUTLINERBASE = tname |[ org.strategoxt.imp.runtime.services.OutlinerBase ]|
  tname_FOLDINGBASE  = tname |[ org.strategoxt.imp.runtime.services.FoldingBase ]|
  tname_ITOKEN       = tname |[ lpg.runtime.IToken ]|

strategies

  main-SpoofaxGenerator =
    option-wrap(
      sdf2imp-options
    , 
      generate-spoofaxlang-example
    <+
      prim("SSL_stacktrace_get_all_frame_names") => trace;       
      report-failure // proper stack traces
    )
  
  sdf2imp-jvm:
    esv -> <packed-descriptor-file-name>
    with
      file-exists
    ; not(<get-config> SdfMainModuleFlag()) // (should be read from the file)
    where
      rules(
        InputFile := esv
        IsLaunchedFromEclipse: _ 
      );
      <sdf2imp> FILE(esv)
  
  /*
  sdf2imp-static-files =
    create-build-xml;
    create-common-trans // needs name and project-name
  */
  
  // FIXME: dirty hack for getting the .def file
  //        (should do this based on the esv contents instead...)
  find-def-file =
    remove-extension;
    rules(
      MainDescriptorName   := <base-filename>
      DescriptorNamePrefix := <base-filename; remove-extension>
    );
    with(<chdir> <dirname>; <chdir> "..");
    guarantee-extension(|"def"); // remove .main.esv
    base-filename;
    (file-exists <+ !$[include/[<id>]]);
    if not(file-exists) then
      fatal-err-msg(|$[Accompanying .def file not found: [<id>].
                       Maybe the project should be rebuilt?])
    end;
    verbose-msg(!"Found accompanying .def file:", id)

strategies
	
  generate-spoofaxlang-example =
    where ( say(!"Welcome to SpoofaxLang Project Wizard Version 0.0: ") );
    with(
      <set-verbosity> 3
    );
    require-option(
        <get-config> SdfMainModuleFlag()
      | "Main module (-m)"
    );
    if not(StartSymbol) then
	    rules(StartSymbol := "Start")
    end;
    create-spxlang-lexicalconstructs; 
    create-spxlang-definitions;
    create-spxlang-adapters;
    create-java-strategy;
    create-spx-common-strategies;
    rules(
    	DefaultDefFile := "_" 
    	NoExistingDescriptor: _
    );
    say(!"Generating configuration file for spoofaxlang project. ");
    create-spoofaxlang-config; 
    say(!"Generating main descriptor. ");
    create-spxlang-main-descriptor;
    create-spxlang-editorservices;
   
    create-parse-controller;
    create-validator;
    create-activator;
    
    create-example-file;
    
    if NewProject then 
    	say(!"Generating Eclipse Project related Artifacts.");
	  
	    create-build-properties;
	    create-project-file;
	    create-classpath;
	    create-manifest;
	    
	  	create-jdt-prefs;
	    create-project-file;
	  
	    create-plugin-xml;
	    create-build-xml;
	    create-build-generated-xml;
	    create-builder-xml
	  end;
	    
    copy-jars;
    copy-def-file;
  
    say(!"Spoofaxlang Build succesful.")
  	
 
  sdf2imp =
    with(
      <set-verbosity> 3
    );
    if InputFile then
      !FILE(<InputFile>);
      if FILE(has-extension(|"esv") => esv) then
        <find-def-file> esv;
        rules(InputFile := <id>);
        !FILE(<id>)
      else
        where(
          <file-exists> $[include/[<InputFile>]]
        <+
          <file-exists <+ mkdir> "include";
          <copy-file> (<InputFile>, "include")
        )
      end;
      ?input
    else
      require-option(
        <get-config> SdfMainModuleFlag()
      | "Main module (-m)"
      );
      if not(StartSymbol) then
        rules(StartSymbol := "Start")
      end;
      create-grammar;
      create-pp-table;
      create-example-trans;
      create-java-strategy;
      input @ FILE(inputname) := <pack-default-sdf> FILE($[syntax/[<get-sdf-main-module>].sdf]);
      rules(DefaultDefFile := inputname)
    end;
    
    configure-main-descriptor;
    if is-heuristic-services-needed then
      <sdf2rtg => RTG(_, ProdRules(<id>)); register-rtg> input
    end;
    
    if not(IsLaunchedFromEclipse) then
      // We could build the table here, but doing it from ant is more customizable
      // (also, this way we don't expose our xtc underbelly)
      <copy-or-create-parse-table> input
    end;
  
    if NoExistingDescriptor then
      create-main-descriptor
    end;
    
    create-syntax-descriptor;
    create-folding-descriptor;
    create-outliner-descriptor;
    create-colorer-descriptor;
    create-builders-descriptor;
    create-references-descriptor;
    create-completions-descriptor;
    create-packed-descriptor-file;
    create-parse-controller;
    create-validator;
    create-build-properties;
    create-project-file;
    create-activator;
    create-classpath;
    create-manifest;
    create-plugin-xml;
    create-build-xml;
    create-build-generated-xml;
    create-builder-xml;
    create-example-file;
    create-common-trans;
    copy-jars;
    copy-def-file;      
    create-jdt-prefs;  // project configuration 
    create-project-file;
    create-spoofaxlang-config; //creating spoofax configuration file 
    say(!"Build succesful.")


	//TODO : Currenlty, always generating derived descriptor for the time being. 
	//Add  a check to decide whether the descriptors are needed to be regenerated.   
	is-heuristic-services-needed = id
/*
    not(
      <is-older-than> (
        <guarantee-extension(|"rtg")> <InputFile>
      , [ $[editor/[<descriptor-name> "-Outliner.generated.esv"]]
        , $[editor/[<descriptor-name> "-Folding.generated.esv"]]
        , $[editor/[<descriptor-name> "-Completions.generated.esv"]]
        ]
      )
    )
 */ 
  // (Note that these xtc calls are intercepted by the Spoofax/IMP runtime.)
  sdf2rtg:
    FILE(sdf) -> rtg
    with
      <file-exists> <guarantee-extension(|"rtg")> sdf;
      verbose-msg(!"Importing regular tree grammar from", id);
      parse-rtg-file => rtg
    <+
      verbose-msg(!"Analyzing grammar...");
      if FILE(has-extension(|"sdf")) then
        fatal-err(|"Input file must be a .def file.")
      end;
      table := <xtc-new-file>;
      <sdf2table> (sdf, table, ["-n"]);
      <xtc-transform(!"implodePT")> FILE(table);
      read-from;
      sdf-desugar;
      core-sdf-grammar2rtg => rtg

  pack-default-sdf:
    FILE(sdf) -> FILE(def)
    with
      def := $[include/[<get-sdf-main-module>].def];
      <file-exists <+ mkdir> "include";
      
      <pack-sdf(|[IncludeDir("syntax")])> FILE(sdf) => (_, def-asfix);
      stream := <fopen> (def, "w");
      <asfix-yield(|stream)> def-asfix;
      <fclose> stream
