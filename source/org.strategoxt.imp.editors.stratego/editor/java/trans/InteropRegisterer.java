package trans;

import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_sglr.*;
import org.strategoxt.stratego_gpp.*;
import org.strategoxt.stratego_xtc.*;
import org.strategoxt.stratego_aterm.*;
import org.strategoxt.strc.*;
import org.strategoxt.java_front.*;
import org.strategoxt.imp.editors.stratego.strategies.*;
import org.strategoxt.lang.*;
import org.spoofax.interpreter.terms.*;
import static org.strategoxt.lang.Term.*;
import org.spoofax.interpreter.library.AbstractPrimitive;
import java.util.ArrayList;
import java.lang.ref.WeakReference;

@SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
{ 
  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
  { 
    register(context, compiledContext, context.getVarScope());
  }

  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
  { 
    registerLazy(context, compiledContext, classLoader, context.getVarScope());
  }

  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("fetch_up_position_1_1", new InteropSDefT(fetch_up_position_1_1.instance, context));
    varScope.addSVar("fetch_up_with_position_1_1", new InteropSDefT(fetch_up_with_position_1_1.instance, context));
    varScope.addSVar("fetch_up_with_position_2_1", new InteropSDefT(fetch_up_with_position_2_1.instance, context));
    varScope.addSVar("fetch_down_1_0", new InteropSDefT(fetch_down_1_0.instance, context));
    varScope.addSVar("fetch_down_with_position_1_0", new InteropSDefT(fetch_down_with_position_1_0.instance, context));
    varScope.addSVar("annotated_terms_1_0", new InteropSDefT(annotated_terms_1_0.instance, context));
    varScope.addSVar("fetch_annotated_term_0_1", new InteropSDefT(fetch_annotated_term_0_1.instance, context));
    varScope.addSVar("fetch_by_origin_0_1", new InteropSDefT(fetch_by_origin_0_1.instance, context));
    varScope.addSVar("fetch_by_origin_1_1", new InteropSDefT(fetch_by_origin_1_1.instance, context));
    varScope.addSVar("remove_debug_refactoring_0_0", new InteropSDefT(remove_debug_refactoring_0_0.instance, context));
    varScope.addSVar("remove_debug_0_0", new InteropSDefT(remove_debug_0_0.instance, context));
    varScope.addSVar("is_debug_clause_0_0", new InteropSDefT(is_debug_clause_0_0.instance, context));
    varScope.addSVar("is_debug_call_0_0", new InteropSDefT(is_debug_call_0_0.instance, context));
    varScope.addSVar("extract_refactoring_0_0", new InteropSDefT(extract_refactoring_0_0.instance, context));
    varScope.addSVar("precondition_warning_1_0", new InteropSDefT(precondition_warning_1_0.instance, context));
    varScope.addSVar("mk_defs_for_extraction_0_0", new InteropSDefT(mk_defs_for_extraction_0_0.instance, context));
    varScope.addSVar("mk_defs_for_selection_in_chain_0_0", new InteropSDefT(mk_defs_for_selection_in_chain_0_0.instance, context));
    varScope.addSVar("mk_defs_for_selection_0_0", new InteropSDefT(mk_defs_for_selection_0_0.instance, context));
    varScope.addSVar("extract_1_3", new InteropSDefT(extract_1_3.instance, context));
    varScope.addSVar("elem_as_list_1_0", new InteropSDefT(elem_as_list_1_0.instance, context));
    varScope.addSVar("insert_at_position_0_2", new InteropSDefT(insert_at_position_0_2.instance, context));
    varScope.addSVar("insert_at_index_0_2", new InteropSDefT(insert_at_index_0_2.instance, context));
    varScope.addSVar("in_selected_fragment_0_0", new InteropSDefT(in_selected_fragment_0_0.instance, context));
    varScope.addSVar("origin_non_layout_tokens_0_0", new InteropSDefT(origin_non_layout_tokens_0_0.instance, context));
    varScope.addSVar("reorder_associativity_chain_0_0", new InteropSDefT(reorder_associativity_chain_0_0.instance, context));
    varScope.addSVar("reorder_right_associativity_chain_0_0", new InteropSDefT(reorder_right_associativity_chain_0_0.instance, context));
    varScope.addSVar("check_brackets_tail_term_0_0", new InteropSDefT(check_brackets_tail_term_0_0.instance, context));
    varScope.addSVar("break_right_associativity_chain_0_1", new InteropSDefT(break_right_associativity_chain_0_1.instance, context));
    varScope.addSVar("broken_child_in_right_associativity_chain_0_1", new InteropSDefT(broken_child_in_right_associativity_chain_0_1.instance, context));
    varScope.addSVar("is_unbound_svar_0_0", new InteropSDefT(is_unbound_svar_0_0.instance, context));
    varScope.addSVar("is_unbound_tvar_0_0", new InteropSDefT(is_unbound_tvar_0_0.instance, context));
    varScope.addSVar("svaruse_to_svardec_0_0", new InteropSDefT(svaruse_to_svardec_0_0.instance, context));
    varScope.addSVar("tvaruse_to_tvardec_0_0", new InteropSDefT(tvaruse_to_tvardec_0_0.instance, context));
    varScope.addSVar("inline_refactoring_0_0", new InteropSDefT(inline_refactoring_0_0.instance, context));
    varScope.addSVar("declaration_of_call_0_0", new InteropSDefT(declaration_of_call_0_0.instance, context));
    varScope.addSVar("errors_recursion_0_0", new InteropSDefT(errors_recursion_0_0.instance, context));
    varScope.addSVar("is_recursive_declaration_0_0", new InteropSDefT(is_recursive_declaration_0_0.instance, context));
    varScope.addSVar("warnings_multiple_declarations_0_0", new InteropSDefT(warnings_multiple_declarations_0_0.instance, context));
    varScope.addSVar("inline_0_0", new InteropSDefT(inline_0_0.instance, context));
    varScope.addSVar("inline_call_0_1", new InteropSDefT(inline_call_0_1.instance, context));
    varScope.addSVar("rule_to_lambda_rule_0_0", new InteropSDefT(rule_to_lambda_rule_0_0.instance, context));
    varScope.addSVar("scope_free_vars_0_0", new InteropSDefT(scope_free_vars_0_0.instance, context));
    varScope.addSVar("collect_vars_0_0", new InteropSDefT(collect_vars_0_0.instance, context));
    varScope.addSVar("collect_vars_scope_0_0", new InteropSDefT(collect_vars_scope_0_0.instance, context));
    varScope.addSVar("svardec_to_svaruse_0_0", new InteropSDefT(svardec_to_svaruse_0_0.instance, context));
    varScope.addSVar("tvardec_to_tvaruse_0_0", new InteropSDefT(tvardec_to_tvaruse_0_0.instance, context));
    varScope.addSVar("substitute_multiple_0_2", new InteropSDefT(substitute_multiple_0_2.instance, context));
    varScope.addSVar("substitute_single_0_2", new InteropSDefT(substitute_single_0_2.instance, context));
    varScope.addSVar("delete_elements_1_0", new InteropSDefT(delete_elements_1_0.instance, context));
    varScope.addSVar("rename_builder_0_0", new InteropSDefT(rename_builder_0_0.instance, context));
    varScope.addSVar("inline_builder_0_0", new InteropSDefT(inline_builder_0_0.instance, context));
    varScope.addSVar("extract_builder_0_0", new InteropSDefT(extract_builder_0_0.instance, context));
    varScope.addSVar("remove_debug_builder_0_0", new InteropSDefT(remove_debug_builder_0_0.instance, context));
    varScope.addSVar("process_refactoring_result_0_0", new InteropSDefT(process_refactoring_result_0_0.instance, context));
    varScope.addSVar("pp_builder_0_0", new InteropSDefT(pp_builder_0_0.instance, context));
    varScope.addSVar("test_builder_0_0", new InteropSDefT(test_builder_0_0.instance, context));
    varScope.addSVar("format_refactoring_0_0", new InteropSDefT(format_refactoring_0_0.instance, context));
    varScope.addSVar("collect_semantic_issues_0_0", new InteropSDefT(collect_semantic_issues_0_0.instance, context));
    varScope.addSVar("get_affected_stratego_asts_1_0", new InteropSDefT(get_affected_stratego_asts_1_0.instance, context));
    varScope.addSVar("get_cache_path_0_0", new InteropSDefT(get_cache_path_0_0.instance, context));
    varScope.addSVar("analyze_names_0_0", new InteropSDefT(analyze_names_0_0.instance, context));
    varScope.addSVar("ensure_imports_0_0", new InteropSDefT(ensure_imports_0_0.instance, context));
    varScope.addSVar("re_analyse_names_0_0", new InteropSDefT(re_analyse_names_0_0.instance, context));
    varScope.addSVar("analyze_names_in_asts_0_0", new InteropSDefT(analyze_names_in_asts_0_0.instance, context));
    varScope.addSVar("resugar_Let_0_0", new InteropSDefT(resugar_$Let_0_0.instance, context));
    varScope.addSVar("get_source_asts_0_2", new InteropSDefT(get_source_asts_0_2.instance, context));
    varScope.addSVar("get_source_asts_2_0", new InteropSDefT(get_source_asts_2_0.instance, context));
    varScope.addSVar("parse_source_files_0_0", new InteropSDefT(parse_source_files_0_0.instance, context));
    varScope.addSVar("get_source_files_0_2", new InteropSDefT(get_source_files_0_2.instance, context));
    varScope.addSVar("get_source_files_2_0", new InteropSDefT(get_source_files_2_0.instance, context));
    varScope.addSVar("check_extension_0_1", new InteropSDefT(check_extension_0_1.instance, context));
    varScope.addSVar("elem_of_0_1", new InteropSDefT(elem_of_0_1.instance, context));
    varScope.addSVar("is_spoofax_dir_0_0", new InteropSDefT(is_spoofax_dir_0_0.instance, context));
    varScope.addSVar("spoofax_dirs_0_0", new InteropSDefT(spoofax_dirs_0_0.instance, context));
    varScope.addSVar("get_affected_asts_4_0", new InteropSDefT(get_affected_asts_4_0.instance, context));
    varScope.addSVar("parse_affected_asts_2_0", new InteropSDefT(parse_affected_asts_2_0.instance, context));
    varScope.addSVar("parse_affected_ast_or_none_2_0", new InteropSDefT(parse_affected_ast_or_none_2_0.instance, context));
    varScope.addSVar("reject_ast_from_cache_2_0", new InteropSDefT(reject_ast_from_cache_2_0.instance, context));
    varScope.addSVar("reject_or_get_ast_from_parsing_1_0", new InteropSDefT(reject_or_get_ast_from_parsing_1_0.instance, context));
    varScope.addSVar("namebinding_error_messages_1_0", new InteropSDefT(namebinding_error_messages_1_0.instance, context));
    varScope.addSVar("collect_binding_violations_1_0", new InteropSDefT(collect_binding_violations_1_0.instance, context));
    varScope.addSVar("binding_violations_0_0", new InteropSDefT(binding_violations_0_0.instance, context));
    varScope.addSVar("binding_violations_0_2", new InteropSDefT(binding_violations_0_2.instance, context));
    varScope.addSVar("is_binding_violation_0_2", new InteropSDefT(is_binding_violation_0_2.instance, context));
    varScope.addSVar("mk_binding_violation_message_0_0", new InteropSDefT(mk_binding_violation_message_0_0.instance, context));
    varScope.addSVar("introduced_constraint_errors_1_0", new InteropSDefT(introduced_constraint_errors_1_0.instance, context));
    varScope.addSVar("apply_rename_refactoring_2_2", new InteropSDefT(apply_rename_refactoring_2_2.instance, context));
    varScope.addSVar("apply_rename_refactoring_2_1", new InteropSDefT(apply_rename_refactoring_2_1.instance, context));
    varScope.addSVar("apply_rename_0_1", new InteropSDefT(apply_rename_0_1.instance, context));
    varScope.addSVar("apply_rename_0_2", new InteropSDefT(apply_rename_0_2.instance, context));
    varScope.addSVar("is_endangered_name_0_1", new InteropSDefT(is_endangered_name_0_1.instance, context));
    varScope.addSVar("is_endangered_name_0_2", new InteropSDefT(is_endangered_name_0_2.instance, context));
    varScope.addSVar("get_changed_asts_0_0", new InteropSDefT(get_changed_asts_0_0.instance, context));
    varScope.addSVar("rename_refactoring_0_0", new InteropSDefT(rename_refactoring_0_0.instance, context));
    varScope.addSVar("get_dependend_renamings_0_0", new InteropSDefT(get_dependend_renamings_0_0.instance, context));
    varScope.addSVar("prefixes_dynrules_0_0", new InteropSDefT(prefixes_dynrules_0_0.instance, context));
    varScope.addSVar("get_asts_affected_by_renaming_0_0", new InteropSDefT(get_asts_affected_by_renaming_0_0.instance, context));
    varScope.addSVar("is_global_ref_0_0", new InteropSDefT(is_global_ref_0_0.instance, context));
    varScope.addSVar("external_declaration_errors_0_0", new InteropSDefT(external_declaration_errors_0_0.instance, context));
    varScope.addSVar("declared_in_generated_file_0_1", new InteropSDefT(declared_in_generated_file_0_1.instance, context));
    varScope.addSVar("declared_in_external_lib_0_0", new InteropSDefT(declared_in_external_lib_0_0.instance, context));
    varScope.addSVar("dirs_with_generated_files_0_0", new InteropSDefT(dirs_with_generated_files_0_0.instance, context));
    varScope.addSVar("is_editable_0_0", new InteropSDefT(is_editable_0_0.instance, context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(parse_file_0_0.instance, context));
    varScope.addSVar("parse_stratego__sugar_file_0_0", new InteropSDefT(parse_stratego__sugar_file_0_0.instance, context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(parse_string_0_0.instance, context));
    varScope.addSVar("parse_stratego__sugar_string_0_0", new InteropSDefT(parse_stratego__sugar_string_0_0.instance, context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(parse_stream_0_0.instance, context));
    varScope.addSVar("parse_stratego__sugar_stream_0_0", new InteropSDefT(parse_stratego__sugar_stream_0_0.instance, context));
    varScope.addSVar("pp_stratego__sugar_string_0_0", new InteropSDefT(pp_stratego__sugar_string_0_0.instance, context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(open_import_3_0.instance, context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(open_wildcard_import_4_0.instance, context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(import_cache_path_0_0.instance, context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(project_path_0_0.instance, context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(plugin_path_0_0.instance, context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(candidate_sorts_0_0.instance, context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(is_newer_0_0.instance, context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(editor_init_0_0.instance, context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(refresh_workspace_file_0_0.instance, context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(string_starts_with_capital_0_0.instance, context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(origin_term_0_0.instance, context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(origin_text_0_0.instance, context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(origin_offset_0_0.instance, context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(origin_location_0_0.instance, context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(origin_line_0_0.instance, context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(origin_column_0_0.instance, context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(origin_strip_0_0.instance, context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(origin_equal_0_1.instance, context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(origin_surrounding_comments_0_0.instance, context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(origin_documentation_comment_0_0.instance, context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(documentation_comment_chars_0_0.instance, context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(origin_track_forced_1_0.instance, context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(desugar_position_1_1.instance, context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(at_position_1_1.instance, context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(position_of_term_1_0.instance, context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(position_of_term_1_1.instance, context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(term_at_position_0_1.instance, context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(parent_at_position_0_1.instance, context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(subterm_at_0_1.instance, context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(set_markers_0_1.instance, context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(queue_analysis_0_0.instance, context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(set_total_work_units_0_0.instance, context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(complete_work_unit_0_0.instance, context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(queue_strategy_0_2.instance, context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(set_analysis_backgrounded_0_0.instance, context));
    varScope.addSVar("basic_desugar_top_0_0", new InteropSDefT(basic_desugar_top_0_0.instance, context));
    varScope.addSVar("basic_desugar_0_0", new InteropSDefT(basic_desugar_0_0.instance, context));
    varScope.addSVar("extract_meta_expr_escapes_0_0", new InteropSDefT(extract_meta_expr_escapes_0_0.instance, context));
    varScope.addSVar("get_source_base_dir_0_0", new InteropSDefT(get_source_base_dir_0_0.instance, context));
    varScope.addSVar("get_soure_base_dir_0_0", new InteropSDefT(get_soure_base_dir_0_0.instance, context));
    varScope.addSVar("explode_string_p__0_1", new InteropSDefT(explode_string_p__0_1.instance, context));
    varScope.addSVar("explode_string_0_1", new InteropSDefT(explode_string_0_1.instance, context));
    varScope.addSVar("implode_string_0_1", new InteropSDefT(implode_string_0_1.instance, context));
    varScope.addSVar("analyze_ast_0_0", new InteropSDefT(analyze_ast_0_0.instance, context));
    varScope.addSVar("analyze_ast_local_0_0", new InteropSDefT(analyze_ast_local_0_0.instance, context));
    varScope.addSVar("signature_of_0_0", new InteropSDefT(signature_of_0_0.instance, context));
    varScope.addSVar("remove_quote_0_0", new InteropSDefT(remove_quote_0_0.instance, context));
    varScope.addSVar("is_constructor_0_0", new InteropSDefT(is_constructor_0_0.instance, context));
    varScope.addSVar("is_congruence_signature_0_0", new InteropSDefT(is_congruence_signature_0_0.instance, context));
    varScope.addSVar("declare_cookie_of_0_0", new InteropSDefT(declare_cookie_of_0_0.instance, context));
    varScope.addSVar("declaration_of_0_0", new InteropSDefT(declaration_of_0_0.instance, context));
    varScope.addSVar("declare_definition_0_0", new InteropSDefT(declare_definition_0_0.instance, context));
    varScope.addSVar("redeclare_definition_0_0", new InteropSDefT(redeclare_definition_0_0.instance, context));
    varScope.addSVar("require_1_0", new InteropSDefT(require_1_0.instance, context));
    varScope.addSVar("is_declared_0_0", new InteropSDefT(is_declared_0_0.instance, context));
    varScope.addSVar("declare_globals_top_0_0", new InteropSDefT(declare_globals_top_0_0.instance, context));
    varScope.addSVar("declare_globals_0_0", new InteropSDefT(declare_globals_0_0.instance, context));
    varScope.addSVar("open_import_1_0", new InteropSDefT(open_import_1_0.instance, context));
    varScope.addSVar("resolve_import_decl_0_0", new InteropSDefT(resolve_import_decl_0_0.instance, context));
    varScope.addSVar("load_include_properties_0_0", new InteropSDefT(load_include_properties_0_0.instance, context));
    varScope.addSVar("load_include_paths_0_0", new InteropSDefT(load_include_paths_0_0.instance, context));
    varScope.addSVar("default_include_paths_0_0", new InteropSDefT(default_include_paths_0_0.instance, context));
    varScope.addSVar("expand_relative_path_0_0", new InteropSDefT(expand_relative_path_0_0.instance, context));
    varScope.addSVar("resolve_import_path_0_0", new InteropSDefT(resolve_import_path_0_0.instance, context));
    varScope.addSVar("read_stratego_signatures_0_0", new InteropSDefT(read_stratego_signatures_0_0.instance, context));
    varScope.addSVar("fetch_library_ast_0_0", new InteropSDefT(fetch_library_ast_0_0.instance, context));
    varScope.addSVar("to_signatures_0_0", new InteropSDefT(to_signatures_0_0.instance, context));
    varScope.addSVar("remove_stratego_bodies_0_0", new InteropSDefT(remove_stratego_bodies_0_0.instance, context));
    varScope.addSVar("declare_dynrule_0_0", new InteropSDefT(declare_dynrule_0_0.instance, context));
    varScope.addSVar("declare_dr_rule_0_4", new InteropSDefT(declare_dr_rule_0_4.instance, context));
    varScope.addSVar("dr_scope_declare_cookies_2_0", new InteropSDefT(dr_scope_declare_cookies_2_0.instance, context));
    varScope.addSVar("declare_bodies_top_0_0", new InteropSDefT(declare_bodies_top_0_0.instance, context));
    varScope.addSVar("declare_bodies_0_0", new InteropSDefT(declare_bodies_0_0.instance, context));
    varScope.addSVar("declare_let_definition_0_0", new InteropSDefT(declare_let_definition_0_0.instance, context));
    varScope.addSVar("scope_variables_1_0", new InteropSDefT(scope_variables_1_0.instance, context));
    varScope.addSVar("declare_match_0_0", new InteropSDefT(declare_match_0_0.instance, context));
    varScope.addSVar("declare_svar_0_0", new InteropSDefT(declare_svar_0_0.instance, context));
    varScope.addSVar("declare_svar_signatures_0_2", new InteropSDefT(declare_svar_signatures_0_2.instance, context));
    varScope.addSVar("declare_tvar_0_0", new InteropSDefT(declare_tvar_0_0.instance, context));
    varScope.addSVar("declare_var_0_0", new InteropSDefT(declare_var_0_0.instance, context));
    varScope.addSVar("ppterm_0_0", new InteropSDefT(ppterm_0_0.instance, context));
    varScope.addSVar("declare_bodies_svar_0_0", new InteropSDefT(declare_bodies_svar_0_0.instance, context));
    varScope.addSVar("propose_completion_0_0", new InteropSDefT(propose_completion_0_0.instance, context));
    varScope.addSVar("filter_by_prefix_0_1", new InteropSDefT(filter_by_prefix_0_1.instance, context));
    varScope.addSVar("numbered_arguments_0_0", new InteropSDefT(numbered_arguments_0_0.instance, context));
    varScope.addSVar("signature_to_proposal_0_0", new InteropSDefT(signature_to_proposal_0_0.instance, context));
    varScope.addSVar("global_constraint_error_0_0", new InteropSDefT(global_constraint_error_0_0.instance, context));
    varScope.addSVar("constraint_error_0_0", new InteropSDefT(constraint_error_0_0.instance, context));
    varScope.addSVar("constraint_error_bad_build_0_0", new InteropSDefT(constraint_error_bad_build_0_0.instance, context));
    varScope.addSVar("constraint_error_bad_match_0_0", new InteropSDefT(constraint_error_bad_match_0_0.instance, context));
    varScope.addSVar("constraint_warning_0_0", new InteropSDefT(constraint_warning_0_0.instance, context));
    varScope.addSVar("get_assign_var_0_0", new InteropSDefT(get_assign_var_0_0.instance, context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(editor_analyze_0_0.instance, context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(editor_complete_0_0.instance, context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(editor_resolve_0_0.instance, context));
    varScope.addSVar("editor_hover_0_0", new InteropSDefT(editor_hover_0_0.instance, context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(generate_aterm_0_0.instance, context));
    varScope.addSVar("generate_desugared_aterm_0_0", new InteropSDefT(generate_desugared_aterm_0_0.instance, context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT($C$O$M$P$L$E$T$I$O$N_1_0.instance, context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT($N$O$C$O$N$T$E$X$T_1_0.instance, context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT($M$A$R$K$E$R_0_0.instance, context));
    varScope.addSVar("Entity_2_0", new InteropSDefT($Entity_2_0.instance, context));
    varScope.addSVar("Property_2_0", new InteropSDefT($Property_2_0.instance, context));
    varScope.addSVar("Type_1_0", new InteropSDefT($Type_1_0.instance, context));
    varScope.addSVar("FromBuild_1_0", new InteropSDefT($From$Build_1_0.instance, context));
    varScope.addSVar("innermost_scope_ProjectDir_1_0", new InteropSDefT(innermost_scope_$Project$Dir_1_0.instance, context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT($D$Y$N$A$M$I$C__$C$A$L$L$S_0_0.instance, context));
    varScope.addSVar("undefine_ProjectDir_0_1", new InteropSDefT(undefine_$Project$Dir_0_1.instance, context));
    varScope.addSVar("throw_ProjectDir_1_1", new InteropSDefT(throw_$Project$Dir_1_1.instance, context));
    varScope.addSVar("continue_to_label_ProjectDir_0_1", new InteropSDefT(continue_to_label_$Project$Dir_0_1.instance, context));
    varScope.addSVar("continue_ProjectDir_0_0", new InteropSDefT(continue_$Project$Dir_0_0.instance, context));
    varScope.addSVar("break_bp_ProjectDir_0_0", new InteropSDefT(break_bp_$Project$Dir_0_0.instance, context));
    varScope.addSVar("break_to_label_ProjectDir_0_1", new InteropSDefT(break_to_label_$Project$Dir_0_1.instance, context));
    varScope.addSVar("break_ProjectDir_0_0", new InteropSDefT(break_$Project$Dir_0_0.instance, context));
    varScope.addSVar("all_keys_ProjectDir_0_0", new InteropSDefT(all_keys_$Project$Dir_0_0.instance, context));
    varScope.addSVar("bigfold_ProjectDir_1_0", new InteropSDefT(bigfold_$Project$Dir_1_0.instance, context));
    varScope.addSVar("fold_ProjectDir_1_0", new InteropSDefT(fold_$Project$Dir_1_0.instance, context));
    varScope.addSVar("bigchain_ProjectDir_0_0", new InteropSDefT(bigchain_$Project$Dir_0_0.instance, context));
    varScope.addSVar("chain_ProjectDir_0_0", new InteropSDefT(chain_$Project$Dir_0_0.instance, context));
    varScope.addSVar("bigbagof_ProjectDir_0_0", new InteropSDefT(bigbagof_$Project$Dir_0_0.instance, context));
    varScope.addSVar("once_ProjectDir_0_0", new InteropSDefT(once_$Project$Dir_0_0.instance, context));
    varScope.addSVar("reverse_bagof_ProjectDir_1_0", new InteropSDefT(reverse_bagof_$Project$Dir_1_0.instance, context));
    varScope.addSVar("bagof_ProjectDir_0_0", new InteropSDefT(bagof_$Project$Dir_0_0.instance, context));
    varScope.addSVar("ProjectDir_0_0", new InteropSDefT($Project$Dir_0_0.instance, context));
    varScope.addSVar("aux_ProjectDir_0_1", new InteropSDefT(aux_$Project$Dir_0_1.instance, context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(innermost_scope_$Current$File_1_0.instance, context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(undefine_$Current$File_0_1.instance, context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(throw_$Current$File_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(continue_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(continue_$Current$File_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(break_bp_$Current$File_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(break_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(break_$Current$File_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(all_keys_$Current$File_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(bigfold_$Current$File_1_0.instance, context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(fold_$Current$File_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(bigchain_$Current$File_0_0.instance, context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(chain_$Current$File_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(bigbagof_$Current$File_0_0.instance, context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(once_$Current$File_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(reverse_bagof_$Current$File_1_0.instance, context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(bagof_$Current$File_0_0.instance, context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT($Current$File_0_0.instance, context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(aux_$Current$File_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(innermost_scope_$Is$Imported_1_0.instance, context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(undefine_$Is$Imported_0_1.instance, context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(throw_$Is$Imported_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(continue_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(continue_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(break_bp_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(break_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(break_$Is$Imported_0_0.instance, context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(all_keys_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(bigfold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(fold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(bigchain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(chain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(bigbagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(once_$Is$Imported_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(reverse_bagof_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(bagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT($Is$Imported_0_0.instance, context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(aux_$Is$Imported_0_2.instance, context));
    varScope.addSVar("innermost_scope_SourceDir_1_0", new InteropSDefT(innermost_scope_$Source$Dir_1_0.instance, context));
    varScope.addSVar("undefine_SourceDir_0_1", new InteropSDefT(undefine_$Source$Dir_0_1.instance, context));
    varScope.addSVar("throw_SourceDir_1_1", new InteropSDefT(throw_$Source$Dir_1_1.instance, context));
    varScope.addSVar("continue_to_label_SourceDir_0_1", new InteropSDefT(continue_to_label_$Source$Dir_0_1.instance, context));
    varScope.addSVar("continue_SourceDir_0_0", new InteropSDefT(continue_$Source$Dir_0_0.instance, context));
    varScope.addSVar("break_bp_SourceDir_0_0", new InteropSDefT(break_bp_$Source$Dir_0_0.instance, context));
    varScope.addSVar("break_to_label_SourceDir_0_1", new InteropSDefT(break_to_label_$Source$Dir_0_1.instance, context));
    varScope.addSVar("break_SourceDir_0_0", new InteropSDefT(break_$Source$Dir_0_0.instance, context));
    varScope.addSVar("all_keys_SourceDir_0_0", new InteropSDefT(all_keys_$Source$Dir_0_0.instance, context));
    varScope.addSVar("bigfold_SourceDir_1_0", new InteropSDefT(bigfold_$Source$Dir_1_0.instance, context));
    varScope.addSVar("fold_SourceDir_1_0", new InteropSDefT(fold_$Source$Dir_1_0.instance, context));
    varScope.addSVar("bigchain_SourceDir_0_0", new InteropSDefT(bigchain_$Source$Dir_0_0.instance, context));
    varScope.addSVar("chain_SourceDir_0_0", new InteropSDefT(chain_$Source$Dir_0_0.instance, context));
    varScope.addSVar("bigbagof_SourceDir_0_0", new InteropSDefT(bigbagof_$Source$Dir_0_0.instance, context));
    varScope.addSVar("once_SourceDir_0_0", new InteropSDefT(once_$Source$Dir_0_0.instance, context));
    varScope.addSVar("reverse_bagof_SourceDir_1_0", new InteropSDefT(reverse_bagof_$Source$Dir_1_0.instance, context));
    varScope.addSVar("bagof_SourceDir_0_0", new InteropSDefT(bagof_$Source$Dir_0_0.instance, context));
    varScope.addSVar("SourceDir_0_0", new InteropSDefT($Source$Dir_0_0.instance, context));
    varScope.addSVar("aux_SourceDir_0_1", new InteropSDefT(aux_$Source$Dir_0_1.instance, context));
    varScope.addSVar("innermost_scope_DecoratedAst_1_0", new InteropSDefT(innermost_scope_$Decorated$Ast_1_0.instance, context));
    varScope.addSVar("undefine_DecoratedAst_0_1", new InteropSDefT(undefine_$Decorated$Ast_0_1.instance, context));
    varScope.addSVar("throw_DecoratedAst_1_1", new InteropSDefT(throw_$Decorated$Ast_1_1.instance, context));
    varScope.addSVar("continue_to_label_DecoratedAst_0_1", new InteropSDefT(continue_to_label_$Decorated$Ast_0_1.instance, context));
    varScope.addSVar("continue_DecoratedAst_0_0", new InteropSDefT(continue_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("break_bp_DecoratedAst_0_0", new InteropSDefT(break_bp_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("break_to_label_DecoratedAst_0_1", new InteropSDefT(break_to_label_$Decorated$Ast_0_1.instance, context));
    varScope.addSVar("break_DecoratedAst_0_0", new InteropSDefT(break_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("all_keys_DecoratedAst_0_0", new InteropSDefT(all_keys_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("bigfold_DecoratedAst_1_0", new InteropSDefT(bigfold_$Decorated$Ast_1_0.instance, context));
    varScope.addSVar("fold_DecoratedAst_1_0", new InteropSDefT(fold_$Decorated$Ast_1_0.instance, context));
    varScope.addSVar("bigchain_DecoratedAst_0_0", new InteropSDefT(bigchain_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("chain_DecoratedAst_0_0", new InteropSDefT(chain_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("bigbagof_DecoratedAst_0_0", new InteropSDefT(bigbagof_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("once_DecoratedAst_0_0", new InteropSDefT(once_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("reverse_bagof_DecoratedAst_1_0", new InteropSDefT(reverse_bagof_$Decorated$Ast_1_0.instance, context));
    varScope.addSVar("bagof_DecoratedAst_0_0", new InteropSDefT(bagof_$Decorated$Ast_0_0.instance, context));
    varScope.addSVar("DecoratedAst_0_0", new InteropSDefT($Decorated$Ast_0_0.instance, context));
    varScope.addSVar("aux_DecoratedAst_0_1", new InteropSDefT(aux_$Decorated$Ast_0_1.instance, context));
    varScope.addSVar("innermost_scope_WarnAnalysis_1_0", new InteropSDefT(innermost_scope_$Warn$Analysis_1_0.instance, context));
    varScope.addSVar("undefine_WarnAnalysis_0_1", new InteropSDefT(undefine_$Warn$Analysis_0_1.instance, context));
    varScope.addSVar("throw_WarnAnalysis_1_1", new InteropSDefT(throw_$Warn$Analysis_1_1.instance, context));
    varScope.addSVar("continue_to_label_WarnAnalysis_0_1", new InteropSDefT(continue_to_label_$Warn$Analysis_0_1.instance, context));
    varScope.addSVar("continue_WarnAnalysis_0_0", new InteropSDefT(continue_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("break_bp_WarnAnalysis_0_0", new InteropSDefT(break_bp_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("break_to_label_WarnAnalysis_0_1", new InteropSDefT(break_to_label_$Warn$Analysis_0_1.instance, context));
    varScope.addSVar("break_WarnAnalysis_0_0", new InteropSDefT(break_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("all_keys_WarnAnalysis_0_0", new InteropSDefT(all_keys_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("bigfold_WarnAnalysis_1_0", new InteropSDefT(bigfold_$Warn$Analysis_1_0.instance, context));
    varScope.addSVar("fold_WarnAnalysis_1_0", new InteropSDefT(fold_$Warn$Analysis_1_0.instance, context));
    varScope.addSVar("bigchain_WarnAnalysis_0_0", new InteropSDefT(bigchain_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("chain_WarnAnalysis_0_0", new InteropSDefT(chain_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("bigbagof_WarnAnalysis_0_0", new InteropSDefT(bigbagof_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("once_WarnAnalysis_0_0", new InteropSDefT(once_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("reverse_bagof_WarnAnalysis_1_0", new InteropSDefT(reverse_bagof_$Warn$Analysis_1_0.instance, context));
    varScope.addSVar("bagof_WarnAnalysis_0_0", new InteropSDefT(bagof_$Warn$Analysis_0_0.instance, context));
    varScope.addSVar("WarnAnalysis_0_0", new InteropSDefT($Warn$Analysis_0_0.instance, context));
    varScope.addSVar("aux_WarnAnalysis_0_2", new InteropSDefT(aux_$Warn$Analysis_0_2.instance, context));
    varScope.addSVar("innermost_scope_NoAnalysis_1_0", new InteropSDefT(innermost_scope_$No$Analysis_1_0.instance, context));
    varScope.addSVar("undefine_NoAnalysis_0_1", new InteropSDefT(undefine_$No$Analysis_0_1.instance, context));
    varScope.addSVar("throw_NoAnalysis_1_1", new InteropSDefT(throw_$No$Analysis_1_1.instance, context));
    varScope.addSVar("continue_to_label_NoAnalysis_0_1", new InteropSDefT(continue_to_label_$No$Analysis_0_1.instance, context));
    varScope.addSVar("continue_NoAnalysis_0_0", new InteropSDefT(continue_$No$Analysis_0_0.instance, context));
    varScope.addSVar("break_bp_NoAnalysis_0_0", new InteropSDefT(break_bp_$No$Analysis_0_0.instance, context));
    varScope.addSVar("break_to_label_NoAnalysis_0_1", new InteropSDefT(break_to_label_$No$Analysis_0_1.instance, context));
    varScope.addSVar("break_NoAnalysis_0_0", new InteropSDefT(break_$No$Analysis_0_0.instance, context));
    varScope.addSVar("all_keys_NoAnalysis_0_0", new InteropSDefT(all_keys_$No$Analysis_0_0.instance, context));
    varScope.addSVar("bigfold_NoAnalysis_1_0", new InteropSDefT(bigfold_$No$Analysis_1_0.instance, context));
    varScope.addSVar("fold_NoAnalysis_1_0", new InteropSDefT(fold_$No$Analysis_1_0.instance, context));
    varScope.addSVar("bigchain_NoAnalysis_0_0", new InteropSDefT(bigchain_$No$Analysis_0_0.instance, context));
    varScope.addSVar("chain_NoAnalysis_0_0", new InteropSDefT(chain_$No$Analysis_0_0.instance, context));
    varScope.addSVar("bigbagof_NoAnalysis_0_0", new InteropSDefT(bigbagof_$No$Analysis_0_0.instance, context));
    varScope.addSVar("once_NoAnalysis_0_0", new InteropSDefT(once_$No$Analysis_0_0.instance, context));
    varScope.addSVar("reverse_bagof_NoAnalysis_1_0", new InteropSDefT(reverse_bagof_$No$Analysis_1_0.instance, context));
    varScope.addSVar("bagof_NoAnalysis_0_0", new InteropSDefT(bagof_$No$Analysis_0_0.instance, context));
    varScope.addSVar("NoAnalysis_0_0", new InteropSDefT($No$Analysis_0_0.instance, context));
    varScope.addSVar("aux_NoAnalysis_0_2", new InteropSDefT(aux_$No$Analysis_0_2.instance, context));
    varScope.addSVar("innermost_scope_CurrentDir_1_0", new InteropSDefT(innermost_scope_$Current$Dir_1_0.instance, context));
    varScope.addSVar("undefine_CurrentDir_0_1", new InteropSDefT(undefine_$Current$Dir_0_1.instance, context));
    varScope.addSVar("throw_CurrentDir_1_1", new InteropSDefT(throw_$Current$Dir_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentDir_0_1", new InteropSDefT(continue_to_label_$Current$Dir_0_1.instance, context));
    varScope.addSVar("continue_CurrentDir_0_0", new InteropSDefT(continue_$Current$Dir_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentDir_0_0", new InteropSDefT(break_bp_$Current$Dir_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentDir_0_1", new InteropSDefT(break_to_label_$Current$Dir_0_1.instance, context));
    varScope.addSVar("break_CurrentDir_0_0", new InteropSDefT(break_$Current$Dir_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentDir_0_0", new InteropSDefT(all_keys_$Current$Dir_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentDir_1_0", new InteropSDefT(bigfold_$Current$Dir_1_0.instance, context));
    varScope.addSVar("fold_CurrentDir_1_0", new InteropSDefT(fold_$Current$Dir_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentDir_0_0", new InteropSDefT(bigchain_$Current$Dir_0_0.instance, context));
    varScope.addSVar("chain_CurrentDir_0_0", new InteropSDefT(chain_$Current$Dir_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentDir_0_0", new InteropSDefT(bigbagof_$Current$Dir_0_0.instance, context));
    varScope.addSVar("once_CurrentDir_0_0", new InteropSDefT(once_$Current$Dir_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentDir_1_0", new InteropSDefT(reverse_bagof_$Current$Dir_1_0.instance, context));
    varScope.addSVar("bagof_CurrentDir_0_0", new InteropSDefT(bagof_$Current$Dir_0_0.instance, context));
    varScope.addSVar("CurrentDir_0_0", new InteropSDefT($Current$Dir_0_0.instance, context));
    varScope.addSVar("aux_CurrentDir_0_1", new InteropSDefT(aux_$Current$Dir_0_1.instance, context));
    varScope.addSVar("innermost_scope_Declaration_1_0", new InteropSDefT(innermost_scope_$Declaration_1_0.instance, context));
    varScope.addSVar("undefine_Declaration_0_1", new InteropSDefT(undefine_$Declaration_0_1.instance, context));
    varScope.addSVar("throw_Declaration_1_1", new InteropSDefT(throw_$Declaration_1_1.instance, context));
    varScope.addSVar("continue_to_label_Declaration_0_1", new InteropSDefT(continue_to_label_$Declaration_0_1.instance, context));
    varScope.addSVar("continue_Declaration_0_0", new InteropSDefT(continue_$Declaration_0_0.instance, context));
    varScope.addSVar("break_bp_Declaration_0_0", new InteropSDefT(break_bp_$Declaration_0_0.instance, context));
    varScope.addSVar("break_to_label_Declaration_0_1", new InteropSDefT(break_to_label_$Declaration_0_1.instance, context));
    varScope.addSVar("break_Declaration_0_0", new InteropSDefT(break_$Declaration_0_0.instance, context));
    varScope.addSVar("all_keys_Declaration_0_0", new InteropSDefT(all_keys_$Declaration_0_0.instance, context));
    varScope.addSVar("bigfold_Declaration_1_0", new InteropSDefT(bigfold_$Declaration_1_0.instance, context));
    varScope.addSVar("fold_Declaration_1_0", new InteropSDefT(fold_$Declaration_1_0.instance, context));
    varScope.addSVar("bigchain_Declaration_0_0", new InteropSDefT(bigchain_$Declaration_0_0.instance, context));
    varScope.addSVar("chain_Declaration_0_0", new InteropSDefT(chain_$Declaration_0_0.instance, context));
    varScope.addSVar("bigbagof_Declaration_0_0", new InteropSDefT(bigbagof_$Declaration_0_0.instance, context));
    varScope.addSVar("once_Declaration_0_0", new InteropSDefT(once_$Declaration_0_0.instance, context));
    varScope.addSVar("reverse_bagof_Declaration_1_0", new InteropSDefT(reverse_bagof_$Declaration_1_0.instance, context));
    varScope.addSVar("bagof_Declaration_0_0", new InteropSDefT(bagof_$Declaration_0_0.instance, context));
    varScope.addSVar("Declaration_0_0", new InteropSDefT($Declaration_0_0.instance, context));
    varScope.addSVar("aux_Declaration_0_2", new InteropSDefT(aux_$Declaration_0_2.instance, context));
    varScope.addSVar("innermost_scope_DeclareCookie_1_0", new InteropSDefT(innermost_scope_$Declare$Cookie_1_0.instance, context));
    varScope.addSVar("undefine_DeclareCookie_0_1", new InteropSDefT(undefine_$Declare$Cookie_0_1.instance, context));
    varScope.addSVar("throw_DeclareCookie_1_1", new InteropSDefT(throw_$Declare$Cookie_1_1.instance, context));
    varScope.addSVar("continue_to_label_DeclareCookie_0_1", new InteropSDefT(continue_to_label_$Declare$Cookie_0_1.instance, context));
    varScope.addSVar("continue_DeclareCookie_0_0", new InteropSDefT(continue_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("break_bp_DeclareCookie_0_0", new InteropSDefT(break_bp_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("break_to_label_DeclareCookie_0_1", new InteropSDefT(break_to_label_$Declare$Cookie_0_1.instance, context));
    varScope.addSVar("break_DeclareCookie_0_0", new InteropSDefT(break_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("all_keys_DeclareCookie_0_0", new InteropSDefT(all_keys_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("bigfold_DeclareCookie_1_0", new InteropSDefT(bigfold_$Declare$Cookie_1_0.instance, context));
    varScope.addSVar("fold_DeclareCookie_1_0", new InteropSDefT(fold_$Declare$Cookie_1_0.instance, context));
    varScope.addSVar("bigchain_DeclareCookie_0_0", new InteropSDefT(bigchain_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("chain_DeclareCookie_0_0", new InteropSDefT(chain_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("bigbagof_DeclareCookie_0_0", new InteropSDefT(bigbagof_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("once_DeclareCookie_0_0", new InteropSDefT(once_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("reverse_bagof_DeclareCookie_1_0", new InteropSDefT(reverse_bagof_$Declare$Cookie_1_0.instance, context));
    varScope.addSVar("bagof_DeclareCookie_0_0", new InteropSDefT(bagof_$Declare$Cookie_0_0.instance, context));
    varScope.addSVar("DeclareCookie_0_0", new InteropSDefT($Declare$Cookie_0_0.instance, context));
    varScope.addSVar("aux_DeclareCookie_0_2", new InteropSDefT(aux_$Declare$Cookie_0_2.instance, context));
    varScope.addSVar("innermost_scope_IsImportedFailed_1_0", new InteropSDefT(innermost_scope_$Is$Imported$Failed_1_0.instance, context));
    varScope.addSVar("undefine_IsImportedFailed_0_1", new InteropSDefT(undefine_$Is$Imported$Failed_0_1.instance, context));
    varScope.addSVar("throw_IsImportedFailed_1_1", new InteropSDefT(throw_$Is$Imported$Failed_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImportedFailed_0_1", new InteropSDefT(continue_to_label_$Is$Imported$Failed_0_1.instance, context));
    varScope.addSVar("continue_IsImportedFailed_0_0", new InteropSDefT(continue_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("break_bp_IsImportedFailed_0_0", new InteropSDefT(break_bp_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImportedFailed_0_1", new InteropSDefT(break_to_label_$Is$Imported$Failed_0_1.instance, context));
    varScope.addSVar("break_IsImportedFailed_0_0", new InteropSDefT(break_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("all_keys_IsImportedFailed_0_0", new InteropSDefT(all_keys_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("bigfold_IsImportedFailed_1_0", new InteropSDefT(bigfold_$Is$Imported$Failed_1_0.instance, context));
    varScope.addSVar("fold_IsImportedFailed_1_0", new InteropSDefT(fold_$Is$Imported$Failed_1_0.instance, context));
    varScope.addSVar("bigchain_IsImportedFailed_0_0", new InteropSDefT(bigchain_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("chain_IsImportedFailed_0_0", new InteropSDefT(chain_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImportedFailed_0_0", new InteropSDefT(bigbagof_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("once_IsImportedFailed_0_0", new InteropSDefT(once_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImportedFailed_1_0", new InteropSDefT(reverse_bagof_$Is$Imported$Failed_1_0.instance, context));
    varScope.addSVar("bagof_IsImportedFailed_0_0", new InteropSDefT(bagof_$Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("IsImportedFailed_0_0", new InteropSDefT($Is$Imported$Failed_0_0.instance, context));
    varScope.addSVar("aux_IsImportedFailed_0_2", new InteropSDefT(aux_$Is$Imported$Failed_0_2.instance, context));
    varScope.addSVar("innermost_scope_MemoizeIncludeProperties_1_0", new InteropSDefT(innermost_scope_$Memoize$Include$Properties_1_0.instance, context));
    varScope.addSVar("undefine_MemoizeIncludeProperties_0_1", new InteropSDefT(undefine_$Memoize$Include$Properties_0_1.instance, context));
    varScope.addSVar("throw_MemoizeIncludeProperties_1_1", new InteropSDefT(throw_$Memoize$Include$Properties_1_1.instance, context));
    varScope.addSVar("continue_to_label_MemoizeIncludeProperties_0_1", new InteropSDefT(continue_to_label_$Memoize$Include$Properties_0_1.instance, context));
    varScope.addSVar("continue_MemoizeIncludeProperties_0_0", new InteropSDefT(continue_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("break_bp_MemoizeIncludeProperties_0_0", new InteropSDefT(break_bp_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("break_to_label_MemoizeIncludeProperties_0_1", new InteropSDefT(break_to_label_$Memoize$Include$Properties_0_1.instance, context));
    varScope.addSVar("break_MemoizeIncludeProperties_0_0", new InteropSDefT(break_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("all_keys_MemoizeIncludeProperties_0_0", new InteropSDefT(all_keys_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("bigfold_MemoizeIncludeProperties_1_0", new InteropSDefT(bigfold_$Memoize$Include$Properties_1_0.instance, context));
    varScope.addSVar("fold_MemoizeIncludeProperties_1_0", new InteropSDefT(fold_$Memoize$Include$Properties_1_0.instance, context));
    varScope.addSVar("bigchain_MemoizeIncludeProperties_0_0", new InteropSDefT(bigchain_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("chain_MemoizeIncludeProperties_0_0", new InteropSDefT(chain_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("bigbagof_MemoizeIncludeProperties_0_0", new InteropSDefT(bigbagof_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("once_MemoizeIncludeProperties_0_0", new InteropSDefT(once_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("reverse_bagof_MemoizeIncludeProperties_1_0", new InteropSDefT(reverse_bagof_$Memoize$Include$Properties_1_0.instance, context));
    varScope.addSVar("bagof_MemoizeIncludeProperties_0_0", new InteropSDefT(bagof_$Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("MemoizeIncludeProperties_0_0", new InteropSDefT($Memoize$Include$Properties_0_0.instance, context));
    varScope.addSVar("aux_MemoizeIncludeProperties_0_2", new InteropSDefT(aux_$Memoize$Include$Properties_0_2.instance, context));
    varScope.addSVar("new_DeclareCookie_0_2", new InteropSDefT(new_$Declare$Cookie_0_2.instance, context));
    varScope.addSVar("innermost_scope_OuterCookie_1_0", new InteropSDefT(innermost_scope_$Outer$Cookie_1_0.instance, context));
    varScope.addSVar("undefine_OuterCookie_0_1", new InteropSDefT(undefine_$Outer$Cookie_0_1.instance, context));
    varScope.addSVar("throw_OuterCookie_1_1", new InteropSDefT(throw_$Outer$Cookie_1_1.instance, context));
    varScope.addSVar("continue_to_label_OuterCookie_0_1", new InteropSDefT(continue_to_label_$Outer$Cookie_0_1.instance, context));
    varScope.addSVar("continue_OuterCookie_0_0", new InteropSDefT(continue_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("break_bp_OuterCookie_0_0", new InteropSDefT(break_bp_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("break_to_label_OuterCookie_0_1", new InteropSDefT(break_to_label_$Outer$Cookie_0_1.instance, context));
    varScope.addSVar("break_OuterCookie_0_0", new InteropSDefT(break_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("all_keys_OuterCookie_0_0", new InteropSDefT(all_keys_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("bigfold_OuterCookie_1_0", new InteropSDefT(bigfold_$Outer$Cookie_1_0.instance, context));
    varScope.addSVar("fold_OuterCookie_1_0", new InteropSDefT(fold_$Outer$Cookie_1_0.instance, context));
    varScope.addSVar("bigchain_OuterCookie_0_0", new InteropSDefT(bigchain_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("chain_OuterCookie_0_0", new InteropSDefT(chain_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("bigbagof_OuterCookie_0_0", new InteropSDefT(bigbagof_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("once_OuterCookie_0_0", new InteropSDefT(once_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("reverse_bagof_OuterCookie_1_0", new InteropSDefT(reverse_bagof_$Outer$Cookie_1_0.instance, context));
    varScope.addSVar("bagof_OuterCookie_0_0", new InteropSDefT(bagof_$Outer$Cookie_0_0.instance, context));
    varScope.addSVar("OuterCookie_0_0", new InteropSDefT($Outer$Cookie_0_0.instance, context));
    varScope.addSVar("aux_OuterCookie_0_2", new InteropSDefT(aux_$Outer$Cookie_0_2.instance, context));
    varScope.addSVar("innermost_scope_ContentProposals_1_0", new InteropSDefT(innermost_scope_$Content$Proposals_1_0.instance, context));
    varScope.addSVar("undefine_ContentProposals_0_1", new InteropSDefT(undefine_$Content$Proposals_0_1.instance, context));
    varScope.addSVar("throw_ContentProposals_1_1", new InteropSDefT(throw_$Content$Proposals_1_1.instance, context));
    varScope.addSVar("continue_to_label_ContentProposals_0_1", new InteropSDefT(continue_to_label_$Content$Proposals_0_1.instance, context));
    varScope.addSVar("continue_ContentProposals_0_0", new InteropSDefT(continue_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("break_bp_ContentProposals_0_0", new InteropSDefT(break_bp_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("break_to_label_ContentProposals_0_1", new InteropSDefT(break_to_label_$Content$Proposals_0_1.instance, context));
    varScope.addSVar("break_ContentProposals_0_0", new InteropSDefT(break_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("all_keys_ContentProposals_0_0", new InteropSDefT(all_keys_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("bigfold_ContentProposals_1_0", new InteropSDefT(bigfold_$Content$Proposals_1_0.instance, context));
    varScope.addSVar("fold_ContentProposals_1_0", new InteropSDefT(fold_$Content$Proposals_1_0.instance, context));
    varScope.addSVar("bigchain_ContentProposals_0_0", new InteropSDefT(bigchain_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("chain_ContentProposals_0_0", new InteropSDefT(chain_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("bigbagof_ContentProposals_0_0", new InteropSDefT(bigbagof_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("once_ContentProposals_0_0", new InteropSDefT(once_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("reverse_bagof_ContentProposals_1_0", new InteropSDefT(reverse_bagof_$Content$Proposals_1_0.instance, context));
    varScope.addSVar("bagof_ContentProposals_0_0", new InteropSDefT(bagof_$Content$Proposals_0_0.instance, context));
    varScope.addSVar("ContentProposals_0_0", new InteropSDefT($Content$Proposals_0_0.instance, context));
    varScope.addSVar("aux_ContentProposals_0_1", new InteropSDefT(aux_$Content$Proposals_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsNoConflict_1_0", new InteropSDefT(innermost_scope_$Is$No$Conflict_1_0.instance, context));
    varScope.addSVar("undefine_IsNoConflict_0_1", new InteropSDefT(undefine_$Is$No$Conflict_0_1.instance, context));
    varScope.addSVar("throw_IsNoConflict_1_1", new InteropSDefT(throw_$Is$No$Conflict_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsNoConflict_0_1", new InteropSDefT(continue_to_label_$Is$No$Conflict_0_1.instance, context));
    varScope.addSVar("continue_IsNoConflict_0_0", new InteropSDefT(continue_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("break_bp_IsNoConflict_0_0", new InteropSDefT(break_bp_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("break_to_label_IsNoConflict_0_1", new InteropSDefT(break_to_label_$Is$No$Conflict_0_1.instance, context));
    varScope.addSVar("break_IsNoConflict_0_0", new InteropSDefT(break_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("all_keys_IsNoConflict_0_0", new InteropSDefT(all_keys_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("bigfold_IsNoConflict_1_0", new InteropSDefT(bigfold_$Is$No$Conflict_1_0.instance, context));
    varScope.addSVar("fold_IsNoConflict_1_0", new InteropSDefT(fold_$Is$No$Conflict_1_0.instance, context));
    varScope.addSVar("bigchain_IsNoConflict_0_0", new InteropSDefT(bigchain_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("chain_IsNoConflict_0_0", new InteropSDefT(chain_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("bigbagof_IsNoConflict_0_0", new InteropSDefT(bigbagof_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("once_IsNoConflict_0_0", new InteropSDefT(once_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsNoConflict_1_0", new InteropSDefT(reverse_bagof_$Is$No$Conflict_1_0.instance, context));
    varScope.addSVar("bagof_IsNoConflict_0_0", new InteropSDefT(bagof_$Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("IsNoConflict_0_0", new InteropSDefT($Is$No$Conflict_0_0.instance, context));
    varScope.addSVar("aux_IsNoConflict_0_2", new InteropSDefT(aux_$Is$No$Conflict_0_2.instance, context));
  }

  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("fetch_up_position_1_1", new InteropSDefT(classLoader, "trans.fetch_up_position_1_1", context));
    varScope.addSVar("fetch_up_with_position_1_1", new InteropSDefT(classLoader, "trans.fetch_up_with_position_1_1", context));
    varScope.addSVar("fetch_up_with_position_2_1", new InteropSDefT(classLoader, "trans.fetch_up_with_position_2_1", context));
    varScope.addSVar("fetch_down_1_0", new InteropSDefT(classLoader, "trans.fetch_down_1_0", context));
    varScope.addSVar("fetch_down_with_position_1_0", new InteropSDefT(classLoader, "trans.fetch_down_with_position_1_0", context));
    varScope.addSVar("annotated_terms_1_0", new InteropSDefT(classLoader, "trans.annotated_terms_1_0", context));
    varScope.addSVar("fetch_annotated_term_0_1", new InteropSDefT(classLoader, "trans.fetch_annotated_term_0_1", context));
    varScope.addSVar("fetch_by_origin_0_1", new InteropSDefT(classLoader, "trans.fetch_by_origin_0_1", context));
    varScope.addSVar("fetch_by_origin_1_1", new InteropSDefT(classLoader, "trans.fetch_by_origin_1_1", context));
    varScope.addSVar("remove_debug_refactoring_0_0", new InteropSDefT(classLoader, "trans.remove_debug_refactoring_0_0", context));
    varScope.addSVar("remove_debug_0_0", new InteropSDefT(classLoader, "trans.remove_debug_0_0", context));
    varScope.addSVar("is_debug_clause_0_0", new InteropSDefT(classLoader, "trans.is_debug_clause_0_0", context));
    varScope.addSVar("is_debug_call_0_0", new InteropSDefT(classLoader, "trans.is_debug_call_0_0", context));
    varScope.addSVar("extract_refactoring_0_0", new InteropSDefT(classLoader, "trans.extract_refactoring_0_0", context));
    varScope.addSVar("precondition_warning_1_0", new InteropSDefT(classLoader, "trans.precondition_warning_1_0", context));
    varScope.addSVar("mk_defs_for_extraction_0_0", new InteropSDefT(classLoader, "trans.mk_defs_for_extraction_0_0", context));
    varScope.addSVar("mk_defs_for_selection_in_chain_0_0", new InteropSDefT(classLoader, "trans.mk_defs_for_selection_in_chain_0_0", context));
    varScope.addSVar("mk_defs_for_selection_0_0", new InteropSDefT(classLoader, "trans.mk_defs_for_selection_0_0", context));
    varScope.addSVar("extract_1_3", new InteropSDefT(classLoader, "trans.extract_1_3", context));
    varScope.addSVar("elem_as_list_1_0", new InteropSDefT(classLoader, "trans.elem_as_list_1_0", context));
    varScope.addSVar("insert_at_position_0_2", new InteropSDefT(classLoader, "trans.insert_at_position_0_2", context));
    varScope.addSVar("insert_at_index_0_2", new InteropSDefT(classLoader, "trans.insert_at_index_0_2", context));
    varScope.addSVar("in_selected_fragment_0_0", new InteropSDefT(classLoader, "trans.in_selected_fragment_0_0", context));
    varScope.addSVar("origin_non_layout_tokens_0_0", new InteropSDefT(classLoader, "trans.origin_non_layout_tokens_0_0", context));
    varScope.addSVar("reorder_associativity_chain_0_0", new InteropSDefT(classLoader, "trans.reorder_associativity_chain_0_0", context));
    varScope.addSVar("reorder_right_associativity_chain_0_0", new InteropSDefT(classLoader, "trans.reorder_right_associativity_chain_0_0", context));
    varScope.addSVar("check_brackets_tail_term_0_0", new InteropSDefT(classLoader, "trans.check_brackets_tail_term_0_0", context));
    varScope.addSVar("break_right_associativity_chain_0_1", new InteropSDefT(classLoader, "trans.break_right_associativity_chain_0_1", context));
    varScope.addSVar("broken_child_in_right_associativity_chain_0_1", new InteropSDefT(classLoader, "trans.broken_child_in_right_associativity_chain_0_1", context));
    varScope.addSVar("is_unbound_svar_0_0", new InteropSDefT(classLoader, "trans.is_unbound_svar_0_0", context));
    varScope.addSVar("is_unbound_tvar_0_0", new InteropSDefT(classLoader, "trans.is_unbound_tvar_0_0", context));
    varScope.addSVar("svaruse_to_svardec_0_0", new InteropSDefT(classLoader, "trans.svaruse_to_svardec_0_0", context));
    varScope.addSVar("tvaruse_to_tvardec_0_0", new InteropSDefT(classLoader, "trans.tvaruse_to_tvardec_0_0", context));
    varScope.addSVar("inline_refactoring_0_0", new InteropSDefT(classLoader, "trans.inline_refactoring_0_0", context));
    varScope.addSVar("declaration_of_call_0_0", new InteropSDefT(classLoader, "trans.declaration_of_call_0_0", context));
    varScope.addSVar("errors_recursion_0_0", new InteropSDefT(classLoader, "trans.errors_recursion_0_0", context));
    varScope.addSVar("is_recursive_declaration_0_0", new InteropSDefT(classLoader, "trans.is_recursive_declaration_0_0", context));
    varScope.addSVar("warnings_multiple_declarations_0_0", new InteropSDefT(classLoader, "trans.warnings_multiple_declarations_0_0", context));
    varScope.addSVar("inline_0_0", new InteropSDefT(classLoader, "trans.inline_0_0", context));
    varScope.addSVar("inline_call_0_1", new InteropSDefT(classLoader, "trans.inline_call_0_1", context));
    varScope.addSVar("rule_to_lambda_rule_0_0", new InteropSDefT(classLoader, "trans.rule_to_lambda_rule_0_0", context));
    varScope.addSVar("scope_free_vars_0_0", new InteropSDefT(classLoader, "trans.scope_free_vars_0_0", context));
    varScope.addSVar("collect_vars_0_0", new InteropSDefT(classLoader, "trans.collect_vars_0_0", context));
    varScope.addSVar("collect_vars_scope_0_0", new InteropSDefT(classLoader, "trans.collect_vars_scope_0_0", context));
    varScope.addSVar("svardec_to_svaruse_0_0", new InteropSDefT(classLoader, "trans.svardec_to_svaruse_0_0", context));
    varScope.addSVar("tvardec_to_tvaruse_0_0", new InteropSDefT(classLoader, "trans.tvardec_to_tvaruse_0_0", context));
    varScope.addSVar("substitute_multiple_0_2", new InteropSDefT(classLoader, "trans.substitute_multiple_0_2", context));
    varScope.addSVar("substitute_single_0_2", new InteropSDefT(classLoader, "trans.substitute_single_0_2", context));
    varScope.addSVar("delete_elements_1_0", new InteropSDefT(classLoader, "trans.delete_elements_1_0", context));
    varScope.addSVar("rename_builder_0_0", new InteropSDefT(classLoader, "trans.rename_builder_0_0", context));
    varScope.addSVar("inline_builder_0_0", new InteropSDefT(classLoader, "trans.inline_builder_0_0", context));
    varScope.addSVar("extract_builder_0_0", new InteropSDefT(classLoader, "trans.extract_builder_0_0", context));
    varScope.addSVar("remove_debug_builder_0_0", new InteropSDefT(classLoader, "trans.remove_debug_builder_0_0", context));
    varScope.addSVar("process_refactoring_result_0_0", new InteropSDefT(classLoader, "trans.process_refactoring_result_0_0", context));
    varScope.addSVar("pp_builder_0_0", new InteropSDefT(classLoader, "trans.pp_builder_0_0", context));
    varScope.addSVar("test_builder_0_0", new InteropSDefT(classLoader, "trans.test_builder_0_0", context));
    varScope.addSVar("format_refactoring_0_0", new InteropSDefT(classLoader, "trans.format_refactoring_0_0", context));
    varScope.addSVar("collect_semantic_issues_0_0", new InteropSDefT(classLoader, "trans.collect_semantic_issues_0_0", context));
    varScope.addSVar("get_affected_stratego_asts_1_0", new InteropSDefT(classLoader, "trans.get_affected_stratego_asts_1_0", context));
    varScope.addSVar("get_cache_path_0_0", new InteropSDefT(classLoader, "trans.get_cache_path_0_0", context));
    varScope.addSVar("analyze_names_0_0", new InteropSDefT(classLoader, "trans.analyze_names_0_0", context));
    varScope.addSVar("ensure_imports_0_0", new InteropSDefT(classLoader, "trans.ensure_imports_0_0", context));
    varScope.addSVar("re_analyse_names_0_0", new InteropSDefT(classLoader, "trans.re_analyse_names_0_0", context));
    varScope.addSVar("analyze_names_in_asts_0_0", new InteropSDefT(classLoader, "trans.analyze_names_in_asts_0_0", context));
    varScope.addSVar("resugar_Let_0_0", new InteropSDefT(classLoader, "trans.resugar_$Let_0_0", context));
    varScope.addSVar("get_source_asts_0_2", new InteropSDefT(classLoader, "trans.get_source_asts_0_2", context));
    varScope.addSVar("get_source_asts_2_0", new InteropSDefT(classLoader, "trans.get_source_asts_2_0", context));
    varScope.addSVar("parse_source_files_0_0", new InteropSDefT(classLoader, "trans.parse_source_files_0_0", context));
    varScope.addSVar("get_source_files_0_2", new InteropSDefT(classLoader, "trans.get_source_files_0_2", context));
    varScope.addSVar("get_source_files_2_0", new InteropSDefT(classLoader, "trans.get_source_files_2_0", context));
    varScope.addSVar("check_extension_0_1", new InteropSDefT(classLoader, "trans.check_extension_0_1", context));
    varScope.addSVar("elem_of_0_1", new InteropSDefT(classLoader, "trans.elem_of_0_1", context));
    varScope.addSVar("is_spoofax_dir_0_0", new InteropSDefT(classLoader, "trans.is_spoofax_dir_0_0", context));
    varScope.addSVar("spoofax_dirs_0_0", new InteropSDefT(classLoader, "trans.spoofax_dirs_0_0", context));
    varScope.addSVar("get_affected_asts_4_0", new InteropSDefT(classLoader, "trans.get_affected_asts_4_0", context));
    varScope.addSVar("parse_affected_asts_2_0", new InteropSDefT(classLoader, "trans.parse_affected_asts_2_0", context));
    varScope.addSVar("parse_affected_ast_or_none_2_0", new InteropSDefT(classLoader, "trans.parse_affected_ast_or_none_2_0", context));
    varScope.addSVar("reject_ast_from_cache_2_0", new InteropSDefT(classLoader, "trans.reject_ast_from_cache_2_0", context));
    varScope.addSVar("reject_or_get_ast_from_parsing_1_0", new InteropSDefT(classLoader, "trans.reject_or_get_ast_from_parsing_1_0", context));
    varScope.addSVar("namebinding_error_messages_1_0", new InteropSDefT(classLoader, "trans.namebinding_error_messages_1_0", context));
    varScope.addSVar("collect_binding_violations_1_0", new InteropSDefT(classLoader, "trans.collect_binding_violations_1_0", context));
    varScope.addSVar("binding_violations_0_0", new InteropSDefT(classLoader, "trans.binding_violations_0_0", context));
    varScope.addSVar("binding_violations_0_2", new InteropSDefT(classLoader, "trans.binding_violations_0_2", context));
    varScope.addSVar("is_binding_violation_0_2", new InteropSDefT(classLoader, "trans.is_binding_violation_0_2", context));
    varScope.addSVar("mk_binding_violation_message_0_0", new InteropSDefT(classLoader, "trans.mk_binding_violation_message_0_0", context));
    varScope.addSVar("introduced_constraint_errors_1_0", new InteropSDefT(classLoader, "trans.introduced_constraint_errors_1_0", context));
    varScope.addSVar("apply_rename_refactoring_2_2", new InteropSDefT(classLoader, "trans.apply_rename_refactoring_2_2", context));
    varScope.addSVar("apply_rename_refactoring_2_1", new InteropSDefT(classLoader, "trans.apply_rename_refactoring_2_1", context));
    varScope.addSVar("apply_rename_0_1", new InteropSDefT(classLoader, "trans.apply_rename_0_1", context));
    varScope.addSVar("apply_rename_0_2", new InteropSDefT(classLoader, "trans.apply_rename_0_2", context));
    varScope.addSVar("is_endangered_name_0_1", new InteropSDefT(classLoader, "trans.is_endangered_name_0_1", context));
    varScope.addSVar("is_endangered_name_0_2", new InteropSDefT(classLoader, "trans.is_endangered_name_0_2", context));
    varScope.addSVar("get_changed_asts_0_0", new InteropSDefT(classLoader, "trans.get_changed_asts_0_0", context));
    varScope.addSVar("rename_refactoring_0_0", new InteropSDefT(classLoader, "trans.rename_refactoring_0_0", context));
    varScope.addSVar("get_dependend_renamings_0_0", new InteropSDefT(classLoader, "trans.get_dependend_renamings_0_0", context));
    varScope.addSVar("prefixes_dynrules_0_0", new InteropSDefT(classLoader, "trans.prefixes_dynrules_0_0", context));
    varScope.addSVar("get_asts_affected_by_renaming_0_0", new InteropSDefT(classLoader, "trans.get_asts_affected_by_renaming_0_0", context));
    varScope.addSVar("is_global_ref_0_0", new InteropSDefT(classLoader, "trans.is_global_ref_0_0", context));
    varScope.addSVar("external_declaration_errors_0_0", new InteropSDefT(classLoader, "trans.external_declaration_errors_0_0", context));
    varScope.addSVar("declared_in_generated_file_0_1", new InteropSDefT(classLoader, "trans.declared_in_generated_file_0_1", context));
    varScope.addSVar("declared_in_external_lib_0_0", new InteropSDefT(classLoader, "trans.declared_in_external_lib_0_0", context));
    varScope.addSVar("dirs_with_generated_files_0_0", new InteropSDefT(classLoader, "trans.dirs_with_generated_files_0_0", context));
    varScope.addSVar("is_editable_0_0", new InteropSDefT(classLoader, "trans.is_editable_0_0", context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(classLoader, "trans.parse_file_0_0", context));
    varScope.addSVar("parse_stratego__sugar_file_0_0", new InteropSDefT(classLoader, "trans.parse_stratego__sugar_file_0_0", context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(classLoader, "trans.parse_string_0_0", context));
    varScope.addSVar("parse_stratego__sugar_string_0_0", new InteropSDefT(classLoader, "trans.parse_stratego__sugar_string_0_0", context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(classLoader, "trans.parse_stream_0_0", context));
    varScope.addSVar("parse_stratego__sugar_stream_0_0", new InteropSDefT(classLoader, "trans.parse_stratego__sugar_stream_0_0", context));
    varScope.addSVar("pp_stratego__sugar_string_0_0", new InteropSDefT(classLoader, "trans.pp_stratego__sugar_string_0_0", context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(classLoader, "trans.open_import_3_0", context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(classLoader, "trans.open_wildcard_import_4_0", context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(classLoader, "trans.import_cache_path_0_0", context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(classLoader, "trans.project_path_0_0", context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(classLoader, "trans.plugin_path_0_0", context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(classLoader, "trans.candidate_sorts_0_0", context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(classLoader, "trans.is_newer_0_0", context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(classLoader, "trans.editor_init_0_0", context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(classLoader, "trans.refresh_workspace_file_0_0", context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(classLoader, "trans.string_starts_with_capital_0_0", context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(classLoader, "trans.origin_term_0_0", context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(classLoader, "trans.origin_text_0_0", context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(classLoader, "trans.origin_offset_0_0", context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(classLoader, "trans.origin_location_0_0", context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(classLoader, "trans.origin_line_0_0", context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(classLoader, "trans.origin_column_0_0", context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(classLoader, "trans.origin_strip_0_0", context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(classLoader, "trans.origin_equal_0_1", context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(classLoader, "trans.origin_surrounding_comments_0_0", context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(classLoader, "trans.origin_documentation_comment_0_0", context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(classLoader, "trans.documentation_comment_chars_0_0", context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(classLoader, "trans.origin_track_forced_1_0", context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(classLoader, "trans.desugar_position_1_1", context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(classLoader, "trans.at_position_1_1", context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(classLoader, "trans.position_of_term_1_0", context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(classLoader, "trans.position_of_term_1_1", context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(classLoader, "trans.term_at_position_0_1", context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(classLoader, "trans.parent_at_position_0_1", context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(classLoader, "trans.subterm_at_0_1", context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(classLoader, "trans.set_markers_0_1", context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(classLoader, "trans.queue_analysis_0_0", context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(classLoader, "trans.set_total_work_units_0_0", context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(classLoader, "trans.complete_work_unit_0_0", context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(classLoader, "trans.queue_strategy_0_2", context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(classLoader, "trans.set_analysis_backgrounded_0_0", context));
    varScope.addSVar("basic_desugar_top_0_0", new InteropSDefT(classLoader, "trans.basic_desugar_top_0_0", context));
    varScope.addSVar("basic_desugar_0_0", new InteropSDefT(classLoader, "trans.basic_desugar_0_0", context));
    varScope.addSVar("extract_meta_expr_escapes_0_0", new InteropSDefT(classLoader, "trans.extract_meta_expr_escapes_0_0", context));
    varScope.addSVar("get_source_base_dir_0_0", new InteropSDefT(classLoader, "trans.get_source_base_dir_0_0", context));
    varScope.addSVar("get_soure_base_dir_0_0", new InteropSDefT(classLoader, "trans.get_soure_base_dir_0_0", context));
    varScope.addSVar("explode_string_p__0_1", new InteropSDefT(classLoader, "trans.explode_string_p__0_1", context));
    varScope.addSVar("explode_string_0_1", new InteropSDefT(classLoader, "trans.explode_string_0_1", context));
    varScope.addSVar("implode_string_0_1", new InteropSDefT(classLoader, "trans.implode_string_0_1", context));
    varScope.addSVar("analyze_ast_0_0", new InteropSDefT(classLoader, "trans.analyze_ast_0_0", context));
    varScope.addSVar("analyze_ast_local_0_0", new InteropSDefT(classLoader, "trans.analyze_ast_local_0_0", context));
    varScope.addSVar("signature_of_0_0", new InteropSDefT(classLoader, "trans.signature_of_0_0", context));
    varScope.addSVar("remove_quote_0_0", new InteropSDefT(classLoader, "trans.remove_quote_0_0", context));
    varScope.addSVar("is_constructor_0_0", new InteropSDefT(classLoader, "trans.is_constructor_0_0", context));
    varScope.addSVar("is_congruence_signature_0_0", new InteropSDefT(classLoader, "trans.is_congruence_signature_0_0", context));
    varScope.addSVar("declare_cookie_of_0_0", new InteropSDefT(classLoader, "trans.declare_cookie_of_0_0", context));
    varScope.addSVar("declaration_of_0_0", new InteropSDefT(classLoader, "trans.declaration_of_0_0", context));
    varScope.addSVar("declare_definition_0_0", new InteropSDefT(classLoader, "trans.declare_definition_0_0", context));
    varScope.addSVar("redeclare_definition_0_0", new InteropSDefT(classLoader, "trans.redeclare_definition_0_0", context));
    varScope.addSVar("require_1_0", new InteropSDefT(classLoader, "trans.require_1_0", context));
    varScope.addSVar("is_declared_0_0", new InteropSDefT(classLoader, "trans.is_declared_0_0", context));
    varScope.addSVar("declare_globals_top_0_0", new InteropSDefT(classLoader, "trans.declare_globals_top_0_0", context));
    varScope.addSVar("declare_globals_0_0", new InteropSDefT(classLoader, "trans.declare_globals_0_0", context));
    varScope.addSVar("open_import_1_0", new InteropSDefT(classLoader, "trans.open_import_1_0", context));
    varScope.addSVar("resolve_import_decl_0_0", new InteropSDefT(classLoader, "trans.resolve_import_decl_0_0", context));
    varScope.addSVar("load_include_properties_0_0", new InteropSDefT(classLoader, "trans.load_include_properties_0_0", context));
    varScope.addSVar("load_include_paths_0_0", new InteropSDefT(classLoader, "trans.load_include_paths_0_0", context));
    varScope.addSVar("default_include_paths_0_0", new InteropSDefT(classLoader, "trans.default_include_paths_0_0", context));
    varScope.addSVar("expand_relative_path_0_0", new InteropSDefT(classLoader, "trans.expand_relative_path_0_0", context));
    varScope.addSVar("resolve_import_path_0_0", new InteropSDefT(classLoader, "trans.resolve_import_path_0_0", context));
    varScope.addSVar("read_stratego_signatures_0_0", new InteropSDefT(classLoader, "trans.read_stratego_signatures_0_0", context));
    varScope.addSVar("fetch_library_ast_0_0", new InteropSDefT(classLoader, "trans.fetch_library_ast_0_0", context));
    varScope.addSVar("to_signatures_0_0", new InteropSDefT(classLoader, "trans.to_signatures_0_0", context));
    varScope.addSVar("remove_stratego_bodies_0_0", new InteropSDefT(classLoader, "trans.remove_stratego_bodies_0_0", context));
    varScope.addSVar("declare_dynrule_0_0", new InteropSDefT(classLoader, "trans.declare_dynrule_0_0", context));
    varScope.addSVar("declare_dr_rule_0_4", new InteropSDefT(classLoader, "trans.declare_dr_rule_0_4", context));
    varScope.addSVar("dr_scope_declare_cookies_2_0", new InteropSDefT(classLoader, "trans.dr_scope_declare_cookies_2_0", context));
    varScope.addSVar("declare_bodies_top_0_0", new InteropSDefT(classLoader, "trans.declare_bodies_top_0_0", context));
    varScope.addSVar("declare_bodies_0_0", new InteropSDefT(classLoader, "trans.declare_bodies_0_0", context));
    varScope.addSVar("declare_let_definition_0_0", new InteropSDefT(classLoader, "trans.declare_let_definition_0_0", context));
    varScope.addSVar("scope_variables_1_0", new InteropSDefT(classLoader, "trans.scope_variables_1_0", context));
    varScope.addSVar("declare_match_0_0", new InteropSDefT(classLoader, "trans.declare_match_0_0", context));
    varScope.addSVar("declare_svar_0_0", new InteropSDefT(classLoader, "trans.declare_svar_0_0", context));
    varScope.addSVar("declare_svar_signatures_0_2", new InteropSDefT(classLoader, "trans.declare_svar_signatures_0_2", context));
    varScope.addSVar("declare_tvar_0_0", new InteropSDefT(classLoader, "trans.declare_tvar_0_0", context));
    varScope.addSVar("declare_var_0_0", new InteropSDefT(classLoader, "trans.declare_var_0_0", context));
    varScope.addSVar("ppterm_0_0", new InteropSDefT(classLoader, "trans.ppterm_0_0", context));
    varScope.addSVar("declare_bodies_svar_0_0", new InteropSDefT(classLoader, "trans.declare_bodies_svar_0_0", context));
    varScope.addSVar("propose_completion_0_0", new InteropSDefT(classLoader, "trans.propose_completion_0_0", context));
    varScope.addSVar("filter_by_prefix_0_1", new InteropSDefT(classLoader, "trans.filter_by_prefix_0_1", context));
    varScope.addSVar("numbered_arguments_0_0", new InteropSDefT(classLoader, "trans.numbered_arguments_0_0", context));
    varScope.addSVar("signature_to_proposal_0_0", new InteropSDefT(classLoader, "trans.signature_to_proposal_0_0", context));
    varScope.addSVar("global_constraint_error_0_0", new InteropSDefT(classLoader, "trans.global_constraint_error_0_0", context));
    varScope.addSVar("constraint_error_0_0", new InteropSDefT(classLoader, "trans.constraint_error_0_0", context));
    varScope.addSVar("constraint_error_bad_build_0_0", new InteropSDefT(classLoader, "trans.constraint_error_bad_build_0_0", context));
    varScope.addSVar("constraint_error_bad_match_0_0", new InteropSDefT(classLoader, "trans.constraint_error_bad_match_0_0", context));
    varScope.addSVar("constraint_warning_0_0", new InteropSDefT(classLoader, "trans.constraint_warning_0_0", context));
    varScope.addSVar("get_assign_var_0_0", new InteropSDefT(classLoader, "trans.get_assign_var_0_0", context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_analyze_0_0", context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(classLoader, "trans.editor_complete_0_0", context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(classLoader, "trans.editor_resolve_0_0", context));
    varScope.addSVar("editor_hover_0_0", new InteropSDefT(classLoader, "trans.editor_hover_0_0", context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(classLoader, "trans.generate_aterm_0_0", context));
    varScope.addSVar("generate_desugared_aterm_0_0", new InteropSDefT(classLoader, "trans.generate_desugared_aterm_0_0", context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT(classLoader, "trans.$C$O$M$P$L$E$T$I$O$N_1_0", context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT(classLoader, "trans.$N$O$C$O$N$T$E$X$T_1_0", context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT(classLoader, "trans.$M$A$R$K$E$R_0_0", context));
    varScope.addSVar("Entity_2_0", new InteropSDefT(classLoader, "trans.$Entity_2_0", context));
    varScope.addSVar("Property_2_0", new InteropSDefT(classLoader, "trans.$Property_2_0", context));
    varScope.addSVar("Type_1_0", new InteropSDefT(classLoader, "trans.$Type_1_0", context));
    varScope.addSVar("FromBuild_1_0", new InteropSDefT(classLoader, "trans.$From$Build_1_0", context));
    varScope.addSVar("innermost_scope_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Project$Dir_1_0", context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT(classLoader, "trans.$D$Y$N$A$M$I$C__$C$A$L$L$S_0_0", context));
    varScope.addSVar("undefine_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.undefine_$Project$Dir_0_1", context));
    varScope.addSVar("throw_ProjectDir_1_1", new InteropSDefT(classLoader, "trans.throw_$Project$Dir_1_1", context));
    varScope.addSVar("continue_to_label_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Project$Dir_0_1", context));
    varScope.addSVar("continue_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.continue_$Project$Dir_0_0", context));
    varScope.addSVar("break_bp_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Project$Dir_0_0", context));
    varScope.addSVar("break_to_label_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Project$Dir_0_1", context));
    varScope.addSVar("break_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.break_$Project$Dir_0_0", context));
    varScope.addSVar("all_keys_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Project$Dir_0_0", context));
    varScope.addSVar("bigfold_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Project$Dir_1_0", context));
    varScope.addSVar("fold_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.fold_$Project$Dir_1_0", context));
    varScope.addSVar("bigchain_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Project$Dir_0_0", context));
    varScope.addSVar("chain_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.chain_$Project$Dir_0_0", context));
    varScope.addSVar("bigbagof_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Project$Dir_0_0", context));
    varScope.addSVar("once_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.once_$Project$Dir_0_0", context));
    varScope.addSVar("reverse_bagof_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Project$Dir_1_0", context));
    varScope.addSVar("bagof_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.bagof_$Project$Dir_0_0", context));
    varScope.addSVar("ProjectDir_0_0", new InteropSDefT(classLoader, "trans.$Project$Dir_0_0", context));
    varScope.addSVar("aux_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.aux_$Project$Dir_0_1", context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$File_1_0", context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$File_0_1", context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$File_1_1", context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$File_0_1", context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$File_0_0", context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$File_0_0", context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$File_0_1", context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_$Current$File_0_0", context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$File_0_0", context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$File_1_0", context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$File_1_0", context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$File_0_0", context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$File_0_0", context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$File_0_0", context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.once_$Current$File_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$File_1_0", context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$File_0_0", context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT(classLoader, "trans.$Current$File_0_0", context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$File_0_1", context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Imported_1_0", context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Imported_0_1", context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Imported_1_1", context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Imported_0_0", context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Imported_0_0", context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Imported_0_0", context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Imported_0_0", context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Imported_1_0", context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Imported_1_0", context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Imported_0_0", context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Imported_0_0", context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Imported_0_0", context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Imported_0_0", context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Imported_1_0", context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Imported_0_0", context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT(classLoader, "trans.$Is$Imported_0_0", context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Imported_0_2", context));
    varScope.addSVar("innermost_scope_SourceDir_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Source$Dir_1_0", context));
    varScope.addSVar("undefine_SourceDir_0_1", new InteropSDefT(classLoader, "trans.undefine_$Source$Dir_0_1", context));
    varScope.addSVar("throw_SourceDir_1_1", new InteropSDefT(classLoader, "trans.throw_$Source$Dir_1_1", context));
    varScope.addSVar("continue_to_label_SourceDir_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Source$Dir_0_1", context));
    varScope.addSVar("continue_SourceDir_0_0", new InteropSDefT(classLoader, "trans.continue_$Source$Dir_0_0", context));
    varScope.addSVar("break_bp_SourceDir_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Source$Dir_0_0", context));
    varScope.addSVar("break_to_label_SourceDir_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Source$Dir_0_1", context));
    varScope.addSVar("break_SourceDir_0_0", new InteropSDefT(classLoader, "trans.break_$Source$Dir_0_0", context));
    varScope.addSVar("all_keys_SourceDir_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Source$Dir_0_0", context));
    varScope.addSVar("bigfold_SourceDir_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Source$Dir_1_0", context));
    varScope.addSVar("fold_SourceDir_1_0", new InteropSDefT(classLoader, "trans.fold_$Source$Dir_1_0", context));
    varScope.addSVar("bigchain_SourceDir_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Source$Dir_0_0", context));
    varScope.addSVar("chain_SourceDir_0_0", new InteropSDefT(classLoader, "trans.chain_$Source$Dir_0_0", context));
    varScope.addSVar("bigbagof_SourceDir_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Source$Dir_0_0", context));
    varScope.addSVar("once_SourceDir_0_0", new InteropSDefT(classLoader, "trans.once_$Source$Dir_0_0", context));
    varScope.addSVar("reverse_bagof_SourceDir_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Source$Dir_1_0", context));
    varScope.addSVar("bagof_SourceDir_0_0", new InteropSDefT(classLoader, "trans.bagof_$Source$Dir_0_0", context));
    varScope.addSVar("SourceDir_0_0", new InteropSDefT(classLoader, "trans.$Source$Dir_0_0", context));
    varScope.addSVar("aux_SourceDir_0_1", new InteropSDefT(classLoader, "trans.aux_$Source$Dir_0_1", context));
    varScope.addSVar("innermost_scope_DecoratedAst_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Decorated$Ast_1_0", context));
    varScope.addSVar("undefine_DecoratedAst_0_1", new InteropSDefT(classLoader, "trans.undefine_$Decorated$Ast_0_1", context));
    varScope.addSVar("throw_DecoratedAst_1_1", new InteropSDefT(classLoader, "trans.throw_$Decorated$Ast_1_1", context));
    varScope.addSVar("continue_to_label_DecoratedAst_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Decorated$Ast_0_1", context));
    varScope.addSVar("continue_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.continue_$Decorated$Ast_0_0", context));
    varScope.addSVar("break_bp_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Decorated$Ast_0_0", context));
    varScope.addSVar("break_to_label_DecoratedAst_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Decorated$Ast_0_1", context));
    varScope.addSVar("break_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.break_$Decorated$Ast_0_0", context));
    varScope.addSVar("all_keys_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Decorated$Ast_0_0", context));
    varScope.addSVar("bigfold_DecoratedAst_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Decorated$Ast_1_0", context));
    varScope.addSVar("fold_DecoratedAst_1_0", new InteropSDefT(classLoader, "trans.fold_$Decorated$Ast_1_0", context));
    varScope.addSVar("bigchain_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Decorated$Ast_0_0", context));
    varScope.addSVar("chain_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.chain_$Decorated$Ast_0_0", context));
    varScope.addSVar("bigbagof_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Decorated$Ast_0_0", context));
    varScope.addSVar("once_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.once_$Decorated$Ast_0_0", context));
    varScope.addSVar("reverse_bagof_DecoratedAst_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Decorated$Ast_1_0", context));
    varScope.addSVar("bagof_DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.bagof_$Decorated$Ast_0_0", context));
    varScope.addSVar("DecoratedAst_0_0", new InteropSDefT(classLoader, "trans.$Decorated$Ast_0_0", context));
    varScope.addSVar("aux_DecoratedAst_0_1", new InteropSDefT(classLoader, "trans.aux_$Decorated$Ast_0_1", context));
    varScope.addSVar("innermost_scope_WarnAnalysis_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Warn$Analysis_1_0", context));
    varScope.addSVar("undefine_WarnAnalysis_0_1", new InteropSDefT(classLoader, "trans.undefine_$Warn$Analysis_0_1", context));
    varScope.addSVar("throw_WarnAnalysis_1_1", new InteropSDefT(classLoader, "trans.throw_$Warn$Analysis_1_1", context));
    varScope.addSVar("continue_to_label_WarnAnalysis_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Warn$Analysis_0_1", context));
    varScope.addSVar("continue_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.continue_$Warn$Analysis_0_0", context));
    varScope.addSVar("break_bp_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Warn$Analysis_0_0", context));
    varScope.addSVar("break_to_label_WarnAnalysis_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Warn$Analysis_0_1", context));
    varScope.addSVar("break_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.break_$Warn$Analysis_0_0", context));
    varScope.addSVar("all_keys_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Warn$Analysis_0_0", context));
    varScope.addSVar("bigfold_WarnAnalysis_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Warn$Analysis_1_0", context));
    varScope.addSVar("fold_WarnAnalysis_1_0", new InteropSDefT(classLoader, "trans.fold_$Warn$Analysis_1_0", context));
    varScope.addSVar("bigchain_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Warn$Analysis_0_0", context));
    varScope.addSVar("chain_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.chain_$Warn$Analysis_0_0", context));
    varScope.addSVar("bigbagof_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Warn$Analysis_0_0", context));
    varScope.addSVar("once_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.once_$Warn$Analysis_0_0", context));
    varScope.addSVar("reverse_bagof_WarnAnalysis_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Warn$Analysis_1_0", context));
    varScope.addSVar("bagof_WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.bagof_$Warn$Analysis_0_0", context));
    varScope.addSVar("WarnAnalysis_0_0", new InteropSDefT(classLoader, "trans.$Warn$Analysis_0_0", context));
    varScope.addSVar("aux_WarnAnalysis_0_2", new InteropSDefT(classLoader, "trans.aux_$Warn$Analysis_0_2", context));
    varScope.addSVar("innermost_scope_NoAnalysis_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$No$Analysis_1_0", context));
    varScope.addSVar("undefine_NoAnalysis_0_1", new InteropSDefT(classLoader, "trans.undefine_$No$Analysis_0_1", context));
    varScope.addSVar("throw_NoAnalysis_1_1", new InteropSDefT(classLoader, "trans.throw_$No$Analysis_1_1", context));
    varScope.addSVar("continue_to_label_NoAnalysis_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$No$Analysis_0_1", context));
    varScope.addSVar("continue_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.continue_$No$Analysis_0_0", context));
    varScope.addSVar("break_bp_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.break_bp_$No$Analysis_0_0", context));
    varScope.addSVar("break_to_label_NoAnalysis_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$No$Analysis_0_1", context));
    varScope.addSVar("break_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.break_$No$Analysis_0_0", context));
    varScope.addSVar("all_keys_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.all_keys_$No$Analysis_0_0", context));
    varScope.addSVar("bigfold_NoAnalysis_1_0", new InteropSDefT(classLoader, "trans.bigfold_$No$Analysis_1_0", context));
    varScope.addSVar("fold_NoAnalysis_1_0", new InteropSDefT(classLoader, "trans.fold_$No$Analysis_1_0", context));
    varScope.addSVar("bigchain_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.bigchain_$No$Analysis_0_0", context));
    varScope.addSVar("chain_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.chain_$No$Analysis_0_0", context));
    varScope.addSVar("bigbagof_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$No$Analysis_0_0", context));
    varScope.addSVar("once_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.once_$No$Analysis_0_0", context));
    varScope.addSVar("reverse_bagof_NoAnalysis_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$No$Analysis_1_0", context));
    varScope.addSVar("bagof_NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.bagof_$No$Analysis_0_0", context));
    varScope.addSVar("NoAnalysis_0_0", new InteropSDefT(classLoader, "trans.$No$Analysis_0_0", context));
    varScope.addSVar("aux_NoAnalysis_0_2", new InteropSDefT(classLoader, "trans.aux_$No$Analysis_0_2", context));
    varScope.addSVar("innermost_scope_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$Dir_1_0", context));
    varScope.addSVar("undefine_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$Dir_0_1", context));
    varScope.addSVar("throw_CurrentDir_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$Dir_1_1", context));
    varScope.addSVar("continue_to_label_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$Dir_0_1", context));
    varScope.addSVar("continue_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$Dir_0_0", context));
    varScope.addSVar("break_bp_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$Dir_0_0", context));
    varScope.addSVar("break_to_label_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$Dir_0_1", context));
    varScope.addSVar("break_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.break_$Current$Dir_0_0", context));
    varScope.addSVar("all_keys_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$Dir_0_0", context));
    varScope.addSVar("bigfold_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$Dir_1_0", context));
    varScope.addSVar("fold_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$Dir_1_0", context));
    varScope.addSVar("bigchain_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$Dir_0_0", context));
    varScope.addSVar("chain_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$Dir_0_0", context));
    varScope.addSVar("bigbagof_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$Dir_0_0", context));
    varScope.addSVar("once_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.once_$Current$Dir_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$Dir_1_0", context));
    varScope.addSVar("bagof_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$Dir_0_0", context));
    varScope.addSVar("CurrentDir_0_0", new InteropSDefT(classLoader, "trans.$Current$Dir_0_0", context));
    varScope.addSVar("aux_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$Dir_0_1", context));
    varScope.addSVar("innermost_scope_Declaration_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Declaration_1_0", context));
    varScope.addSVar("undefine_Declaration_0_1", new InteropSDefT(classLoader, "trans.undefine_$Declaration_0_1", context));
    varScope.addSVar("throw_Declaration_1_1", new InteropSDefT(classLoader, "trans.throw_$Declaration_1_1", context));
    varScope.addSVar("continue_to_label_Declaration_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Declaration_0_1", context));
    varScope.addSVar("continue_Declaration_0_0", new InteropSDefT(classLoader, "trans.continue_$Declaration_0_0", context));
    varScope.addSVar("break_bp_Declaration_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Declaration_0_0", context));
    varScope.addSVar("break_to_label_Declaration_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Declaration_0_1", context));
    varScope.addSVar("break_Declaration_0_0", new InteropSDefT(classLoader, "trans.break_$Declaration_0_0", context));
    varScope.addSVar("all_keys_Declaration_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Declaration_0_0", context));
    varScope.addSVar("bigfold_Declaration_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Declaration_1_0", context));
    varScope.addSVar("fold_Declaration_1_0", new InteropSDefT(classLoader, "trans.fold_$Declaration_1_0", context));
    varScope.addSVar("bigchain_Declaration_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Declaration_0_0", context));
    varScope.addSVar("chain_Declaration_0_0", new InteropSDefT(classLoader, "trans.chain_$Declaration_0_0", context));
    varScope.addSVar("bigbagof_Declaration_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Declaration_0_0", context));
    varScope.addSVar("once_Declaration_0_0", new InteropSDefT(classLoader, "trans.once_$Declaration_0_0", context));
    varScope.addSVar("reverse_bagof_Declaration_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Declaration_1_0", context));
    varScope.addSVar("bagof_Declaration_0_0", new InteropSDefT(classLoader, "trans.bagof_$Declaration_0_0", context));
    varScope.addSVar("Declaration_0_0", new InteropSDefT(classLoader, "trans.$Declaration_0_0", context));
    varScope.addSVar("aux_Declaration_0_2", new InteropSDefT(classLoader, "trans.aux_$Declaration_0_2", context));
    varScope.addSVar("innermost_scope_DeclareCookie_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Declare$Cookie_1_0", context));
    varScope.addSVar("undefine_DeclareCookie_0_1", new InteropSDefT(classLoader, "trans.undefine_$Declare$Cookie_0_1", context));
    varScope.addSVar("throw_DeclareCookie_1_1", new InteropSDefT(classLoader, "trans.throw_$Declare$Cookie_1_1", context));
    varScope.addSVar("continue_to_label_DeclareCookie_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Declare$Cookie_0_1", context));
    varScope.addSVar("continue_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.continue_$Declare$Cookie_0_0", context));
    varScope.addSVar("break_bp_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Declare$Cookie_0_0", context));
    varScope.addSVar("break_to_label_DeclareCookie_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Declare$Cookie_0_1", context));
    varScope.addSVar("break_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.break_$Declare$Cookie_0_0", context));
    varScope.addSVar("all_keys_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Declare$Cookie_0_0", context));
    varScope.addSVar("bigfold_DeclareCookie_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Declare$Cookie_1_0", context));
    varScope.addSVar("fold_DeclareCookie_1_0", new InteropSDefT(classLoader, "trans.fold_$Declare$Cookie_1_0", context));
    varScope.addSVar("bigchain_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Declare$Cookie_0_0", context));
    varScope.addSVar("chain_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.chain_$Declare$Cookie_0_0", context));
    varScope.addSVar("bigbagof_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Declare$Cookie_0_0", context));
    varScope.addSVar("once_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.once_$Declare$Cookie_0_0", context));
    varScope.addSVar("reverse_bagof_DeclareCookie_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Declare$Cookie_1_0", context));
    varScope.addSVar("bagof_DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.bagof_$Declare$Cookie_0_0", context));
    varScope.addSVar("DeclareCookie_0_0", new InteropSDefT(classLoader, "trans.$Declare$Cookie_0_0", context));
    varScope.addSVar("aux_DeclareCookie_0_2", new InteropSDefT(classLoader, "trans.aux_$Declare$Cookie_0_2", context));
    varScope.addSVar("innermost_scope_IsImportedFailed_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Imported$Failed_1_0", context));
    varScope.addSVar("undefine_IsImportedFailed_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Imported$Failed_0_1", context));
    varScope.addSVar("throw_IsImportedFailed_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Imported$Failed_1_1", context));
    varScope.addSVar("continue_to_label_IsImportedFailed_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Imported$Failed_0_1", context));
    varScope.addSVar("continue_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("break_bp_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("break_to_label_IsImportedFailed_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Imported$Failed_0_1", context));
    varScope.addSVar("break_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("all_keys_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("bigfold_IsImportedFailed_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Imported$Failed_1_0", context));
    varScope.addSVar("fold_IsImportedFailed_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Imported$Failed_1_0", context));
    varScope.addSVar("bigchain_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("chain_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("bigbagof_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("once_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("reverse_bagof_IsImportedFailed_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Imported$Failed_1_0", context));
    varScope.addSVar("bagof_IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Imported$Failed_0_0", context));
    varScope.addSVar("IsImportedFailed_0_0", new InteropSDefT(classLoader, "trans.$Is$Imported$Failed_0_0", context));
    varScope.addSVar("aux_IsImportedFailed_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Imported$Failed_0_2", context));
    varScope.addSVar("innermost_scope_MemoizeIncludeProperties_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Memoize$Include$Properties_1_0", context));
    varScope.addSVar("undefine_MemoizeIncludeProperties_0_1", new InteropSDefT(classLoader, "trans.undefine_$Memoize$Include$Properties_0_1", context));
    varScope.addSVar("throw_MemoizeIncludeProperties_1_1", new InteropSDefT(classLoader, "trans.throw_$Memoize$Include$Properties_1_1", context));
    varScope.addSVar("continue_to_label_MemoizeIncludeProperties_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Memoize$Include$Properties_0_1", context));
    varScope.addSVar("continue_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.continue_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("break_bp_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("break_to_label_MemoizeIncludeProperties_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Memoize$Include$Properties_0_1", context));
    varScope.addSVar("break_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.break_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("all_keys_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("bigfold_MemoizeIncludeProperties_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Memoize$Include$Properties_1_0", context));
    varScope.addSVar("fold_MemoizeIncludeProperties_1_0", new InteropSDefT(classLoader, "trans.fold_$Memoize$Include$Properties_1_0", context));
    varScope.addSVar("bigchain_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("chain_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.chain_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("bigbagof_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("once_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.once_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("reverse_bagof_MemoizeIncludeProperties_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Memoize$Include$Properties_1_0", context));
    varScope.addSVar("bagof_MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.bagof_$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("MemoizeIncludeProperties_0_0", new InteropSDefT(classLoader, "trans.$Memoize$Include$Properties_0_0", context));
    varScope.addSVar("aux_MemoizeIncludeProperties_0_2", new InteropSDefT(classLoader, "trans.aux_$Memoize$Include$Properties_0_2", context));
    varScope.addSVar("new_DeclareCookie_0_2", new InteropSDefT(classLoader, "trans.new_$Declare$Cookie_0_2", context));
    varScope.addSVar("innermost_scope_OuterCookie_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Outer$Cookie_1_0", context));
    varScope.addSVar("undefine_OuterCookie_0_1", new InteropSDefT(classLoader, "trans.undefine_$Outer$Cookie_0_1", context));
    varScope.addSVar("throw_OuterCookie_1_1", new InteropSDefT(classLoader, "trans.throw_$Outer$Cookie_1_1", context));
    varScope.addSVar("continue_to_label_OuterCookie_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Outer$Cookie_0_1", context));
    varScope.addSVar("continue_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.continue_$Outer$Cookie_0_0", context));
    varScope.addSVar("break_bp_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Outer$Cookie_0_0", context));
    varScope.addSVar("break_to_label_OuterCookie_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Outer$Cookie_0_1", context));
    varScope.addSVar("break_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.break_$Outer$Cookie_0_0", context));
    varScope.addSVar("all_keys_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Outer$Cookie_0_0", context));
    varScope.addSVar("bigfold_OuterCookie_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Outer$Cookie_1_0", context));
    varScope.addSVar("fold_OuterCookie_1_0", new InteropSDefT(classLoader, "trans.fold_$Outer$Cookie_1_0", context));
    varScope.addSVar("bigchain_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Outer$Cookie_0_0", context));
    varScope.addSVar("chain_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.chain_$Outer$Cookie_0_0", context));
    varScope.addSVar("bigbagof_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Outer$Cookie_0_0", context));
    varScope.addSVar("once_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.once_$Outer$Cookie_0_0", context));
    varScope.addSVar("reverse_bagof_OuterCookie_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Outer$Cookie_1_0", context));
    varScope.addSVar("bagof_OuterCookie_0_0", new InteropSDefT(classLoader, "trans.bagof_$Outer$Cookie_0_0", context));
    varScope.addSVar("OuterCookie_0_0", new InteropSDefT(classLoader, "trans.$Outer$Cookie_0_0", context));
    varScope.addSVar("aux_OuterCookie_0_2", new InteropSDefT(classLoader, "trans.aux_$Outer$Cookie_0_2", context));
    varScope.addSVar("innermost_scope_ContentProposals_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Content$Proposals_1_0", context));
    varScope.addSVar("undefine_ContentProposals_0_1", new InteropSDefT(classLoader, "trans.undefine_$Content$Proposals_0_1", context));
    varScope.addSVar("throw_ContentProposals_1_1", new InteropSDefT(classLoader, "trans.throw_$Content$Proposals_1_1", context));
    varScope.addSVar("continue_to_label_ContentProposals_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Content$Proposals_0_1", context));
    varScope.addSVar("continue_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.continue_$Content$Proposals_0_0", context));
    varScope.addSVar("break_bp_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Content$Proposals_0_0", context));
    varScope.addSVar("break_to_label_ContentProposals_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Content$Proposals_0_1", context));
    varScope.addSVar("break_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.break_$Content$Proposals_0_0", context));
    varScope.addSVar("all_keys_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Content$Proposals_0_0", context));
    varScope.addSVar("bigfold_ContentProposals_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Content$Proposals_1_0", context));
    varScope.addSVar("fold_ContentProposals_1_0", new InteropSDefT(classLoader, "trans.fold_$Content$Proposals_1_0", context));
    varScope.addSVar("bigchain_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Content$Proposals_0_0", context));
    varScope.addSVar("chain_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.chain_$Content$Proposals_0_0", context));
    varScope.addSVar("bigbagof_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Content$Proposals_0_0", context));
    varScope.addSVar("once_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.once_$Content$Proposals_0_0", context));
    varScope.addSVar("reverse_bagof_ContentProposals_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Content$Proposals_1_0", context));
    varScope.addSVar("bagof_ContentProposals_0_0", new InteropSDefT(classLoader, "trans.bagof_$Content$Proposals_0_0", context));
    varScope.addSVar("ContentProposals_0_0", new InteropSDefT(classLoader, "trans.$Content$Proposals_0_0", context));
    varScope.addSVar("aux_ContentProposals_0_1", new InteropSDefT(classLoader, "trans.aux_$Content$Proposals_0_1", context));
    varScope.addSVar("innermost_scope_IsNoConflict_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$No$Conflict_1_0", context));
    varScope.addSVar("undefine_IsNoConflict_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$No$Conflict_0_1", context));
    varScope.addSVar("throw_IsNoConflict_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$No$Conflict_1_1", context));
    varScope.addSVar("continue_to_label_IsNoConflict_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$No$Conflict_0_1", context));
    varScope.addSVar("continue_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$No$Conflict_0_0", context));
    varScope.addSVar("break_bp_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$No$Conflict_0_0", context));
    varScope.addSVar("break_to_label_IsNoConflict_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$No$Conflict_0_1", context));
    varScope.addSVar("break_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.break_$Is$No$Conflict_0_0", context));
    varScope.addSVar("all_keys_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$No$Conflict_0_0", context));
    varScope.addSVar("bigfold_IsNoConflict_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$No$Conflict_1_0", context));
    varScope.addSVar("fold_IsNoConflict_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$No$Conflict_1_0", context));
    varScope.addSVar("bigchain_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$No$Conflict_0_0", context));
    varScope.addSVar("chain_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$No$Conflict_0_0", context));
    varScope.addSVar("bigbagof_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$No$Conflict_0_0", context));
    varScope.addSVar("once_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.once_$Is$No$Conflict_0_0", context));
    varScope.addSVar("reverse_bagof_IsNoConflict_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$No$Conflict_1_0", context));
    varScope.addSVar("bagof_IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$No$Conflict_0_0", context));
    varScope.addSVar("IsNoConflict_0_0", new InteropSDefT(classLoader, "trans.$Is$No$Conflict_0_0", context));
    varScope.addSVar("aux_IsNoConflict_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$No$Conflict_0_2", context));
  }
}