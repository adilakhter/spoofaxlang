module resolve 

imports 
	lib/editor-common.generated
	include/SpoofaxConfiguration 
	check

rules
	//Returns output directory for the code generation
	get-code-output-directory = collect-all(?OutputDirectory(<id>), union) ; ?[<id>]


	// Returns all the resolved directories 	
	get-all-includes  = 
 	<conc>(<get-all-sources(|<project-path>)> ,   <get-sources-from-external-projects>)
 	;make-set
 
 
	get-all-sources(|project-path) =
 		collect-all(?Source(_, _));
 		get-local-sources;
 		map(\(s,o)-> ($[[project-path]/[s]],o)\)
 	<+ 
		debug(!"Failed to get list of source directory.") ; fail
 
	get-local-sources: [] -> []
 
	get-local-sources: 
 	[Source(dir , include-option)|rest] -> result
 	with
 		![(dir,include-option)] => result';
 		<conc>(<get-local-sources>rest, result') => result	 	
 
 
rules 
 	
 	// Resolving project References 
	get-sources-from-external-projects = 
  	get-all-project-refernces; 
  	if  ?[_|_]  then
  		get-external-sources
		end
		
	// Returns all the external sournce collected from the project references 
 	get-external-sources: spx-projects* -> result
		where 
			not (?[])
	  	;!spx-projects* => [current-project-path|rest*]
	 	where
	 		if not(ref := <resolve-external-sources>current-project-path)  then
	 			 ref := []
	 		end
	 		;result := <conc>( ref , <get-external-sources>rest* )
	 	
	get-external-sources: []  -> []
	 
	 
	
	// Resolves External Project Refernces and returns the directories configured in that configuration file
	// Transitive imports/inclusion is not allowed. If a->b , b->c != a->c
	resolve-external-sources =
		 // not started wtih  ..
		?current-project-path;
  	where( 
  		not(<string-starts-with(|"..")>current-project-path) 
		);
  	fail-if-no-directory-found;
  	fail-if-no-config-found;   
  	<parse-spoofaxconfiguration-file>$[[current-project-path]/spx.config];
  	get-all-sources(|current-project-path)
	
	  	
	resolve-external-sources =
		?current-project-path;
  	where( 
  		<string-starts-with(|"..")>current-project-path 
		);
		where(
			current-dir := <getcwd>
		);
		(
	  		<fail-if-no-directory-found>current-project-path;
	  		<chdir> current-project-path;
	  		<fail-if-no-config-found><getcwd>; // verifies config file exisit in the current working directory
	  		<parse-spoofaxconfiguration-file;get-all-sources(|<getcwd>)>"spx.config" => result;
	  		<chdir>current-dir; 
	  		!result
	  	<+
	  		<chdir>current-dir  
		)

 
	get-all-project-refernces = 
  	collect-all(?SpxProjects(<id>), conc) ; 
  	flatten-list;
  	filter(?_{<id>};not(<eq>("" , <id>)))
  <+ 
  	debug(!"Failed to retrieve list of projects.");
  	fail 

rules 

	// Utility strategies  

	
	// verifies whether current directory exists 
	fail-if-no-directory-found  = is-dir-exist   <+ throw-directory-not-found-exception(fail) 
	
	// verfies whether there is a config file in the provided directory 
	fail-if-no-config-found = is-spx-config-exist   <+ throw-config-not-found-exception(fail)   
	
	throw-directory-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find the directory specified: ") ;post-processing-strategy
	
	throw-config-not-found-exception(post-processing-strategy) = debug(!"Configuration | Failed to find spx.config file in the directory specified: ") ;post-processing-strategy



rules
	
	normalize: ast -> <alltd(normalized-spxproject-reference)>ast 
		
	normalized-spxproject-reference: 
		SpxProjects(projectrefs*) -> SpxProjects(result) 
		with
			result := <map(annotate-project-location)>projectrefs*
			
			
	annotate-project-location : 
		projectname -> annotatedProjectName
		where 
			prim("LANG_get_all_projects_in_Workspace");
			filter( ?(projectname, _));
			if not(?[(_, projectlocation)]) then 
				projectlocation := ""
			end;
			annotatedProjectName := projectname{projectlocation}
				