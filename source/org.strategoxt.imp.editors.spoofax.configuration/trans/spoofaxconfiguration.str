module spoofaxconfiguration

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/SpoofaxConfiguration
  lib/editor-common.generated
  check
  resolve

rules // Main editor interface (defined by editor/SpoofaxConfiguration-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast, errors, warnings, notes)
    with
      editor-init;
      errors   := <collect-all(constraint-error, conc)> <normalize>ast;
      warnings := [];
      notes    := []
  
  
  get-full-paths:
    (selected, position, ast, path, project-path) -> (filename, result)
 		where 
 			filename := <guarantee-extension(|"config.fullpath")> path; 
 			result := <get-all-includes><normalize>selected
 			
       
 // Prints the abstract syntax ATerm of a selection.
 generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := <normalize>selected	// we just return the input term;
  		; get-templatelang-options
  		; debug 	
  
  get-templatelang-options
		= collect-all(?TemplateLang(<id>), conc) ;	flatten-list
	
        
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  // Only succeeds for nodes of the form Type(_) for which GetEntity is defined.
  editor-resolve:
    (node, position, ast, path, project-path) -> elem
    where 
    	<resolve> node => elem
    		 
    	
  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) ->[]
  

rules 
		
	resolve : str -> result
	where 
			(is-string <+ ?[<id>]); get-config-reference;parse-file => result
		<+ 
			!str => result 
		
	