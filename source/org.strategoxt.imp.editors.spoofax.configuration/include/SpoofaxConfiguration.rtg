
regular tree grammar
  start Start
  productions
    ListStarOfCodeGenDefinition0 -> ListPlusOfCodeGenDefinition0
    ListStarOfCodeGenDefinition0 -> <nil>()
    ListStarOfCodeGenDefinition0 -> <conc>(ListStarOfCodeGenDefinition0,ListStarOfCodeGenDefinition0)
    ListPlusOfCodeGenDefinition0 -> <conc>(ListStarOfCodeGenDefinition0,ListPlusOfCodeGenDefinition0)
    ListPlusOfCodeGenDefinition0 -> <conc>(ListPlusOfCodeGenDefinition0,ListStarOfCodeGenDefinition0)
    ListPlusOfCodeGenDefinition0 -> <conc>(ListPlusOfCodeGenDefinition0,ListPlusOfCodeGenDefinition0)
    ListPlusOfCodeGenDefinition0 -> <cons>(CodeGenDefinition,ListStarOfCodeGenDefinition0)
    ListStarOfDebugOption0       -> ListPlusOfDebugOption0
    ListStarOfDebugOption0       -> <nil>()
    ListStarOfDebugOption0       -> <conc>(ListStarOfDebugOption0,ListStarOfDebugOption0)
    ListPlusOfDebugOption0       -> <conc>(ListStarOfDebugOption0,ListPlusOfDebugOption0)
    ListPlusOfDebugOption0       -> <conc>(ListPlusOfDebugOption0,ListStarOfDebugOption0)
    ListPlusOfDebugOption0       -> <conc>(ListPlusOfDebugOption0,ListPlusOfDebugOption0)
    ListPlusOfDebugOption0       -> <cons>(DebugOption,ListStarOfDebugOption0)
    ListStarOfProjectName0       -> ListPlusOfProjectName0
    ListStarOfProjectName0       -> <nil>()
    ListStarOfProjectName0       -> <conc>(ListStarOfProjectName0,ListStarOfProjectName0)
    ListPlusOfProjectName0       -> <conc>(ListStarOfProjectName0,ListPlusOfProjectName0)
    ListPlusOfProjectName0       -> <conc>(ListPlusOfProjectName0,ListStarOfProjectName0)
    ListPlusOfProjectName0       -> <conc>(ListPlusOfProjectName0,ListPlusOfProjectName0)
    ListPlusOfProjectName0       -> <cons>(ProjectName,ListStarOfProjectName0)
    ListStarOfIncludeDefinition0 -> ListPlusOfIncludeDefinition0
    ListStarOfIncludeDefinition0 -> <nil>()
    ListStarOfIncludeDefinition0 -> <conc>(ListStarOfIncludeDefinition0,ListStarOfIncludeDefinition0)
    ListPlusOfIncludeDefinition0 -> <conc>(ListStarOfIncludeDefinition0,ListPlusOfIncludeDefinition0)
    ListPlusOfIncludeDefinition0 -> <conc>(ListPlusOfIncludeDefinition0,ListStarOfIncludeDefinition0)
    ListPlusOfIncludeDefinition0 -> <conc>(ListPlusOfIncludeDefinition0,ListPlusOfIncludeDefinition0)
    ListPlusOfIncludeDefinition0 -> <cons>(IncludeDefinition,ListStarOfIncludeDefinition0)
    ListStarOfConfigSection0     -> ListPlusOfConfigSection0
    ListStarOfConfigSection0     -> <nil>()
    ListStarOfConfigSection0     -> <conc>(ListStarOfConfigSection0,ListStarOfConfigSection0)
    ListPlusOfConfigSection0     -> <conc>(ListStarOfConfigSection0,ListPlusOfConfigSection0)
    ListPlusOfConfigSection0     -> <conc>(ListPlusOfConfigSection0,ListStarOfConfigSection0)
    ListPlusOfConfigSection0     -> <conc>(ListPlusOfConfigSection0,ListPlusOfConfigSection0)
    ListPlusOfConfigSection0     -> <cons>(ConfigSection,ListStarOfConfigSection0)
    PathChar_Slash0              -> <string>
    ListStarOfPathChar_Slash0    -> <string>
    ListPlusOfPathChar_Slash0    -> <string>
    ListStarOfStringChar0        -> <string>
    ListPlusOfStringChar0        -> <string>
    OptLit0                      -> <string>
    IncludeOption                -> ThisOnly()
    IncludeOption                -> All()
    STROutputMode                -> Jar()
    STROutputMode                -> CTree()
    CodeGenDefinition            -> STROutputMode(STROutputMode)
    CodeGenDefinition            -> OutputDirectory(RelativePath)
    ConfigSection                -> CodeGeneration(ListStarOfCodeGenDefinition0)
    DebugOption                  -> DebugNone()
    DebugOption                  -> DebugAll()
    DebugOption                  -> DebugSymbolTable()
    DebugOption                  -> DebugAnalysis()
    DebugOption                  -> DebugDeclaration()
    DebugOption                  -> DebugCompiler()
    TemplateLangOption           -> TemplatelangDisabled()
    TemplateLangOption           -> TemplatelangEnabled()
    ConfigSection                -> TemplateLang(TemplateLangOption)
    ConfigSection                -> Debug(ListStarOfDebugOption0)
    ConfigSection                -> SpxProjects(ListStarOfProjectName0)
    IncludeDefinition            -> Source(RelativePath,IncludeOption)
    ConfigSection                -> Includes(ListPlusOfIncludeDefinition0)
    Start                        -> Configuration(ListStarOfConfigSection0)
    Reserved                     -> <string>
    AbsolutePath                 -> <string>
    Slash                        -> <string>
    PathChar                     -> <string>
    RelativePath                 -> <string>
    ProjectName                  -> <string>
    EOF                          -> <string>
    CommentChar                  -> <string>
    BackSlashChar                -> <string>
    StringChar                   -> <string>
    STRING                       -> <string>
    INT                          -> <string>
    ID                           -> <string>
