package trans;

import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_sglr.*;
import org.strategoxt.stratego_gpp.*;
import org.strategoxt.stratego_xtc.*;
import org.strategoxt.stratego_aterm.*;
import org.strategoxt.java_front.*;
import org.strategoxt.imp.editors.spoofax.configuration.strategies.*;
import org.strategoxt.lang.*;
import org.spoofax.interpreter.terms.*;
import static org.strategoxt.lang.Term.*;
import org.spoofax.interpreter.library.AbstractPrimitive;
import java.util.ArrayList;
import java.lang.ref.WeakReference;

@SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
{ 
  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
  { 
    register(context, compiledContext, context.getVarScope());
  }

  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
  { 
    registerLazy(context, compiledContext, classLoader, context.getVarScope());
  }

  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("get_code_output_directory_0_0", new InteropSDefT(get_code_output_directory_0_0.instance, context));
    varScope.addSVar("get_all_includes_0_0", new InteropSDefT(get_all_includes_0_0.instance, context));
    varScope.addSVar("get_all_sources_0_1", new InteropSDefT(get_all_sources_0_1.instance, context));
    varScope.addSVar("get_local_sources_0_0", new InteropSDefT(get_local_sources_0_0.instance, context));
    varScope.addSVar("get_sources_from_external_projects_0_0", new InteropSDefT(get_sources_from_external_projects_0_0.instance, context));
    varScope.addSVar("get_external_sources_0_0", new InteropSDefT(get_external_sources_0_0.instance, context));
    varScope.addSVar("resolve_external_sources_0_0", new InteropSDefT(resolve_external_sources_0_0.instance, context));
    varScope.addSVar("get_all_project_refernces_0_0", new InteropSDefT(get_all_project_refernces_0_0.instance, context));
    varScope.addSVar("fail_if_no_directory_found_0_0", new InteropSDefT(fail_if_no_directory_found_0_0.instance, context));
    varScope.addSVar("fail_if_no_config_found_0_0", new InteropSDefT(fail_if_no_config_found_0_0.instance, context));
    varScope.addSVar("throw_directory_not_found_exception_1_0", new InteropSDefT(throw_directory_not_found_exception_1_0.instance, context));
    varScope.addSVar("throw_config_not_found_exception_1_0", new InteropSDefT(throw_config_not_found_exception_1_0.instance, context));
    varScope.addSVar("normalize_0_0", new InteropSDefT(normalize_0_0.instance, context));
    varScope.addSVar("normalized_spxproject_reference_0_0", new InteropSDefT(normalized_spxproject_reference_0_0.instance, context));
    varScope.addSVar("annotate_project_location_0_0", new InteropSDefT(annotate_project_location_0_0.instance, context));
    varScope.addSVar("constraint_error_0_0", new InteropSDefT(constraint_error_0_0.instance, context));
    varScope.addSVar("verify_local_directories_exists_0_0", new InteropSDefT(verify_local_directories_exists_0_0.instance, context));
    varScope.addSVar("verify_local_directory_exist_0_0", new InteropSDefT(verify_local_directory_exist_0_0.instance, context));
    varScope.addSVar("verify_project_references_0_0", new InteropSDefT(verify_project_references_0_0.instance, context));
    varScope.addSVar("verify_project_reference_0_0", new InteropSDefT(verify_project_reference_0_0.instance, context));
    varScope.addSVar("is_dir_exist_0_0", new InteropSDefT(is_dir_exist_0_0.instance, context));
    varScope.addSVar("is_spx_config_exist_0_0", new InteropSDefT(is_spx_config_exist_0_0.instance, context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(parse_file_0_0.instance, context));
    varScope.addSVar("parse_spoofaxconfiguration_file_0_0", new InteropSDefT(parse_spoofaxconfiguration_file_0_0.instance, context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(parse_string_0_0.instance, context));
    varScope.addSVar("parse_spoofaxconfiguration_string_0_0", new InteropSDefT(parse_spoofaxconfiguration_string_0_0.instance, context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(parse_stream_0_0.instance, context));
    varScope.addSVar("parse_spoofaxconfiguration_stream_0_0", new InteropSDefT(parse_spoofaxconfiguration_stream_0_0.instance, context));
    varScope.addSVar("pp_spoofaxconfiguration_string_0_0", new InteropSDefT(pp_spoofaxconfiguration_string_0_0.instance, context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(open_import_3_0.instance, context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(open_wildcard_import_4_0.instance, context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(import_cache_path_0_0.instance, context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(project_path_0_0.instance, context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(plugin_path_0_0.instance, context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(candidate_sorts_0_0.instance, context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(is_newer_0_0.instance, context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(editor_init_0_0.instance, context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(refresh_workspace_file_0_0.instance, context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(string_starts_with_capital_0_0.instance, context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(origin_term_0_0.instance, context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(origin_text_0_0.instance, context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(origin_offset_0_0.instance, context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(origin_location_0_0.instance, context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(origin_line_0_0.instance, context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(origin_column_0_0.instance, context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(origin_strip_0_0.instance, context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(origin_equal_0_1.instance, context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(origin_surrounding_comments_0_0.instance, context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(origin_documentation_comment_0_0.instance, context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(documentation_comment_chars_0_0.instance, context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(origin_track_forced_1_0.instance, context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(desugar_position_1_1.instance, context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(at_position_1_1.instance, context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(position_of_term_1_0.instance, context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(position_of_term_1_1.instance, context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(term_at_position_0_1.instance, context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(parent_at_position_0_1.instance, context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(subterm_at_0_1.instance, context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(set_markers_0_1.instance, context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(queue_analysis_0_0.instance, context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(set_total_work_units_0_0.instance, context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(complete_work_unit_0_0.instance, context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(queue_strategy_0_2.instance, context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(set_analysis_backgrounded_0_0.instance, context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(editor_analyze_0_0.instance, context));
    varScope.addSVar("get_full_paths_0_0", new InteropSDefT(get_full_paths_0_0.instance, context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(generate_aterm_0_0.instance, context));
    varScope.addSVar("get_templatelang_options_0_0", new InteropSDefT(get_templatelang_options_0_0.instance, context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(editor_resolve_0_0.instance, context));
    varScope.addSVar("editor_hover_0_0", new InteropSDefT(editor_hover_0_0.instance, context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(editor_complete_0_0.instance, context));
    varScope.addSVar("resolve_0_0", new InteropSDefT(resolve_0_0.instance, context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT($C$O$M$P$L$E$T$I$O$N_1_0.instance, context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT($N$O$C$O$N$T$E$X$T_1_0.instance, context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT($M$A$R$K$E$R_0_0.instance, context));
    varScope.addSVar("Module_2_0", new InteropSDefT($Module_2_0.instance, context));
    varScope.addSVar("Entity_2_0", new InteropSDefT($Entity_2_0.instance, context));
    varScope.addSVar("Property_2_0", new InteropSDefT($Property_2_0.instance, context));
    varScope.addSVar("Type_1_0", new InteropSDefT($Type_1_0.instance, context));
    varScope.addSVar("ThisOnly_0_0", new InteropSDefT($This$Only_0_0.instance, context));
    varScope.addSVar("All_0_0", new InteropSDefT($All_0_0.instance, context));
    varScope.addSVar("Jar_0_0", new InteropSDefT($Jar_0_0.instance, context));
    varScope.addSVar("CTree_0_0", new InteropSDefT($C$Tree_0_0.instance, context));
    varScope.addSVar("STROutputMode_1_0", new InteropSDefT($S$T$R$Output$Mode_1_0.instance, context));
    varScope.addSVar("OutputDirectory_1_0", new InteropSDefT($Output$Directory_1_0.instance, context));
    varScope.addSVar("DebugNone_0_0", new InteropSDefT($Debug$None_0_0.instance, context));
    varScope.addSVar("DebugAll_0_0", new InteropSDefT($Debug$All_0_0.instance, context));
    varScope.addSVar("DebugSymbolTable_0_0", new InteropSDefT($Debug$Symbol$Table_0_0.instance, context));
    varScope.addSVar("DebugAnalysis_0_0", new InteropSDefT($Debug$Analysis_0_0.instance, context));
    varScope.addSVar("DebugDeclaration_0_0", new InteropSDefT($Debug$Declaration_0_0.instance, context));
    varScope.addSVar("DebugCompiler_0_0", new InteropSDefT($Debug$Compiler_0_0.instance, context));
    varScope.addSVar("TemplatelangDisabled_0_0", new InteropSDefT($Templatelang$Disabled_0_0.instance, context));
    varScope.addSVar("TemplatelangEnabled_0_0", new InteropSDefT($Templatelang$Enabled_0_0.instance, context));
    varScope.addSVar("Source_2_0", new InteropSDefT($Source_2_0.instance, context));
    varScope.addSVar("CodeGeneration_1_0", new InteropSDefT($Code$Generation_1_0.instance, context));
    varScope.addSVar("TemplateLang_1_0", new InteropSDefT($Template$Lang_1_0.instance, context));
    varScope.addSVar("Debug_1_0", new InteropSDefT($Debug_1_0.instance, context));
    varScope.addSVar("SpxProjects_1_0", new InteropSDefT($Spx$Projects_1_0.instance, context));
    varScope.addSVar("Includes_1_0", new InteropSDefT($Includes_1_0.instance, context));
    varScope.addSVar("Configuration_1_0", new InteropSDefT($Configuration_1_0.instance, context));
    varScope.addSVar("innermost_scope_get_config_reference_1_0", new InteropSDefT(innermost_scope_get_config_reference_1_0.instance, context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT($D$Y$N$A$M$I$C__$C$A$L$L$S_0_0.instance, context));
    varScope.addSVar("undefine_get_config_reference_0_1", new InteropSDefT(undefine_get_config_reference_0_1.instance, context));
    varScope.addSVar("throw_get_config_reference_1_1", new InteropSDefT(throw_get_config_reference_1_1.instance, context));
    varScope.addSVar("continue_to_label_get_config_reference_0_1", new InteropSDefT(continue_to_label_get_config_reference_0_1.instance, context));
    varScope.addSVar("continue_get_config_reference_0_0", new InteropSDefT(continue_get_config_reference_0_0.instance, context));
    varScope.addSVar("break_bp_get_config_reference_0_0", new InteropSDefT(break_bp_get_config_reference_0_0.instance, context));
    varScope.addSVar("break_to_label_get_config_reference_0_1", new InteropSDefT(break_to_label_get_config_reference_0_1.instance, context));
    varScope.addSVar("break_get_config_reference_0_0", new InteropSDefT(break_get_config_reference_0_0.instance, context));
    varScope.addSVar("all_keys_get_config_reference_0_0", new InteropSDefT(all_keys_get_config_reference_0_0.instance, context));
    varScope.addSVar("bigfold_get_config_reference_1_0", new InteropSDefT(bigfold_get_config_reference_1_0.instance, context));
    varScope.addSVar("fold_get_config_reference_1_0", new InteropSDefT(fold_get_config_reference_1_0.instance, context));
    varScope.addSVar("bigchain_get_config_reference_0_0", new InteropSDefT(bigchain_get_config_reference_0_0.instance, context));
    varScope.addSVar("chain_get_config_reference_0_0", new InteropSDefT(chain_get_config_reference_0_0.instance, context));
    varScope.addSVar("bigbagof_get_config_reference_0_0", new InteropSDefT(bigbagof_get_config_reference_0_0.instance, context));
    varScope.addSVar("once_get_config_reference_0_0", new InteropSDefT(once_get_config_reference_0_0.instance, context));
    varScope.addSVar("reverse_bagof_get_config_reference_1_0", new InteropSDefT(reverse_bagof_get_config_reference_1_0.instance, context));
    varScope.addSVar("bagof_get_config_reference_0_0", new InteropSDefT(bagof_get_config_reference_0_0.instance, context));
    varScope.addSVar("get_config_reference_0_0", new InteropSDefT(get_config_reference_0_0.instance, context));
    varScope.addSVar("aux_get_config_reference_0_2", new InteropSDefT(aux_get_config_reference_0_2.instance, context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(innermost_scope_$Current$File_1_0.instance, context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(undefine_$Current$File_0_1.instance, context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(throw_$Current$File_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(continue_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(continue_$Current$File_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(break_bp_$Current$File_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(break_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(break_$Current$File_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(all_keys_$Current$File_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(bigfold_$Current$File_1_0.instance, context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(fold_$Current$File_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(bigchain_$Current$File_0_0.instance, context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(chain_$Current$File_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(bigbagof_$Current$File_0_0.instance, context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(once_$Current$File_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(reverse_bagof_$Current$File_1_0.instance, context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(bagof_$Current$File_0_0.instance, context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT($Current$File_0_0.instance, context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(aux_$Current$File_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(innermost_scope_$Is$Imported_1_0.instance, context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(undefine_$Is$Imported_0_1.instance, context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(throw_$Is$Imported_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(continue_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(continue_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(break_bp_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(break_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(break_$Is$Imported_0_0.instance, context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(all_keys_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(bigfold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(fold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(bigchain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(chain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(bigbagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(once_$Is$Imported_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(reverse_bagof_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(bagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT($Is$Imported_0_0.instance, context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(aux_$Is$Imported_0_2.instance, context));
  }

  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("get_code_output_directory_0_0", new InteropSDefT(classLoader, "trans.get_code_output_directory_0_0", context));
    varScope.addSVar("get_all_includes_0_0", new InteropSDefT(classLoader, "trans.get_all_includes_0_0", context));
    varScope.addSVar("get_all_sources_0_1", new InteropSDefT(classLoader, "trans.get_all_sources_0_1", context));
    varScope.addSVar("get_local_sources_0_0", new InteropSDefT(classLoader, "trans.get_local_sources_0_0", context));
    varScope.addSVar("get_sources_from_external_projects_0_0", new InteropSDefT(classLoader, "trans.get_sources_from_external_projects_0_0", context));
    varScope.addSVar("get_external_sources_0_0", new InteropSDefT(classLoader, "trans.get_external_sources_0_0", context));
    varScope.addSVar("resolve_external_sources_0_0", new InteropSDefT(classLoader, "trans.resolve_external_sources_0_0", context));
    varScope.addSVar("get_all_project_refernces_0_0", new InteropSDefT(classLoader, "trans.get_all_project_refernces_0_0", context));
    varScope.addSVar("fail_if_no_directory_found_0_0", new InteropSDefT(classLoader, "trans.fail_if_no_directory_found_0_0", context));
    varScope.addSVar("fail_if_no_config_found_0_0", new InteropSDefT(classLoader, "trans.fail_if_no_config_found_0_0", context));
    varScope.addSVar("throw_directory_not_found_exception_1_0", new InteropSDefT(classLoader, "trans.throw_directory_not_found_exception_1_0", context));
    varScope.addSVar("throw_config_not_found_exception_1_0", new InteropSDefT(classLoader, "trans.throw_config_not_found_exception_1_0", context));
    varScope.addSVar("normalize_0_0", new InteropSDefT(classLoader, "trans.normalize_0_0", context));
    varScope.addSVar("normalized_spxproject_reference_0_0", new InteropSDefT(classLoader, "trans.normalized_spxproject_reference_0_0", context));
    varScope.addSVar("annotate_project_location_0_0", new InteropSDefT(classLoader, "trans.annotate_project_location_0_0", context));
    varScope.addSVar("constraint_error_0_0", new InteropSDefT(classLoader, "trans.constraint_error_0_0", context));
    varScope.addSVar("verify_local_directories_exists_0_0", new InteropSDefT(classLoader, "trans.verify_local_directories_exists_0_0", context));
    varScope.addSVar("verify_local_directory_exist_0_0", new InteropSDefT(classLoader, "trans.verify_local_directory_exist_0_0", context));
    varScope.addSVar("verify_project_references_0_0", new InteropSDefT(classLoader, "trans.verify_project_references_0_0", context));
    varScope.addSVar("verify_project_reference_0_0", new InteropSDefT(classLoader, "trans.verify_project_reference_0_0", context));
    varScope.addSVar("is_dir_exist_0_0", new InteropSDefT(classLoader, "trans.is_dir_exist_0_0", context));
    varScope.addSVar("is_spx_config_exist_0_0", new InteropSDefT(classLoader, "trans.is_spx_config_exist_0_0", context));
    varScope.addSVar("parse_file_0_0", new InteropSDefT(classLoader, "trans.parse_file_0_0", context));
    varScope.addSVar("parse_spoofaxconfiguration_file_0_0", new InteropSDefT(classLoader, "trans.parse_spoofaxconfiguration_file_0_0", context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(classLoader, "trans.parse_string_0_0", context));
    varScope.addSVar("parse_spoofaxconfiguration_string_0_0", new InteropSDefT(classLoader, "trans.parse_spoofaxconfiguration_string_0_0", context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(classLoader, "trans.parse_stream_0_0", context));
    varScope.addSVar("parse_spoofaxconfiguration_stream_0_0", new InteropSDefT(classLoader, "trans.parse_spoofaxconfiguration_stream_0_0", context));
    varScope.addSVar("pp_spoofaxconfiguration_string_0_0", new InteropSDefT(classLoader, "trans.pp_spoofaxconfiguration_string_0_0", context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(classLoader, "trans.open_import_3_0", context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(classLoader, "trans.open_wildcard_import_4_0", context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(classLoader, "trans.import_cache_path_0_0", context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(classLoader, "trans.project_path_0_0", context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(classLoader, "trans.plugin_path_0_0", context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(classLoader, "trans.candidate_sorts_0_0", context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(classLoader, "trans.is_newer_0_0", context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(classLoader, "trans.editor_init_0_0", context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(classLoader, "trans.refresh_workspace_file_0_0", context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(classLoader, "trans.string_starts_with_capital_0_0", context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(classLoader, "trans.origin_term_0_0", context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(classLoader, "trans.origin_text_0_0", context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(classLoader, "trans.origin_offset_0_0", context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(classLoader, "trans.origin_location_0_0", context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(classLoader, "trans.origin_line_0_0", context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(classLoader, "trans.origin_column_0_0", context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(classLoader, "trans.origin_strip_0_0", context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(classLoader, "trans.origin_equal_0_1", context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(classLoader, "trans.origin_surrounding_comments_0_0", context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(classLoader, "trans.origin_documentation_comment_0_0", context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(classLoader, "trans.documentation_comment_chars_0_0", context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(classLoader, "trans.origin_track_forced_1_0", context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(classLoader, "trans.desugar_position_1_1", context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(classLoader, "trans.at_position_1_1", context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(classLoader, "trans.position_of_term_1_0", context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(classLoader, "trans.position_of_term_1_1", context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(classLoader, "trans.term_at_position_0_1", context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(classLoader, "trans.parent_at_position_0_1", context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(classLoader, "trans.subterm_at_0_1", context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(classLoader, "trans.set_markers_0_1", context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(classLoader, "trans.queue_analysis_0_0", context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(classLoader, "trans.set_total_work_units_0_0", context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(classLoader, "trans.complete_work_unit_0_0", context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(classLoader, "trans.queue_strategy_0_2", context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(classLoader, "trans.set_analysis_backgrounded_0_0", context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_analyze_0_0", context));
    varScope.addSVar("get_full_paths_0_0", new InteropSDefT(classLoader, "trans.get_full_paths_0_0", context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(classLoader, "trans.generate_aterm_0_0", context));
    varScope.addSVar("get_templatelang_options_0_0", new InteropSDefT(classLoader, "trans.get_templatelang_options_0_0", context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(classLoader, "trans.editor_resolve_0_0", context));
    varScope.addSVar("editor_hover_0_0", new InteropSDefT(classLoader, "trans.editor_hover_0_0", context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(classLoader, "trans.editor_complete_0_0", context));
    varScope.addSVar("resolve_0_0", new InteropSDefT(classLoader, "trans.resolve_0_0", context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT(classLoader, "trans.$C$O$M$P$L$E$T$I$O$N_1_0", context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT(classLoader, "trans.$N$O$C$O$N$T$E$X$T_1_0", context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT(classLoader, "trans.$M$A$R$K$E$R_0_0", context));
    varScope.addSVar("Module_2_0", new InteropSDefT(classLoader, "trans.$Module_2_0", context));
    varScope.addSVar("Entity_2_0", new InteropSDefT(classLoader, "trans.$Entity_2_0", context));
    varScope.addSVar("Property_2_0", new InteropSDefT(classLoader, "trans.$Property_2_0", context));
    varScope.addSVar("Type_1_0", new InteropSDefT(classLoader, "trans.$Type_1_0", context));
    varScope.addSVar("ThisOnly_0_0", new InteropSDefT(classLoader, "trans.$This$Only_0_0", context));
    varScope.addSVar("All_0_0", new InteropSDefT(classLoader, "trans.$All_0_0", context));
    varScope.addSVar("Jar_0_0", new InteropSDefT(classLoader, "trans.$Jar_0_0", context));
    varScope.addSVar("CTree_0_0", new InteropSDefT(classLoader, "trans.$C$Tree_0_0", context));
    varScope.addSVar("STROutputMode_1_0", new InteropSDefT(classLoader, "trans.$S$T$R$Output$Mode_1_0", context));
    varScope.addSVar("OutputDirectory_1_0", new InteropSDefT(classLoader, "trans.$Output$Directory_1_0", context));
    varScope.addSVar("DebugNone_0_0", new InteropSDefT(classLoader, "trans.$Debug$None_0_0", context));
    varScope.addSVar("DebugAll_0_0", new InteropSDefT(classLoader, "trans.$Debug$All_0_0", context));
    varScope.addSVar("DebugSymbolTable_0_0", new InteropSDefT(classLoader, "trans.$Debug$Symbol$Table_0_0", context));
    varScope.addSVar("DebugAnalysis_0_0", new InteropSDefT(classLoader, "trans.$Debug$Analysis_0_0", context));
    varScope.addSVar("DebugDeclaration_0_0", new InteropSDefT(classLoader, "trans.$Debug$Declaration_0_0", context));
    varScope.addSVar("DebugCompiler_0_0", new InteropSDefT(classLoader, "trans.$Debug$Compiler_0_0", context));
    varScope.addSVar("TemplatelangDisabled_0_0", new InteropSDefT(classLoader, "trans.$Templatelang$Disabled_0_0", context));
    varScope.addSVar("TemplatelangEnabled_0_0", new InteropSDefT(classLoader, "trans.$Templatelang$Enabled_0_0", context));
    varScope.addSVar("Source_2_0", new InteropSDefT(classLoader, "trans.$Source_2_0", context));
    varScope.addSVar("CodeGeneration_1_0", new InteropSDefT(classLoader, "trans.$Code$Generation_1_0", context));
    varScope.addSVar("TemplateLang_1_0", new InteropSDefT(classLoader, "trans.$Template$Lang_1_0", context));
    varScope.addSVar("Debug_1_0", new InteropSDefT(classLoader, "trans.$Debug_1_0", context));
    varScope.addSVar("SpxProjects_1_0", new InteropSDefT(classLoader, "trans.$Spx$Projects_1_0", context));
    varScope.addSVar("Includes_1_0", new InteropSDefT(classLoader, "trans.$Includes_1_0", context));
    varScope.addSVar("Configuration_1_0", new InteropSDefT(classLoader, "trans.$Configuration_1_0", context));
    varScope.addSVar("innermost_scope_get_config_reference_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_get_config_reference_1_0", context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT(classLoader, "trans.$D$Y$N$A$M$I$C__$C$A$L$L$S_0_0", context));
    varScope.addSVar("undefine_get_config_reference_0_1", new InteropSDefT(classLoader, "trans.undefine_get_config_reference_0_1", context));
    varScope.addSVar("throw_get_config_reference_1_1", new InteropSDefT(classLoader, "trans.throw_get_config_reference_1_1", context));
    varScope.addSVar("continue_to_label_get_config_reference_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_get_config_reference_0_1", context));
    varScope.addSVar("continue_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.continue_get_config_reference_0_0", context));
    varScope.addSVar("break_bp_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.break_bp_get_config_reference_0_0", context));
    varScope.addSVar("break_to_label_get_config_reference_0_1", new InteropSDefT(classLoader, "trans.break_to_label_get_config_reference_0_1", context));
    varScope.addSVar("break_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.break_get_config_reference_0_0", context));
    varScope.addSVar("all_keys_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.all_keys_get_config_reference_0_0", context));
    varScope.addSVar("bigfold_get_config_reference_1_0", new InteropSDefT(classLoader, "trans.bigfold_get_config_reference_1_0", context));
    varScope.addSVar("fold_get_config_reference_1_0", new InteropSDefT(classLoader, "trans.fold_get_config_reference_1_0", context));
    varScope.addSVar("bigchain_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.bigchain_get_config_reference_0_0", context));
    varScope.addSVar("chain_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.chain_get_config_reference_0_0", context));
    varScope.addSVar("bigbagof_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.bigbagof_get_config_reference_0_0", context));
    varScope.addSVar("once_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.once_get_config_reference_0_0", context));
    varScope.addSVar("reverse_bagof_get_config_reference_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_get_config_reference_1_0", context));
    varScope.addSVar("bagof_get_config_reference_0_0", new InteropSDefT(classLoader, "trans.bagof_get_config_reference_0_0", context));
    varScope.addSVar("get_config_reference_0_0", new InteropSDefT(classLoader, "trans.get_config_reference_0_0", context));
    varScope.addSVar("aux_get_config_reference_0_2", new InteropSDefT(classLoader, "trans.aux_get_config_reference_0_2", context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$File_1_0", context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$File_0_1", context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$File_1_1", context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$File_0_1", context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$File_0_0", context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$File_0_0", context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$File_0_1", context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_$Current$File_0_0", context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$File_0_0", context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$File_1_0", context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$File_1_0", context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$File_0_0", context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$File_0_0", context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$File_0_0", context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.once_$Current$File_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$File_1_0", context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$File_0_0", context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT(classLoader, "trans.$Current$File_0_0", context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$File_0_1", context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Imported_1_0", context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Imported_0_1", context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Imported_1_1", context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Imported_0_0", context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Imported_0_0", context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Imported_0_0", context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Imported_0_0", context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Imported_1_0", context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Imported_1_0", context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Imported_0_0", context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Imported_0_0", context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Imported_0_0", context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Imported_0_0", context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Imported_1_0", context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Imported_0_0", context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT(classLoader, "trans.$Is$Imported_0_0", context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Imported_0_2", context));
  }
}