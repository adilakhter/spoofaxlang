module generate-syntax-templates

imports
  libstratego-lib
  libstratego-sglr
  libstratego-aterm
  libstratego-gpp
  lib/editor-common.generated

overlays
  CONS(t) = term(default(appl(unquoted("cons"), [fun(quoted(t))])))

rules

  generate-syntax-templates:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      filename := <guarantee-extension(|"generated.spx")> path;
      // If we can find at least one context-free-syntax block, use only
      // context-free productions, otherwise use all productions.
      cf-prod* := < collect-all(?context-free-syntax(<id>)); concat; not([])
                 <+ collect-all(?prod(_, _, _)) > selected;
      template* := <filter(prod-to-template); separate-by(|"\n")> cf-prod*;
      result := $[package example
                  module example
                  templates
                    [template*]]

  prod-to-template:
    prod(sym*, sort(sort), a) ->
      $[[sort][<pp-cons> a] = [open][open][elem*][close][close][<pp-attrs> a]]
    where
      (open, close) := <get-delimiters> sym*;
      elem* := <map(sym-to-template-elem(|open, close)); separate-by(|" ")> sym*

  prod-to-template =
    debug(!"Could not generate template from production: "); fail

rules // Splitting SDF attributes into (cons, rest) and pretty printing them

  pp-cons =
    if attrs(getfirst(?CONS(cons))) then
      !$[.[<un-double-quote> cons]]
    else
      !""
    end

  pp-attrs:
    no-attrs() -> ""

  pp-attrs:
    attrs(t) ->
      < remove-all(?CONS(_));
        map(pp-attr); separate-by(|","); concat-strings;
        // Wrap in {}-delimiters if and only if not empty.
        ("" <+ <concat-strings> [" {", <id>, "}"]) > t

  pp-attr:
    term(default(t)) -> <implode-aterm; pp-aterm-box; box2text-string(|100)> t

  pp-attr:
    assoc(t) -> <pp-assoc> t

  pp-attr: avoid() -> "avoid"
  pp-attr: prefer() -> "prefer"
  pp-attr: reject() -> "reject"
  pp-attr: bracket() -> "bracket"

  pp-assoc: assoc() -> "assoc"
  pp-assoc: left() -> "left"
  pp-assoc: right() -> "right"
  pp-assoc: non-assoc() -> "non-assoc"

rules // Converting SDF symbols to syntax template elements

  get-delimiters =
    if one(lit(string-as-chars(one('<' + '>')))) then
      !("[", "]")
    else
      !("<", ">")
    end

  sym-to-template-elem(|open, close):
    lit(t) -> <un-double-quote> t

  sym-to-template-elem(|open, close):
    sort(t) -> $[[open][t][close]]

  sym-to-template-elem(|open, close):
    opt(sort(t)) -> $[[open][t]?[close]]

  sym-to-template-elem(|open, close):
    iter-star(sort(t)) -> $[[open][t]*[close]]

  sym-to-template-elem(|open, close):
    iter(sort(t)) -> $[[open][t]+[close]]

  sym-to-template-elem(|open, close):
    iter-star-sep(sort(t),lit(s)) -> $[[open][t]*; separator=[s][close]]

  sym-to-template-elem(|open, close):
    iter-sep(sort(t),lit(s)) -> $[[open][t]+; separator=[s][close]]

  sym-to-template-elem(|open, close) =
    debug(!"Could not generate template element from symbol: "); fail
