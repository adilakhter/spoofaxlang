
regular tree grammar
  start SDF Module
  productions
    ListStarOfAlias1               -> ListPlusOfAlias0
    ListStarOfAlias1               -> <nil>()
    ListStarOfAlias1               -> <conc>(ListStarOfAlias1,ListStarOfAlias1)
    ListPlusOfAlias0               -> <conc>(ListStarOfAlias1,ListPlusOfAlias0)
    ListPlusOfAlias0               -> <conc>(ListPlusOfAlias0,ListStarOfAlias1)
    ListPlusOfAlias0               -> <conc>(ListPlusOfAlias0,ListPlusOfAlias0)
    ListPlusOfAlias0               -> <cons>(Alias,ListStarOfAlias1)
    ListStarOfRestriction1         -> ListPlusOfRestriction0
    ListStarOfRestriction1         -> <nil>()
    ListStarOfRestriction1         -> <conc>(ListStarOfRestriction1,ListStarOfRestriction1)
    ListPlusOfRestriction0         -> <conc>(ListStarOfRestriction1,ListPlusOfRestriction0)
    ListPlusOfRestriction0         -> <conc>(ListPlusOfRestriction0,ListStarOfRestriction1)
    ListPlusOfRestriction0         -> <conc>(ListPlusOfRestriction0,ListPlusOfRestriction0)
    ListPlusOfRestriction0         -> <cons>(Restriction,ListStarOfRestriction1)
    ListStarOfLookahead0           -> ListPlusOfLookahead0
    ListStarOfLookahead0           -> <nil>()
    ListStarOfLookahead0           -> <conc>(ListStarOfLookahead0,ListStarOfLookahead0)
    ListPlusOfLookahead0           -> <conc>(ListStarOfLookahead0,ListPlusOfLookahead0)
    ListPlusOfLookahead0           -> <conc>(ListPlusOfLookahead0,ListStarOfLookahead0)
    ListPlusOfLookahead0           -> <conc>(ListPlusOfLookahead0,ListPlusOfLookahead0)
    ListPlusOfLookahead0           -> <cons>(Lookahead,ListStarOfLookahead0)
    ListStarOfSingleQuotedStrChar0 -> <string>
    ListPlusOfSingleQuotedStrChar0 -> <string>
    ListStarOfSymbol0              -> ListPlusOfSymbol0
    ListStarOfSymbol0              -> <nil>()
    ListStarOfSymbol0              -> <conc>(ListStarOfSymbol0,ListStarOfSymbol0)
    ListPlusOfSymbol0              -> <conc>(ListStarOfSymbol0,ListPlusOfSymbol0)
    ListPlusOfSymbol0              -> <conc>(ListPlusOfSymbol0,ListStarOfSymbol0)
    ListPlusOfSymbol0              -> <conc>(ListPlusOfSymbol0,ListPlusOfSymbol0)
    ListPlusOfSymbol0              -> <cons>(Symbol,ListStarOfSymbol0)
    ListStarOfPriority1            -> ListPlusOfPriority0
    ListStarOfPriority1            -> <nil>()
    ListStarOfPriority1            -> <conc>(ListStarOfPriority1,ListStarOfPriority1)
    ListPlusOfPriority0            -> <conc>(ListStarOfPriority1,ListPlusOfPriority0)
    ListPlusOfPriority0            -> <conc>(ListPlusOfPriority0,ListStarOfPriority1)
    ListPlusOfPriority0            -> <conc>(ListPlusOfPriority0,ListPlusOfPriority0)
    ListPlusOfPriority0            -> <cons>(Priority,ListStarOfPriority1)
    ListStarOfGroup0               -> ListPlusOfGroup0
    ListStarOfGroup0               -> <nil>()
    ListStarOfGroup0               -> <conc>(ListStarOfGroup0,ListStarOfGroup0)
    ListPlusOfGroup0               -> <conc>(ListStarOfGroup0,ListPlusOfGroup0)
    ListPlusOfGroup0               -> <conc>(ListPlusOfGroup0,ListStarOfGroup0)
    ListPlusOfGroup0               -> <conc>(ListPlusOfGroup0,ListPlusOfGroup0)
    ListPlusOfGroup0               -> <cons>(Group,ListStarOfGroup0)
    ListStarOfNatCon0              -> ListPlusOfNatCon0
    ListStarOfNatCon0              -> <nil>()
    ListStarOfNatCon0              -> <conc>(ListStarOfNatCon0,ListStarOfNatCon0)
    ListPlusOfNatCon0              -> <conc>(ListStarOfNatCon0,ListPlusOfNatCon0)
    ListPlusOfNatCon0              -> <conc>(ListPlusOfNatCon0,ListStarOfNatCon0)
    ListPlusOfNatCon0              -> <conc>(ListPlusOfNatCon0,ListPlusOfNatCon0)
    ListPlusOfNatCon0              -> <cons>(NatCon,ListStarOfNatCon0)
    ListStarOfImport1              -> ListPlusOfImport0
    ListStarOfImport1              -> <nil>()
    ListStarOfImport1              -> <conc>(ListStarOfImport1,ListStarOfImport1)
    ListPlusOfImport0              -> <conc>(ListStarOfImport1,ListPlusOfImport0)
    ListPlusOfImport0              -> <conc>(ListPlusOfImport0,ListStarOfImport1)
    ListPlusOfImport0              -> <conc>(ListPlusOfImport0,ListPlusOfImport0)
    ListPlusOfImport0              -> <cons>(Import,ListStarOfImport1)
    ListStarOfSection1             -> ListPlusOfSection0
    ListStarOfSection1             -> <nil>()
    ListStarOfSection1             -> <conc>(ListStarOfSection1,ListStarOfSection1)
    ListPlusOfSection0             -> <conc>(ListStarOfSection1,ListPlusOfSection0)
    ListPlusOfSection0             -> <conc>(ListPlusOfSection0,ListStarOfSection1)
    ListPlusOfSection0             -> <conc>(ListPlusOfSection0,ListPlusOfSection0)
    ListPlusOfSection0             -> <cons>(Section,ListStarOfSection1)
    ListStarOfImpSection0          -> ListPlusOfImpSection0
    ListStarOfImpSection0          -> <nil>()
    ListStarOfImpSection0          -> <conc>(ListStarOfImpSection0,ListStarOfImpSection0)
    ListPlusOfImpSection0          -> <conc>(ListStarOfImpSection0,ListPlusOfImpSection0)
    ListPlusOfImpSection0          -> <conc>(ListPlusOfImpSection0,ListStarOfImpSection0)
    ListPlusOfImpSection0          -> <conc>(ListPlusOfImpSection0,ListPlusOfImpSection0)
    ListPlusOfImpSection0          -> <cons>(ImpSection,ListStarOfImpSection0)
    ListStarOfModule0              -> ListPlusOfModule0
    ListStarOfModule0              -> <nil>()
    ListStarOfModule0              -> <conc>(ListStarOfModule0,ListStarOfModule0)
    ListPlusOfModule0              -> <conc>(ListStarOfModule0,ListPlusOfModule0)
    ListPlusOfModule0              -> <conc>(ListPlusOfModule0,ListStarOfModule0)
    ListPlusOfModule0              -> <conc>(ListPlusOfModule0,ListPlusOfModule0)
    ListPlusOfModule0              -> <cons>(Module,ListStarOfModule0)
    ListStarOfRenaming0            -> ListPlusOfRenaming0
    ListStarOfRenaming0            -> <nil>()
    ListStarOfRenaming0            -> <conc>(ListStarOfRenaming0,ListStarOfRenaming0)
    ListPlusOfRenaming0            -> <conc>(ListStarOfRenaming0,ListPlusOfRenaming0)
    ListPlusOfRenaming0            -> <conc>(ListPlusOfRenaming0,ListStarOfRenaming0)
    ListPlusOfRenaming0            -> <conc>(ListPlusOfRenaming0,ListPlusOfRenaming0)
    ListPlusOfRenaming0            -> <cons>(Renaming,ListStarOfRenaming0)
    ListStarOfProduction1          -> ListPlusOfProduction0
    ListStarOfProduction1          -> <nil>()
    ListStarOfProduction1          -> <conc>(ListStarOfProduction1,ListStarOfProduction1)
    ListPlusOfProduction0          -> <conc>(ListStarOfProduction1,ListPlusOfProduction0)
    ListPlusOfProduction0          -> <conc>(ListPlusOfProduction0,ListStarOfProduction1)
    ListPlusOfProduction0          -> <conc>(ListPlusOfProduction0,ListPlusOfProduction0)
    ListPlusOfProduction0          -> <cons>(Production,ListStarOfProduction1)
    ListStarOfAttribute0           -> ListPlusOfAttribute0
    ListStarOfAttribute0           -> <nil>()
    ListStarOfAttribute0           -> <conc>(ListStarOfAttribute0,ListStarOfAttribute0)
    ListPlusOfAttribute0           -> <conc>(ListStarOfAttribute0,ListPlusOfAttribute0)
    ListPlusOfAttribute0           -> <conc>(ListPlusOfAttribute0,ListStarOfAttribute0)
    ListPlusOfAttribute0           -> <conc>(ListPlusOfAttribute0,ListPlusOfAttribute0)
    ListPlusOfAttribute0           -> <cons>(Attribute,ListStarOfAttribute0)
    ListStarOfSymbol1              -> ListPlusOfSymbol1
    ListStarOfSymbol1              -> <nil>()
    ListStarOfSymbol1              -> <conc>(ListStarOfSymbol1,ListStarOfSymbol1)
    ListPlusOfSymbol1              -> <conc>(ListStarOfSymbol1,ListPlusOfSymbol1)
    ListPlusOfSymbol1              -> <conc>(ListPlusOfSymbol1,ListStarOfSymbol1)
    ListPlusOfSymbol1              -> <conc>(ListPlusOfSymbol1,ListPlusOfSymbol1)
    ListPlusOfSymbol1              -> <cons>(Symbol,ListStarOfSymbol1)
    ListStarOfATerm0               -> ListPlusOfATerm0
    ListStarOfATerm0               -> <nil>()
    ListStarOfATerm0               -> <conc>(ListStarOfATerm0,ListStarOfATerm0)
    ListPlusOfATerm0               -> <conc>(ListStarOfATerm0,ListPlusOfATerm0)
    ListPlusOfATerm0               -> <conc>(ListPlusOfATerm0,ListStarOfATerm0)
    ListPlusOfATerm0               -> <conc>(ListPlusOfATerm0,ListPlusOfATerm0)
    ListPlusOfATerm0               -> <cons>(ATerm,ListStarOfATerm0)
    ListStarOfStrChar0             -> <string>
    ListPlusOfStrChar0             -> <string>
    SDF                            -> definition(Definition)
    Grammar                        -> context-free-restrictions(Restrictions)
    Grammar                        -> lexical-restrictions(Restrictions)
    Grammar                        -> context-free-priorities(Priorities)
    Grammar                        -> lexical-priorities(Priorities)
    Symbol                         -> file-start()
    Symbol                         -> start()
    Aliases                        -> ListStarOfAlias1
    Alias                          -> alias(Symbol,Symbol)
    Grammar                        -> aliases(Aliases)
    Attribute                      -> avoid()
    Attribute                      -> prefer()
    Attribute                      -> reject()
    Grammar                        -> restrictions(Restrictions)
    Restrictions                   -> ListStarOfRestriction1
    Restriction                    -> follow(Symbols,Lookaheads)
    Lookaheads                     -> list(ListStarOfLookahead0)
    Lookaheads                     -> alt(Lookaheads,Lookaheads)
    Lookaheads                     -> single(Lookahead)
    Lookahead                      -> seq(CharClass,Lookaheads)
    Lookahead                      -> char-class(CharClass)
    Symbol                         -> label(Label,Symbol)
    Label                          -> unquoted(IdCon)
    Label                          -> quoted(StrCon)
    Production                     -> prefix-fun(FunctionName,ListStarOfSymbol0,Symbol,Attributes)
    Symbol                         -> ci-lit(SingleQuotedStrCon)
    Symbol                         -> lit(StrCon)
    FunctionName                   -> quoted-fun(StrCon)
    FunctionName                   -> unquoted-fun(IdCon)
    SingleQuotedStrCon             -> <string>
    SingleQuotedStrChar            -> <string>
    Grammar                        -> context-free-start-symbols(Symbols)
    Grammar                        -> lexical-start-symbols(Symbols)
    Grammar                        -> kernel-start-symbols(Symbols)
    Grammar                        -> sorts(Symbols)
    Symbol                         -> parameterized-sort(Sort,ListPlusOfSymbol0)
    Symbol                         -> sort(Sort)
    Sort                           -> <string>
    Symbol                         -> char-class(CharClass)
    CharClass                      -> union(CharClass,CharClass)
    CharClass                      -> isect(CharClass,CharClass)
    CharClass                      -> diff(CharClass,CharClass)
    CharClass                      -> comp(CharClass)
    CharClass                      -> simple-charclass(OptCharRanges)
    OptCharRanges                  -> present(CharRanges)
    OptCharRanges                  -> absent()
    CharRanges                     -> conc(CharRanges,CharRanges)
    CharRanges                     -> CharRange
    CharRange                      -> range(Character,Character)
    CharRange                      -> Character
    Character                      -> label_start()
    Character                      -> bot()
    Character                      -> eof()
    Character                      -> top()
    Character                      -> short(ShortChar)
    Character                      -> numeric(NumChar)
    ShortChar                      -> <string>
    NumChar                        -> <string>
    Grammar                        -> priorities(Priorities)
    Priorities                     -> ListStarOfPriority1
    Priority                       -> assoc(Group,Associativity,Group)
    Priority                       -> chain(ListPlusOfGroup0)
    Group                          -> assoc-group(Associativity,Productions)
    Group                          -> prods-group(Productions)
    Group                          -> simple-group(Production)
    Group                          -> non-transitive(Group)
    Group                          -> with-arguments(Group,ArgumentIndicator)
    ArgumentIndicator              -> default(ListPlusOfNatCon0)
    Attribute                      -> assoc(Associativity)
    Attribute                      -> bracket()
    Associativity                  -> assoc()
    Associativity                  -> non-assoc()
    Associativity                  -> right()
    Associativity                  -> left()
    Symbol                         -> lifting(Symbol)
    Symbol                         -> strategy(Symbol,Symbol)
    Symbol                         -> alt(Symbol,Symbol)
    Symbol                         -> func(Symbols,Symbol)
    Symbol                         -> tuple(Symbol,ListPlusOfSymbol0)
    Symbol                         -> iter-star-sep(Symbol,Symbol)
    Symbol                         -> iter-sep(Symbol,Symbol)
    Symbol                         -> iter-star(Symbol)
    Symbol                         -> iter(Symbol)
    Symbol                         -> opt(Symbol)
    Symbol                         -> seq(Symbol,ListPlusOfSymbol1)
    Symbol                         -> empty()
    Import                         -> renamed-module(ModuleName,Renamings)
    Import                         -> module(ModuleName)
    Imports                        -> ListStarOfImport1
    Grammar                        -> imp-section(ImpSection)
    ImpSection                     -> imports(Imports)
    Attribute                      -> id(ModuleName)
    ModuleName                     -> parameterized(ModuleId,Symbols)
    ModuleName                     -> unparameterized(ModuleId)
    Sections                       -> ListStarOfSection1
    Section                        -> hiddens(Grammar)
    Section                        -> exports(Grammar)
    Module                         -> module(ModuleName,ListStarOfImpSection0,Sections)
    Definition                     -> ListStarOfModule0
    ModuleId                       -> <string>
    ModuleWord                     -> <string>
    Renaming                       -> production(Production,Production)
    Renaming                       -> symbol(Symbol,Symbol)
    Renamings                      -> renamings(ListStarOfRenaming0)
    Symbol                         -> layout()
    Symbol                         -> varsym(Symbol)
    Symbol                         -> lex(Symbol)
    Symbol                         -> cf(Symbol)
    Grammar                        -> lexical-variables(Productions)
    Grammar                        -> variables(Productions)
    Grammar                        -> context-free-syntax(Productions)
    Grammar                        -> lexical-syntax(Productions)
    Grammar                        -> syntax(Productions)
    Productions                    -> ListStarOfProduction1
    Production                     -> prod(Symbols,Symbol,Attributes)
    Attributes                     -> no-attrs()
    Attributes                     -> attrs(ListStarOfAttribute0)
    Attribute                      -> term(ATermAttribute)
    ATermAttribute                 -> default(ATerm)
    Grammar                        -> conc-grammars(Grammar,Grammar)
    Grammar                        -> empty-grammar()
    Symbols                        -> ListStarOfSymbol1
    Annotation                     -> default(ListPlusOfATerm0)
    ATerm                          -> annotated(ATerm,Annotation)
    ATerm                          -> list(ListStarOfATerm0)
    ATerm                          -> placeholder(ATerm)
    ATerm                          -> appl(AFun,ListPlusOfATerm0)
    ATerm                          -> fun(AFun)
    ATerm                          -> real(RealCon)
    ATerm                          -> int(IntCon)
    AFun                           -> unquoted(IdCon)
    AFun                           -> quoted(StrCon)
    IdCon                          -> <string>
    StrCon                         -> <string>
    StrChar                        -> <string>
    RealCon                        -> real-con(IntCon,NatCon,OptExp)
    OptExp                         -> absent()
    OptExp                         -> present(IntCon)
    IntCon                         -> negative(NatCon)
    IntCon                         -> positive(NatCon)
    IntCon                         -> natural(NatCon)
    NatCon                         -> <string>
