Module("generate-syntax-templates",[Imports([Import("libstratego-lib"),Import("libstratego-sglr"),Import("libstratego-aterm"),Import("libstratego-gpp"),Import("lib/editor-common.generated")]),Overlays([Overlay("CONS",["t"],NoAnnoList(Op("term",[NoAnnoList(Op("default",[NoAnnoList(Op("appl",[NoAnnoList(Op("unquoted",[NoAnnoList(Str("\"cons\""))])),NoAnnoList(List([NoAnnoList(Op("fun",[NoAnnoList(Op("quoted",[Var("t")]))]))]))]))]))])))]),Rules([RDefNoArgs("generate-syntax-templates",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"generated.spx\""))]),Var("path"))),Seq(Assign(Var(ListVar("cf-prod*")),App(LChoice(Seq(Call(SVar("collect-all"),[Match(NoAnnoList(Op("context-free-syntax",[RootApp(Id)])))]),Seq(CallNoArgs(SVar("concat")),Not(ListCongNoTail([])))),Call(SVar("collect-all"),[Match(NoAnnoList(Op("prod",[Wld,Wld,Wld])))])),Var("selected"))),Seq(Assign(Var(ListVar("template*")),App(Seq(Call(SVar("filter"),[CallNoArgs(SVar("prod-to-template"))]),CallT(SVar("separate-by"),[],[NoAnnoList(Str("\"\\n\""))])),Var(ListVar("cf-prod*")))),Assign(Var("result"),NoAnnoList(StringQuotation1("                  ",[QStr("package example\n                  module example\n                  templates\n                    "),StringEscape1("                    ",Var(ListVar("template*")))])))))))),RDefNoArgs("prod-to-template",Rule(NoAnnoList(Op("prod",[Var(ListVar("sym*")),NoAnnoList(Op("sort",[Var("sort")])),Var("a")])),NoAnnoList(StringQuotation1("        ",[StringEscape1("        ",Var("sort")),StringEscape1("              ",App(CallNoArgs(SVar("pp-cons")),Var("a"))),QStr(" = "),StringEscape1("                              ",Var("open")),StringEscape1("                                    ",Var("open")),StringEscape1("                                          ",Var(ListVar("elem*"))),StringEscape1("                                                 ",Var("close")),StringEscape1("                                                        ",Var("close")),StringEscape1("                                                               ",App(CallNoArgs(SVar("pp-attrs")),Var("a")))])),Seq(Assign(NoAnnoList(Tuple([Var("open"),Var("close")])),App(CallNoArgs(SVar("get-delimiters")),Var(ListVar("sym*")))),Assign(Var(ListVar("elem*")),App(Seq(Call(SVar("map"),[CallT(SVar("sym-to-template-elem"),[],[Var("open"),Var("close")])]),CallT(SVar("separate-by"),[],[NoAnnoList(Str("\" \""))])),Var(ListVar("sym*"))))))),SDefNoArgs("prod-to-template",Seq(Call(SVar("debug"),[Build(NoAnnoList(Str("\"Could not generate template from production: \"")))]),Fail))]),Rules([SDefNoArgs("pp-cons",CondChoice(Call(SVar("attrs"),[Call(SVar("getfirst"),[Match(NoAnnoList(Op("CONS",[Var("cons")])))])]),Build(NoAnnoList(StringQuotation1("         ",[QStr("."),StringEscape1("          ",App(CallNoArgs(SVar("un-double-quote")),Var("cons")))]))),Build(NoAnnoList(Str("\"\""))))),RDefNoArgs("pp-attrs",RuleNoCond(NoAnnoList(Op("no-attrs",[])),NoAnnoList(Str("\"\"")))),RDefNoArgs("pp-attrs",RuleNoCond(NoAnnoList(Op("attrs",[Var("t")])),App(Seq(Call(SVar("remove-all"),[Match(NoAnnoList(Op("CONS",[Wld])))]),Seq(Call(SVar("map"),[CallNoArgs(SVar("pp-attr"))]),Seq(CallT(SVar("separate-by"),[],[NoAnnoList(Str("\",\""))]),Seq(CallNoArgs(SVar("concat-strings")),LChoice(StrCong("\"\""),BA(CallNoArgs(SVar("concat-strings")),NoAnnoList(List([NoAnnoList(Str("\" {\"")),RootApp(Id),NoAnnoList(Str("\"}\""))])))))))),Var("t")))),RDefNoArgs("pp-attr",RuleNoCond(NoAnnoList(Op("term",[NoAnnoList(Op("default",[Var("t")]))])),App(Seq(CallNoArgs(SVar("implode-aterm")),Seq(CallNoArgs(SVar("pp-aterm-box")),CallT(SVar("box2text-string"),[],[NoAnnoList(Int("100"))]))),Var("t")))),RDefNoArgs("pp-attr",RuleNoCond(NoAnnoList(Op("assoc",[Var("t")])),App(CallNoArgs(SVar("pp-assoc")),Var("t")))),RDefNoArgs("pp-attr",RuleNoCond(NoAnnoList(Op("avoid",[])),NoAnnoList(Str("\"avoid\"")))),RDefNoArgs("pp-attr",RuleNoCond(NoAnnoList(Op("prefer",[])),NoAnnoList(Str("\"prefer\"")))),RDefNoArgs("pp-attr",RuleNoCond(NoAnnoList(Op("reject",[])),NoAnnoList(Str("\"reject\"")))),RDefNoArgs("pp-attr",RuleNoCond(NoAnnoList(Op("bracket",[])),NoAnnoList(Str("\"bracket\"")))),RDefNoArgs("pp-assoc",RuleNoCond(NoAnnoList(Op("assoc",[])),NoAnnoList(Str("\"assoc\"")))),RDefNoArgs("pp-assoc",RuleNoCond(NoAnnoList(Op("left",[])),NoAnnoList(Str("\"left\"")))),RDefNoArgs("pp-assoc",RuleNoCond(NoAnnoList(Op("right",[])),NoAnnoList(Str("\"right\"")))),RDefNoArgs("pp-assoc",RuleNoCond(NoAnnoList(Op("non-assoc",[])),NoAnnoList(Str("\"non-assoc\""))))]),Rules([SDefNoArgs("get-delimiters",CondChoice(One(Call(SVar("lit"),[Call(SVar("string-as-chars"),[One(Choice(CharCong("'<'"),CharCong("'>'")))])])),Build(NoAnnoList(Tuple([NoAnnoList(Str("\"[\"")),NoAnnoList(Str("\"]\""))]))),Build(NoAnnoList(Tuple([NoAnnoList(Str("\"<\"")),NoAnnoList(Str("\">\""))]))))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("lit",[Var("t")])),App(CallNoArgs(SVar("un-double-quote")),Var("t")))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("sort",[Var("t")])),NoAnnoList(StringQuotation1("                 ",[StringEscape1("                 ",Var("open")),StringEscape1("                       ",Var("t")),StringEscape1("                          ",Var("close"))])))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("opt",[NoAnnoList(Op("sort",[Var("t")]))])),NoAnnoList(StringQuotation1("                      ",[StringEscape1("                      ",Var("open")),StringEscape1("                            ",Var("t")),QStr("?"),StringEscape1("                                ",Var("close"))])))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("iter-star",[NoAnnoList(Op("sort",[Var("t")]))])),NoAnnoList(StringQuotation1("                            ",[StringEscape1("                            ",Var("open")),StringEscape1("                                  ",Var("t")),QStr("*"),StringEscape1("                                      ",Var("close"))])))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("iter",[NoAnnoList(Op("sort",[Var("t")]))])),NoAnnoList(StringQuotation1("                       ",[StringEscape1("                       ",Var("open")),StringEscape1("                             ",Var("t")),QStr("+"),StringEscape1("                                 ",Var("close"))])))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("iter-star-sep",[NoAnnoList(Op("sort",[Var("t")])),NoAnnoList(Op("lit",[Var("s")]))])),NoAnnoList(StringQuotation1("                                       ",[StringEscape1("                                       ",Var("open")),StringEscape1("                                             ",Var("t")),QStr("*; separator="),StringEscape1("                                                             ",Var("s")),StringEscape1("                                                                ",Var("close"))])))),RDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],RuleNoCond(NoAnnoList(Op("iter-sep",[NoAnnoList(Op("sort",[Var("t")])),NoAnnoList(Op("lit",[Var("s")]))])),NoAnnoList(StringQuotation1("                                  ",[StringEscape1("                                  ",Var("open")),StringEscape1("                                        ",Var("t")),QStr("+; separator="),StringEscape1("                                                        ",Var("s")),StringEscape1("                                                           ",Var("close"))])))),SDefT("sym-to-template-elem",[],[DefaultVarDec("open"),DefaultVarDec("close")],Seq(Call(SVar("debug"),[Build(NoAnnoList(Str("\"Could not generate template element from symbol: \"")))]),Fail))])])