Module("sdf",[Imports([Import("libstratego-lib"),Import("libstratego-sdf"),Import("libstratego-sglr"),Import("libstrc"),Import("analysis"),Import("generate-syntax-templates"),Import("lib/editor-common.generated")]),Rules([RDefNoArgs("editor-analyze",Rule(NoAnnoList(Tuple([Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var(ListVar("error'*")),Var(ListVar("warning'*")),NoAnnoList(List([]))])),[WithClause(Seq(CallNoArgs(SVar("editor-init")),Seq(CallNoArgs(SVar("analyze-ast")),Seq(Assign(Var(ListVar("error*")),App(Call(SVar("collect-om"),[CallNoArgs(SVar("fetch-sdf-errors")),CallNoArgs(SVar("conc"))]),Var("ast"))),Seq(Assign(Var(ListVar("warning*")),App(Call(SVar("collect-om"),[CallNoArgs(SVar("fetch-sdf-warnings")),CallNoArgs(SVar("conc"))]),Var("ast"))),Seq(CondChoice(BA(CallNoArgs(SVar("file-exists")),NoAnnoList(StringQuotation1("                         ",[StringEscape1("                         ",Var("project-path")),QStr("/.disable-global-analysis")]))),Assign(Var(ListVar("serror*")),NoAnnoList(List([]))),Assign(Var(ListVar("serror*")),App(Call(SVar("collect-om"),[CallNoArgs(SVar("context-free-syntax-sort-error")),CallNoArgs(SVar("conc"))]),Var("ast")))),CondChoice(CallNoArgs(SVar("IsImportFailed")),Seq(Assign(Var(ListVar("error'*")),Var(ListVar("error*"))),Assign(Var(ListVar("warning'*")),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var(ListVar("serror*")),Var(ListVar("warning*"))]))))),Seq(Assign(Var(ListVar("error'*")),App(CallNoArgs(SVar("conc")),NoAnnoList(Tuple([Var(ListVar("serror*")),Var(ListVar("error*"))])))),Assign(Var(ListVar("warning'*")),Var(ListVar("warning*")))))))))))])),SDefNoArgs("fetch-sdf-errors",Choice(Match(NoAnnoList(Op("context-free-syntax",[RootApp(Call(SVar("collect-om"),[CallNoArgs(SVar("context-free-syntax-error"))]))]))),Match(NoAnnoList(Op("lexical-syntax",[RootApp(Call(SVar("collect-om"),[CallNoArgs(SVar("lexical-syntax-error"))]))]))))),SDefNoArgs("fetch-sdf-warnings",Choice(Match(NoAnnoList(Op("context-free-syntax",[RootApp(Call(SVar("collect-om"),[CallNoArgs(SVar("context-free-syntax-warning"))]))]))),Match(NoAnnoList(Op("lexical-syntax",[RootApp(Call(SVar("collect-om"),[CallNoArgs(SVar("lexical-syntax-warning"))]))]))))),RDefNoArgs("editor-complete",Rule(NoAnnoList(Tuple([Var("node"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("proposals"),Assign(Var("proposals"),App(LChoice(CallNoArgs(SVar("propose-completion")),Build(NoAnnoList(List([])))),Var("node"))))),RDefNoArgs("editor-resolve",Rule(NoAnnoList(Tuple([NoAnnoList(Op("sort",[Var("x")])),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("target"),Assign(Var("target"),App(CallNoArgs(SVar("Declaration")),Var("x"))))),RDefNoArgs("editor-resolve",Rule(NoAnnoList(Tuple([NoAnnoList(Op("unparameterized",[Var("x")])),Var("position"),Var("ast"),Var("path"),Var("project-path")])),Var("target"),Assign(Var("target"),App(CallNoArgs(SVar("parse-sdf-file")),App(CallNoArgs(SVar("resolve-import")),Var("x")))))),AnnoDef([Override],SDefNoArgs("pp-sdf-string",Fail))]),Rules([RDefNoArgs("context-free-syntax-sort-error",RuleNoCond(NoAnnoList(Op("renamed-module",[Var("x"),NoAnnoList(Op("renamings",[Var("y")]))])),NoAnnoList(List([])))),RDefNoArgs("context-free-syntax-sort-error",Rule(NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(Tuple([Var("x"),NoAnnoList(StringQuotation1("                     ",[QStr("No definition for "),StringEscape1("                                       ",Var("x"))]))])),Not(BA(CallNoArgs(SVar("Declaration")),Var("x"))))),RDefNoArgs("context-free-syntax-sort-error",RuleNoCond(NoAnnoList(Op("parameterized-sort",[Wld,Wld])),NoAnnoList(List([])))),RDefNoArgs("context-free-syntax-sort-error",RuleNoCond(NoAnnoList(Op("'sorts",[Wld])),NoAnnoList(List([])))),SDefNoArgs("lexical-syntax-error",Fail)]),Rules([RDefNoArgs("context-free-syntax-warning",Rule(NoAnnoList(Op("prod",[Var(ListVar("p*")),Var("s"),Var(ListVar("a*"))])),NoAnnoList(Tuple([Var("target"),NoAnnoList(StringQuotation1("                                  ",[QStr("Missing {cons(\"Label\")} attribute to label the abstract syntax")]))])),Seq(LChoice(Not(Seq(AM(BA(Call(SVar("occurrences"),[Match(NoAnnoList(Op("sort",[Wld])))]),Var(ListVar("p*"))),NoAnnoList(Int("1"))),AM(BA(Call(SVar("occurrences"),[Match(NoAnnoList(Op("lit",[Wld])))]),Var(ListVar("p*"))),NoAnnoList(Int("0"))))),BA(Call(SVar("oncetd"),[Choice(CallNoArgs(SVar("is-iter")),Match(NoAnnoList(Op("opt",[Wld]))))]),Var(ListVar("p*")))),CondChoice(AM(Build(Var(ListVar("a*"))),NoAnnoList(Op("attrs",[Var(ListVar("a'*"))]))),Seq(Not(BA(One(Call(SVar("term"),[Call(SVar("default"),[Call(SVar("appl"),[Call(SVar("unquoted"),[Choice(StrCong("\"cons\""),StrCong("\"ast\""))]),ListCongNoTail([Call(SVar("fun"),[Call(SVar("quoted"),[Not(StrCong("\"\\\"\\\"\""))])])])])])])),Var(ListVar("a'*")))),Seq(Not(BA(One(Choice(Call(SVar("bracket"),[]),Call(SVar("reject"),[]))),Var(ListVar("a'*")))),Seq(Not(Seq(Build(Var("s")),Choice(Call(SVar("sort"),[StrCong("\"Keyword\"")]),Call(SVar("sort"),[StrCong("\"\\\"Keyword\\\"\"")])))),Assign(Var("target"),Var(ListVar("a*")))))),Assign(Var("target"),Var("s")))))),RDefNoArgs("context-free-syntax-warning",Rule(As(Var("t"),NoAnnoList(Op("term",[NoAnnoList(Op("default",[NoAnnoList(Op("appl",[NoAnnoList(Op("unquoted",[NoAnnoList(Str("\"cons\""))])),Var(ListVar("a*"))]))]))]))),NoAnnoList(Tuple([Var("t"),NoAnnoList(StringQuotation1("                                                           ",[QStr("Single argument expected for {cons(\"Name\")} attribute")]))])),Not(AM(BA(CallNoArgs(SVar("length")),Var(ListVar("a*"))),NoAnnoList(Int("1")))))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("term",[NoAnnoList(Op("default",[NoAnnoList(Op("appl",[NoAnnoList(Op("unquoted",[NoAnnoList(Str("\"cons\""))])),NoAnnoList(List([As(Var("t"),NoAnnoList(Op("fun",[NoAnnoList(Op("quoted",[NoAnnoList(Str("\"\\\"Nil\\\"\""))]))])))]))]))]))])),NoAnnoList(Tuple([Var("t"),NoAnnoList(StringQuotation1("               ",[QStr("In Stratego, Nil is the empty list, and Nil() does not match this constructor (use a different constructor)")]))])))),RDefNoArgs("lexical-syntax-warning",RuleNoCond(As(Var("t"),NoAnnoList(Op("term",[NoAnnoList(Op("default",[NoAnnoList(Op("appl",[NoAnnoList(Op("unquoted",[NoAnnoList(Str("\"cons\""))])),Var(ListVar("a*"))]))]))]))),NoAnnoList(Tuple([Var("t"),NoAnnoList(StringQuotation1("                                                           ",[QStr("Constructor only expected in context-free syntax")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(As(Var("t"),NoAnnoList(Op("term",[NoAnnoList(Op("default",[NoAnnoList(Op("annotated",[Wld,Wld]))]))]))),NoAnnoList(Tuple([Var("t"),NoAnnoList(StringQuotation1("                                                ",[QStr("Use round parentheses () for attribute arguments")]))])))),RDefNoArgs("context-free-syntax-error",Rule(NoAnnoList(Op("prod",[NoAnnoList(List([Var("x")])),Var("s"),NoAnnoList(Op("attrs",[Var(ListVar("a*"))]))])),NoAnnoList(Tuple([Var(ListVar("a*")),NoAnnoList(StringQuotation1("                                      ",[QStr("Illegal use of {bracket} attribute")]))])),BA(One(Call(SVar("bracket"),[])),Var(ListVar("a*"))))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("alt",[Var("x"),Var("y")])),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("                          ",[QStr("The | construct is deprecated: instead of A|B->C use A->C B->C")]))])))),RDefNoArgs("context-free-syntax-warning",Rule(NoAnnoList(Op("opt",[As(Var("s"),NoAnnoList(Op("seq",[Wld,Wld])))])),NoAnnoList(Tuple([Var("s"),NoAnnoList(StringQuotation1("                                ",[QStr("Extract sequence in optional to separate productions to ensure acceptable abstract syntax")]))])),Not(AM(BA(Call(SVar("occurrences"),[CallNoArgs(SVar("is-non-terminal"))]),Var("s")),NoAnnoList(Int("1")))))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("opt",[NoAnnoList(Op("lit",[Wld]))])),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("                            ",[QStr("Extract literal in optional to separate productions to ensure consistent abstract syntax")]))])))),SDefNoArgs("is-non-terminal",Choice(Match(NoAnnoList(Op("sort",[Wld]))),Choice(Match(NoAnnoList(Op("opt",[Wld]))),CallNoArgs(SVar("is-iter"))))),SDefNoArgs("is-iter",Choice(Match(NoAnnoList(Op("iter",[Wld]))),Choice(Match(NoAnnoList(Op("iter-star",[Wld]))),Choice(Match(NoAnnoList(Op("iter-sep",[Wld,Wld]))),Match(NoAnnoList(Op("iter-star-sep",[Wld,Wld]))))))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("lit",[Var("sep")])),NoAnnoList(List([NoAnnoList(Op("sort",[Var("x")]))]))]))]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("}+ instead for "),StringEscape1("                                          ",Var("sep")),QStr("-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(List([NoAnnoList(Op("lit",[Var("sep")]))]))]))])),NoAnnoList(Op("sort",[Var("x")]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("}+ instead for "),StringEscape1("                                          ",Var("sep")),QStr("-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("opt",[NoAnnoList(Op("sort",[Var("x")]))])),NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("lit",[Var("sep")])),NoAnnoList(List([NoAnnoList(Op("sort",[Var("x")]))]))]))]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("}* instead for "),StringEscape1("                                          ",Var("sep")),QStr("-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(List([NoAnnoList(Op("lit",[Var("sep")]))]))]))])),NoAnnoList(Op("opt",[NoAnnoList(Op("sort",[Var("x")]))]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("}* instead for "),StringEscape1("                                          ",Var("sep")),QStr("-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("prod",[As(Var("lhs"),NoAnnoList(List([NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(Op("opt",[NoAnnoList(Op("seq",[NoAnnoList(Op("lit",[Var("sep")])),NoAnnoList(List([NoAnnoList(Op("sort",[Var("xs")]))]))]))]))]))),NoAnnoList(Op("sort",[Var("xs")])),Wld])),NoAnnoList(Tuple([Var("lhs"),NoAnnoList(StringQuotation1("            ",[QStr("Use {"),StringEscape1("                 ",Var("x")),QStr(" "),StringEscape1("                     ",Var("sep")),QStr("}+ instead for "),StringEscape1("                                         ",Var("sep")),QStr("-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("opt",[NoAnnoList(Op("lit",[Var("sep")]))])),NoAnnoList(List([NoAnnoList(Op("sort",[Var("x")]))]))]))]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("?}+ instead for "),StringEscape1("                                           ",Var("sep")),QStr("?-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(List([NoAnnoList(Op("opt",[NoAnnoList(Op("lit",[Var("sep")]))]))]))]))])),NoAnnoList(Op("sort",[Var("x")]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("?}+ instead for "),StringEscape1("                                           ",Var("sep")),QStr("?-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("opt",[NoAnnoList(Op("sort",[Var("x")]))])),NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("opt",[NoAnnoList(Op("lit",[Var("sep")]))])),NoAnnoList(List([NoAnnoList(Op("sort",[Var("x")]))]))]))]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("?}* instead for "),StringEscape1("                                           ",Var("sep")),QStr("?-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([NoAnnoList(Op("iter-star",[NoAnnoList(Op("seq",[NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(List([NoAnnoList(Op("opt",[NoAnnoList(Op("lit",[Var("sep")]))]))]))]))])),NoAnnoList(Op("opt",[NoAnnoList(Op("sort",[Var("x")]))]))],Wld)),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("             ",[QStr("Use {"),StringEscape1("                  ",Var("x")),QStr(" "),StringEscape1("                      ",Var("sep")),QStr("?}* instead for "),StringEscape1("                                           ",Var("sep")),QStr("?-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("prod",[As(Var("lhs"),NoAnnoList(List([NoAnnoList(Op("sort",[Var("x")])),NoAnnoList(Op("opt",[NoAnnoList(Op("seq",[NoAnnoList(Op("opt",[NoAnnoList(Op("lit",[Var("sep")]))])),NoAnnoList(List([NoAnnoList(Op("sort",[Var("xs")]))]))]))]))]))),NoAnnoList(Op("sort",[Var("xs")])),Wld])),NoAnnoList(Tuple([Var("lhs"),NoAnnoList(StringQuotation1("            ",[QStr("Use {"),StringEscape1("                 ",Var("x")),QStr(" "),StringEscape1("                     ",Var("sep")),QStr("?}+ instead for "),StringEscape1("                                          ",Var("sep")),QStr("?-separated lists")]))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(ListTail([Wld],Var(ListVar("t*")))),App(CallNoArgs(SVar("context-free-syntax-warning")),Var(ListVar("t*"))))),RDefNoArgs("context-free-syntax-warning",Rule(NoAnnoList(Op("iter-star",[Var("cs")])),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("                              ",[QStr("Character class iteration should be in lexical syntax section")]))])),BA(Call(SVar("oncetd"),[Match(NoAnnoList(Op("range",[Wld,Wld])))]),Var("cs")))),RDefNoArgs("context-free-syntax-warning",Rule(NoAnnoList(Op("iter",[Var("cs")])),NoAnnoList(Tuple([RootApp(Id),NoAnnoList(StringQuotation1("                         ",[QStr("Character class iteration should be in lexical syntax section")]))])),BA(Call(SVar("oncetd"),[Match(NoAnnoList(Op("range",[Wld,Wld])))]),Var("cs")))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("iter-sep",[Wld,As(Var("bad"),NoAnnoList(Op("sort",[Wld])))])),NoAnnoList(Tuple([Var("bad"),NoAnnoList(Str("\"Non-terminal used as a list separator (use round braces for grouping non-terminals)\""))])))),RDefNoArgs("context-free-syntax-warning",RuleNoCond(NoAnnoList(Op("iter-star-sep",[Wld,As(Var("bad"),NoAnnoList(Op("sort",[Wld])))])),NoAnnoList(Tuple([Var("bad"),NoAnnoList(Str("\"Non-terminal used as a list separator (use round braces for grouping non-terminals)\""))]))))]),Rules([RDefNoArgs("generate-pp-rules",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),LChoice(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"selection.pp\""))]),Var("path"))),Seq(Assign(Var("selected'"),App(Seq(CallNoArgs(SVar("add-context")),CallNoArgs(SVar("sdf-desugar"))),Var("selected"))),Assign(Var("result"),App(Seq(CallNoArgs(SVar("ppgenerate")),CallNoArgs(SVar("pp-pp-table"))),Var("selected'"))))),CallT(SVar("fatal-err-msg"),[],[NoAnnoList(StringQuotation1("                       ",[QStr("Could not generate pretty printer rules for this selection.")]))])))),RDefNoArgs("generate-rtg",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("result")])),LChoice(Seq(Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"rtg\""))]),Var("path"))),Seq(Assign(Var("selected'"),App(Seq(Call(SVar("debug"),[Build(NoAnnoList(Int("2")))]),Seq(CallNoArgs(SVar("add-context")),Seq(Call(SVar("debug"),[Build(NoAnnoList(Int("3")))]),CallNoArgs(SVar("sdf-desugar"))))),Var("selected"))),Assign(Var("result"),App(Seq(Call(SVar("debug"),[Build(NoAnnoList(Int("4")))]),Seq(CallNoArgs(SVar("core-rtg2sig")),Seq(Call(SVar("debug"),[Build(NoAnnoList(Int("5")))]),CallNoArgs(SVar("pp-stratego-string"))))),Var("selected'"))))),CallT(SVar("fatal-err-msg"),[],[NoAnnoList(StringQuotation1("                       ",[QStr("Could not generate abstract syntax signatures for this selection.")]))])))),RDefNoArgs("generate-aterm",Rule(NoAnnoList(Tuple([Var("selected"),Var("position"),Var("ast"),Var("path"),Var("project-path")])),NoAnnoList(Tuple([Var("filename"),Var("selected")])),Assign(Var("filename"),App(CallT(SVar("guarantee-extension"),[],[NoAnnoList(Str("\"aterm\""))]),Var("path"))))),SDefNoArgs("add-context",IfThen(Not(Call(SVar("oncetd"),[Match(NoAnnoList(Op("context-free-syntax",[Wld])))])),CondChoice(CallNoArgs(SVar("is-list")),Build(NoAnnoList(Op("context-free-syntax",[RootApp(Id)]))),Build(NoAnnoList(Op("context-free-syntax",[NoAnnoList(List([RootApp(Id)]))]))))))]),Rules([SDefNoArgs("ppgenerate",BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(Str("\"org.strategoxt.tools.ppgenerate\"")),NoAnnoList(List([RootApp(Id)]))])))),SDefNoArgs("core-rtg2sig",BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(Str("\"org.strategoxt.tools.core-rtg2sig\"")),NoAnnoList(List([RootApp(Id)]))])))),SDefNoArgs("pp-pp-table",BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(Str("\"org.strategoxt.tools.pp-pp-table\"")),NoAnnoList(List([RootApp(Id)]))])))),SDefNoArgs("sdf-desugar",AM(BA(CallNoArgs(SVar("call")),NoAnnoList(Tuple([NoAnnoList(Str("\"org.strategoxt.tools.sdf-desugar\"")),NoAnnoList(List([RootApp(Id)]))]))),NoAnnoList(List([Wld,RootApp(Id)]))))])])