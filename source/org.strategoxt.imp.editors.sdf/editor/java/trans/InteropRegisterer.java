package trans;

import org.strategoxt.stratego_lib.*;
import org.strategoxt.strc.*;
import org.strategoxt.stratego_lib.*;
import org.strategoxt.stratego_sglr.*;
import org.strategoxt.stratego_gpp.*;
import org.strategoxt.stratego_xtc.*;
import org.strategoxt.stratego_aterm.*;
import org.strategoxt.stratego_sdf.*;
import org.strategoxt.java_front.*;
import org.strategoxt.lang.*;
import org.spoofax.interpreter.terms.*;
import static org.strategoxt.lang.Term.*;
import org.spoofax.interpreter.library.AbstractPrimitive;
import java.util.ArrayList;
import java.lang.ref.WeakReference;

@SuppressWarnings("unused") public class InteropRegisterer extends org.strategoxt.lang.InteropRegisterer 
{ 
  @Override public void register(org.spoofax.interpreter.core.IContext context, Context compiledContext)
  { 
    register(context, compiledContext, context.getVarScope());
  }

  @Override public void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader)
  { 
    registerLazy(context, compiledContext, classLoader, context.getVarScope());
  }

  private void register(org.spoofax.interpreter.core.IContext context, Context compiledContext, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("parse_file_0_0", new InteropSDefT(parse_file_0_0.instance, context));
    varScope.addSVar("parse_sdf_file_0_0", new InteropSDefT(parse_sdf_file_0_0.instance, context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(parse_string_0_0.instance, context));
    varScope.addSVar("parse_sdf_string_0_0", new InteropSDefT(parse_sdf_string_0_0.instance, context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(parse_stream_0_0.instance, context));
    varScope.addSVar("parse_sdf_stream_0_0", new InteropSDefT(parse_sdf_stream_0_0.instance, context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(open_import_3_0.instance, context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(open_wildcard_import_4_0.instance, context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(import_cache_path_0_0.instance, context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(project_path_0_0.instance, context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(plugin_path_0_0.instance, context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(candidate_sorts_0_0.instance, context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(is_newer_0_0.instance, context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(editor_init_0_0.instance, context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(refresh_workspace_file_0_0.instance, context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(string_starts_with_capital_0_0.instance, context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(origin_term_0_0.instance, context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(origin_text_0_0.instance, context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(origin_offset_0_0.instance, context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(origin_location_0_0.instance, context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(origin_line_0_0.instance, context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(origin_column_0_0.instance, context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(origin_strip_0_0.instance, context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(origin_equal_0_1.instance, context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(origin_surrounding_comments_0_0.instance, context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(origin_documentation_comment_0_0.instance, context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(documentation_comment_chars_0_0.instance, context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(origin_track_forced_1_0.instance, context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(desugar_position_1_1.instance, context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(at_position_1_1.instance, context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(position_of_term_1_0.instance, context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(position_of_term_1_1.instance, context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(term_at_position_0_1.instance, context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(parent_at_position_0_1.instance, context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(subterm_at_0_1.instance, context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(set_markers_0_1.instance, context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(queue_analysis_0_0.instance, context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(set_total_work_units_0_0.instance, context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(complete_work_unit_0_0.instance, context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(queue_strategy_0_2.instance, context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(set_analysis_backgrounded_0_0.instance, context));
    varScope.addSVar("generate_syntax_templates_0_0", new InteropSDefT(generate_syntax_templates_0_0.instance, context));
    varScope.addSVar("prod_to_template_0_0", new InteropSDefT(prod_to_template_0_0.instance, context));
    varScope.addSVar("pp_cons_0_0", new InteropSDefT(pp_cons_0_0.instance, context));
    varScope.addSVar("pp_attrs_0_0", new InteropSDefT(pp_attrs_0_0.instance, context));
    varScope.addSVar("pp_attr_0_0", new InteropSDefT(pp_attr_0_0.instance, context));
    varScope.addSVar("pp_assoc_0_0", new InteropSDefT(pp_assoc_0_0.instance, context));
    varScope.addSVar("get_delimiters_0_0", new InteropSDefT(get_delimiters_0_0.instance, context));
    varScope.addSVar("sym_to_template_elem_0_2", new InteropSDefT(sym_to_template_elem_0_2.instance, context));
    varScope.addSVar("analyze_ast_0_0", new InteropSDefT(analyze_ast_0_0.instance, context));
    varScope.addSVar("declare_globals_top_0_0", new InteropSDefT(declare_globals_top_0_0.instance, context));
    varScope.addSVar("declare_globals_0_0", new InteropSDefT(declare_globals_0_0.instance, context));
    varScope.addSVar("resolve_import_0_0", new InteropSDefT(resolve_import_0_0.instance, context));
    varScope.addSVar("declare_simple_global_0_0", new InteropSDefT(declare_simple_global_0_0.instance, context));
    varScope.addSVar("declare_use_0_0", new InteropSDefT(declare_use_0_0.instance, context));
    varScope.addSVar("propose_completion_0_0", new InteropSDefT(propose_completion_0_0.instance, context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(editor_analyze_0_0.instance, context));
    varScope.addSVar("fetch_sdf_errors_0_0", new InteropSDefT(fetch_sdf_errors_0_0.instance, context));
    varScope.addSVar("fetch_sdf_warnings_0_0", new InteropSDefT(fetch_sdf_warnings_0_0.instance, context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(editor_complete_0_0.instance, context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(editor_resolve_0_0.instance, context));
    varScope.addSVar("context_free_syntax_sort_error_0_0", new InteropSDefT(context_free_syntax_sort_error_0_0.instance, context));
    varScope.addSVar("lexical_syntax_error_0_0", new InteropSDefT(lexical_syntax_error_0_0.instance, context));
    varScope.addSVar("context_free_syntax_warning_0_0_fragment_4", new InteropSDefT(context_free_syntax_warning_0_0_fragment_4.instance, context));
    varScope.addSVar("context_free_syntax_warning_0_0_fragment_3", new InteropSDefT(context_free_syntax_warning_0_0_fragment_3.instance, context));
    varScope.addSVar("context_free_syntax_warning_0_0", new InteropSDefT(context_free_syntax_warning_0_0.instance, context));
    varScope.addSVar("lexical_syntax_warning_0_0", new InteropSDefT(lexical_syntax_warning_0_0.instance, context));
    varScope.addSVar("context_free_syntax_error_0_0", new InteropSDefT(context_free_syntax_error_0_0.instance, context));
    varScope.addSVar("is_non_terminal_0_0", new InteropSDefT(is_non_terminal_0_0.instance, context));
    varScope.addSVar("is_iter_0_0", new InteropSDefT(is_iter_0_0.instance, context));
    varScope.addSVar("generate_pp_rules_0_0", new InteropSDefT(generate_pp_rules_0_0.instance, context));
    varScope.addSVar("generate_rtg_0_0", new InteropSDefT(generate_rtg_0_0.instance, context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(generate_aterm_0_0.instance, context));
    varScope.addSVar("add_context_0_0", new InteropSDefT(add_context_0_0.instance, context));
    varScope.addSVar("ppgenerate_0_0", new InteropSDefT(ppgenerate_0_0.instance, context));
    varScope.addSVar("core_rtg2sig_0_0", new InteropSDefT(core_rtg2sig_0_0.instance, context));
    varScope.addSVar("pp_pp_table_0_0", new InteropSDefT(pp_pp_table_0_0.instance, context));
    varScope.addSVar("sdf_desugar_0_0", new InteropSDefT(sdf_desugar_0_0.instance, context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT($C$O$M$P$L$E$T$I$O$N_1_0.instance, context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT($N$O$C$O$N$T$E$X$T_1_0.instance, context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT($M$A$R$K$E$R_0_0.instance, context));
    varScope.addSVar("Entity_2_0", new InteropSDefT($Entity_2_0.instance, context));
    varScope.addSVar("Property_2_0", new InteropSDefT($Property_2_0.instance, context));
    varScope.addSVar("Type_1_0", new InteropSDefT($Type_1_0.instance, context));
    varScope.addSVar("CONS_1_0", new InteropSDefT($C$O$N$S_1_0.instance, context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(innermost_scope_$Current$File_1_0.instance, context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT($D$Y$N$A$M$I$C__$C$A$L$L$S_0_0.instance, context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(undefine_$Current$File_0_1.instance, context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(throw_$Current$File_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(continue_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(continue_$Current$File_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(break_bp_$Current$File_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(break_to_label_$Current$File_0_1.instance, context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(break_$Current$File_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(all_keys_$Current$File_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(bigfold_$Current$File_1_0.instance, context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(fold_$Current$File_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(bigchain_$Current$File_0_0.instance, context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(chain_$Current$File_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(bigbagof_$Current$File_0_0.instance, context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(once_$Current$File_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(reverse_bagof_$Current$File_1_0.instance, context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(bagof_$Current$File_0_0.instance, context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT($Current$File_0_0.instance, context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(aux_$Current$File_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(innermost_scope_$Is$Imported_1_0.instance, context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(undefine_$Is$Imported_0_1.instance, context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(throw_$Is$Imported_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(continue_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(continue_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(break_bp_$Is$Imported_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(break_to_label_$Is$Imported_0_1.instance, context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(break_$Is$Imported_0_0.instance, context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(all_keys_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(bigfold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(fold_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(bigchain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(chain_$Is$Imported_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(bigbagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(once_$Is$Imported_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(reverse_bagof_$Is$Imported_1_0.instance, context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(bagof_$Is$Imported_0_0.instance, context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT($Is$Imported_0_0.instance, context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(aux_$Is$Imported_0_2.instance, context));
    varScope.addSVar("innermost_scope_ProjectDir_1_0", new InteropSDefT(innermost_scope_$Project$Dir_1_0.instance, context));
    varScope.addSVar("undefine_ProjectDir_0_1", new InteropSDefT(undefine_$Project$Dir_0_1.instance, context));
    varScope.addSVar("throw_ProjectDir_1_1", new InteropSDefT(throw_$Project$Dir_1_1.instance, context));
    varScope.addSVar("continue_to_label_ProjectDir_0_1", new InteropSDefT(continue_to_label_$Project$Dir_0_1.instance, context));
    varScope.addSVar("continue_ProjectDir_0_0", new InteropSDefT(continue_$Project$Dir_0_0.instance, context));
    varScope.addSVar("break_bp_ProjectDir_0_0", new InteropSDefT(break_bp_$Project$Dir_0_0.instance, context));
    varScope.addSVar("break_to_label_ProjectDir_0_1", new InteropSDefT(break_to_label_$Project$Dir_0_1.instance, context));
    varScope.addSVar("break_ProjectDir_0_0", new InteropSDefT(break_$Project$Dir_0_0.instance, context));
    varScope.addSVar("all_keys_ProjectDir_0_0", new InteropSDefT(all_keys_$Project$Dir_0_0.instance, context));
    varScope.addSVar("bigfold_ProjectDir_1_0", new InteropSDefT(bigfold_$Project$Dir_1_0.instance, context));
    varScope.addSVar("fold_ProjectDir_1_0", new InteropSDefT(fold_$Project$Dir_1_0.instance, context));
    varScope.addSVar("bigchain_ProjectDir_0_0", new InteropSDefT(bigchain_$Project$Dir_0_0.instance, context));
    varScope.addSVar("chain_ProjectDir_0_0", new InteropSDefT(chain_$Project$Dir_0_0.instance, context));
    varScope.addSVar("bigbagof_ProjectDir_0_0", new InteropSDefT(bigbagof_$Project$Dir_0_0.instance, context));
    varScope.addSVar("once_ProjectDir_0_0", new InteropSDefT(once_$Project$Dir_0_0.instance, context));
    varScope.addSVar("reverse_bagof_ProjectDir_1_0", new InteropSDefT(reverse_bagof_$Project$Dir_1_0.instance, context));
    varScope.addSVar("bagof_ProjectDir_0_0", new InteropSDefT(bagof_$Project$Dir_0_0.instance, context));
    varScope.addSVar("ProjectDir_0_0", new InteropSDefT($Project$Dir_0_0.instance, context));
    varScope.addSVar("aux_ProjectDir_0_1", new InteropSDefT(aux_$Project$Dir_0_1.instance, context));
    varScope.addSVar("innermost_scope_CurrentDir_1_0", new InteropSDefT(innermost_scope_$Current$Dir_1_0.instance, context));
    varScope.addSVar("undefine_CurrentDir_0_1", new InteropSDefT(undefine_$Current$Dir_0_1.instance, context));
    varScope.addSVar("throw_CurrentDir_1_1", new InteropSDefT(throw_$Current$Dir_1_1.instance, context));
    varScope.addSVar("continue_to_label_CurrentDir_0_1", new InteropSDefT(continue_to_label_$Current$Dir_0_1.instance, context));
    varScope.addSVar("continue_CurrentDir_0_0", new InteropSDefT(continue_$Current$Dir_0_0.instance, context));
    varScope.addSVar("break_bp_CurrentDir_0_0", new InteropSDefT(break_bp_$Current$Dir_0_0.instance, context));
    varScope.addSVar("break_to_label_CurrentDir_0_1", new InteropSDefT(break_to_label_$Current$Dir_0_1.instance, context));
    varScope.addSVar("break_CurrentDir_0_0", new InteropSDefT(break_$Current$Dir_0_0.instance, context));
    varScope.addSVar("all_keys_CurrentDir_0_0", new InteropSDefT(all_keys_$Current$Dir_0_0.instance, context));
    varScope.addSVar("bigfold_CurrentDir_1_0", new InteropSDefT(bigfold_$Current$Dir_1_0.instance, context));
    varScope.addSVar("fold_CurrentDir_1_0", new InteropSDefT(fold_$Current$Dir_1_0.instance, context));
    varScope.addSVar("bigchain_CurrentDir_0_0", new InteropSDefT(bigchain_$Current$Dir_0_0.instance, context));
    varScope.addSVar("chain_CurrentDir_0_0", new InteropSDefT(chain_$Current$Dir_0_0.instance, context));
    varScope.addSVar("bigbagof_CurrentDir_0_0", new InteropSDefT(bigbagof_$Current$Dir_0_0.instance, context));
    varScope.addSVar("once_CurrentDir_0_0", new InteropSDefT(once_$Current$Dir_0_0.instance, context));
    varScope.addSVar("reverse_bagof_CurrentDir_1_0", new InteropSDefT(reverse_bagof_$Current$Dir_1_0.instance, context));
    varScope.addSVar("bagof_CurrentDir_0_0", new InteropSDefT(bagof_$Current$Dir_0_0.instance, context));
    varScope.addSVar("CurrentDir_0_0", new InteropSDefT($Current$Dir_0_0.instance, context));
    varScope.addSVar("aux_CurrentDir_0_1", new InteropSDefT(aux_$Current$Dir_0_1.instance, context));
    varScope.addSVar("innermost_scope_IsImportFailed_1_0", new InteropSDefT(innermost_scope_$Is$Import$Failed_1_0.instance, context));
    varScope.addSVar("undefine_IsImportFailed_0_1", new InteropSDefT(undefine_$Is$Import$Failed_0_1.instance, context));
    varScope.addSVar("throw_IsImportFailed_1_1", new InteropSDefT(throw_$Is$Import$Failed_1_1.instance, context));
    varScope.addSVar("continue_to_label_IsImportFailed_0_1", new InteropSDefT(continue_to_label_$Is$Import$Failed_0_1.instance, context));
    varScope.addSVar("continue_IsImportFailed_0_0", new InteropSDefT(continue_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("break_bp_IsImportFailed_0_0", new InteropSDefT(break_bp_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("break_to_label_IsImportFailed_0_1", new InteropSDefT(break_to_label_$Is$Import$Failed_0_1.instance, context));
    varScope.addSVar("break_IsImportFailed_0_0", new InteropSDefT(break_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("all_keys_IsImportFailed_0_0", new InteropSDefT(all_keys_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("bigfold_IsImportFailed_1_0", new InteropSDefT(bigfold_$Is$Import$Failed_1_0.instance, context));
    varScope.addSVar("fold_IsImportFailed_1_0", new InteropSDefT(fold_$Is$Import$Failed_1_0.instance, context));
    varScope.addSVar("bigchain_IsImportFailed_0_0", new InteropSDefT(bigchain_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("chain_IsImportFailed_0_0", new InteropSDefT(chain_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("bigbagof_IsImportFailed_0_0", new InteropSDefT(bigbagof_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("once_IsImportFailed_0_0", new InteropSDefT(once_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("reverse_bagof_IsImportFailed_1_0", new InteropSDefT(reverse_bagof_$Is$Import$Failed_1_0.instance, context));
    varScope.addSVar("bagof_IsImportFailed_0_0", new InteropSDefT(bagof_$Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("IsImportFailed_0_0", new InteropSDefT($Is$Import$Failed_0_0.instance, context));
    varScope.addSVar("aux_IsImportFailed_0_2", new InteropSDefT(aux_$Is$Import$Failed_0_2.instance, context));
    varScope.addSVar("innermost_scope_DeclarationFile_1_0", new InteropSDefT(innermost_scope_$Declaration$File_1_0.instance, context));
    varScope.addSVar("undefine_DeclarationFile_0_1", new InteropSDefT(undefine_$Declaration$File_0_1.instance, context));
    varScope.addSVar("throw_DeclarationFile_1_1", new InteropSDefT(throw_$Declaration$File_1_1.instance, context));
    varScope.addSVar("continue_to_label_DeclarationFile_0_1", new InteropSDefT(continue_to_label_$Declaration$File_0_1.instance, context));
    varScope.addSVar("continue_DeclarationFile_0_0", new InteropSDefT(continue_$Declaration$File_0_0.instance, context));
    varScope.addSVar("break_bp_DeclarationFile_0_0", new InteropSDefT(break_bp_$Declaration$File_0_0.instance, context));
    varScope.addSVar("break_to_label_DeclarationFile_0_1", new InteropSDefT(break_to_label_$Declaration$File_0_1.instance, context));
    varScope.addSVar("break_DeclarationFile_0_0", new InteropSDefT(break_$Declaration$File_0_0.instance, context));
    varScope.addSVar("all_keys_DeclarationFile_0_0", new InteropSDefT(all_keys_$Declaration$File_0_0.instance, context));
    varScope.addSVar("bigfold_DeclarationFile_1_0", new InteropSDefT(bigfold_$Declaration$File_1_0.instance, context));
    varScope.addSVar("fold_DeclarationFile_1_0", new InteropSDefT(fold_$Declaration$File_1_0.instance, context));
    varScope.addSVar("bigchain_DeclarationFile_0_0", new InteropSDefT(bigchain_$Declaration$File_0_0.instance, context));
    varScope.addSVar("chain_DeclarationFile_0_0", new InteropSDefT(chain_$Declaration$File_0_0.instance, context));
    varScope.addSVar("bigbagof_DeclarationFile_0_0", new InteropSDefT(bigbagof_$Declaration$File_0_0.instance, context));
    varScope.addSVar("once_DeclarationFile_0_0", new InteropSDefT(once_$Declaration$File_0_0.instance, context));
    varScope.addSVar("reverse_bagof_DeclarationFile_1_0", new InteropSDefT(reverse_bagof_$Declaration$File_1_0.instance, context));
    varScope.addSVar("bagof_DeclarationFile_0_0", new InteropSDefT(bagof_$Declaration$File_0_0.instance, context));
    varScope.addSVar("DeclarationFile_0_0", new InteropSDefT($Declaration$File_0_0.instance, context));
    varScope.addSVar("aux_DeclarationFile_0_2", new InteropSDefT(aux_$Declaration$File_0_2.instance, context));
    varScope.addSVar("innermost_scope_Declaration_1_0", new InteropSDefT(innermost_scope_$Declaration_1_0.instance, context));
    varScope.addSVar("undefine_Declaration_0_1", new InteropSDefT(undefine_$Declaration_0_1.instance, context));
    varScope.addSVar("throw_Declaration_1_1", new InteropSDefT(throw_$Declaration_1_1.instance, context));
    varScope.addSVar("continue_to_label_Declaration_0_1", new InteropSDefT(continue_to_label_$Declaration_0_1.instance, context));
    varScope.addSVar("continue_Declaration_0_0", new InteropSDefT(continue_$Declaration_0_0.instance, context));
    varScope.addSVar("break_bp_Declaration_0_0", new InteropSDefT(break_bp_$Declaration_0_0.instance, context));
    varScope.addSVar("break_to_label_Declaration_0_1", new InteropSDefT(break_to_label_$Declaration_0_1.instance, context));
    varScope.addSVar("break_Declaration_0_0", new InteropSDefT(break_$Declaration_0_0.instance, context));
    varScope.addSVar("all_keys_Declaration_0_0", new InteropSDefT(all_keys_$Declaration_0_0.instance, context));
    varScope.addSVar("bigfold_Declaration_1_0", new InteropSDefT(bigfold_$Declaration_1_0.instance, context));
    varScope.addSVar("fold_Declaration_1_0", new InteropSDefT(fold_$Declaration_1_0.instance, context));
    varScope.addSVar("bigchain_Declaration_0_0", new InteropSDefT(bigchain_$Declaration_0_0.instance, context));
    varScope.addSVar("chain_Declaration_0_0", new InteropSDefT(chain_$Declaration_0_0.instance, context));
    varScope.addSVar("bigbagof_Declaration_0_0", new InteropSDefT(bigbagof_$Declaration_0_0.instance, context));
    varScope.addSVar("once_Declaration_0_0", new InteropSDefT(once_$Declaration_0_0.instance, context));
    varScope.addSVar("reverse_bagof_Declaration_1_0", new InteropSDefT(reverse_bagof_$Declaration_1_0.instance, context));
    varScope.addSVar("bagof_Declaration_0_0", new InteropSDefT(bagof_$Declaration_0_0.instance, context));
    varScope.addSVar("Declaration_0_0", new InteropSDefT($Declaration_0_0.instance, context));
    varScope.addSVar("aux_Declaration_0_2", new InteropSDefT(aux_$Declaration_0_2.instance, context));
    varScope.addSVar("innermost_scope_Usage_1_0", new InteropSDefT(innermost_scope_$Usage_1_0.instance, context));
    varScope.addSVar("undefine_Usage_0_1", new InteropSDefT(undefine_$Usage_0_1.instance, context));
    varScope.addSVar("throw_Usage_1_1", new InteropSDefT(throw_$Usage_1_1.instance, context));
    varScope.addSVar("continue_to_label_Usage_0_1", new InteropSDefT(continue_to_label_$Usage_0_1.instance, context));
    varScope.addSVar("continue_Usage_0_0", new InteropSDefT(continue_$Usage_0_0.instance, context));
    varScope.addSVar("break_bp_Usage_0_0", new InteropSDefT(break_bp_$Usage_0_0.instance, context));
    varScope.addSVar("break_to_label_Usage_0_1", new InteropSDefT(break_to_label_$Usage_0_1.instance, context));
    varScope.addSVar("break_Usage_0_0", new InteropSDefT(break_$Usage_0_0.instance, context));
    varScope.addSVar("all_keys_Usage_0_0", new InteropSDefT(all_keys_$Usage_0_0.instance, context));
    varScope.addSVar("bigfold_Usage_1_0", new InteropSDefT(bigfold_$Usage_1_0.instance, context));
    varScope.addSVar("fold_Usage_1_0", new InteropSDefT(fold_$Usage_1_0.instance, context));
    varScope.addSVar("bigchain_Usage_0_0", new InteropSDefT(bigchain_$Usage_0_0.instance, context));
    varScope.addSVar("chain_Usage_0_0", new InteropSDefT(chain_$Usage_0_0.instance, context));
    varScope.addSVar("bigbagof_Usage_0_0", new InteropSDefT(bigbagof_$Usage_0_0.instance, context));
    varScope.addSVar("once_Usage_0_0", new InteropSDefT(once_$Usage_0_0.instance, context));
    varScope.addSVar("reverse_bagof_Usage_1_0", new InteropSDefT(reverse_bagof_$Usage_1_0.instance, context));
    varScope.addSVar("bagof_Usage_0_0", new InteropSDefT(bagof_$Usage_0_0.instance, context));
    varScope.addSVar("Usage_0_0", new InteropSDefT($Usage_0_0.instance, context));
    varScope.addSVar("aux_Usage_0_2", new InteropSDefT(aux_$Usage_0_2.instance, context));
  }

  private void registerLazy(org.spoofax.interpreter.core.IContext context, Context compiledContext, ClassLoader classLoader, org.spoofax.interpreter.core.VarScope varScope)
  { 
    compiledContext.registerComponent("trans");
    trans.init(compiledContext);
    varScope.addSVar("parse_file_0_0", new InteropSDefT(classLoader, "trans.parse_file_0_0", context));
    varScope.addSVar("parse_sdf_file_0_0", new InteropSDefT(classLoader, "trans.parse_sdf_file_0_0", context));
    varScope.addSVar("parse_string_0_0", new InteropSDefT(classLoader, "trans.parse_string_0_0", context));
    varScope.addSVar("parse_sdf_string_0_0", new InteropSDefT(classLoader, "trans.parse_sdf_string_0_0", context));
    varScope.addSVar("parse_stream_0_0", new InteropSDefT(classLoader, "trans.parse_stream_0_0", context));
    varScope.addSVar("parse_sdf_stream_0_0", new InteropSDefT(classLoader, "trans.parse_sdf_stream_0_0", context));
    varScope.addSVar("open_import_3_0", new InteropSDefT(classLoader, "trans.open_import_3_0", context));
    varScope.addSVar("open_wildcard_import_4_0", new InteropSDefT(classLoader, "trans.open_wildcard_import_4_0", context));
    varScope.addSVar("import_cache_path_0_0", new InteropSDefT(classLoader, "trans.import_cache_path_0_0", context));
    varScope.addSVar("project_path_0_0", new InteropSDefT(classLoader, "trans.project_path_0_0", context));
    varScope.addSVar("plugin_path_0_0", new InteropSDefT(classLoader, "trans.plugin_path_0_0", context));
    varScope.addSVar("candidate_sorts_0_0", new InteropSDefT(classLoader, "trans.candidate_sorts_0_0", context));
    varScope.addSVar("is_newer_0_0", new InteropSDefT(classLoader, "trans.is_newer_0_0", context));
    varScope.addSVar("editor_init_0_0", new InteropSDefT(classLoader, "trans.editor_init_0_0", context));
    varScope.addSVar("refresh_workspace_file_0_0", new InteropSDefT(classLoader, "trans.refresh_workspace_file_0_0", context));
    varScope.addSVar("string_starts_with_capital_0_0", new InteropSDefT(classLoader, "trans.string_starts_with_capital_0_0", context));
    varScope.addSVar("origin_term_0_0", new InteropSDefT(classLoader, "trans.origin_term_0_0", context));
    varScope.addSVar("origin_text_0_0", new InteropSDefT(classLoader, "trans.origin_text_0_0", context));
    varScope.addSVar("origin_offset_0_0", new InteropSDefT(classLoader, "trans.origin_offset_0_0", context));
    varScope.addSVar("origin_location_0_0", new InteropSDefT(classLoader, "trans.origin_location_0_0", context));
    varScope.addSVar("origin_line_0_0", new InteropSDefT(classLoader, "trans.origin_line_0_0", context));
    varScope.addSVar("origin_column_0_0", new InteropSDefT(classLoader, "trans.origin_column_0_0", context));
    varScope.addSVar("origin_strip_0_0", new InteropSDefT(classLoader, "trans.origin_strip_0_0", context));
    varScope.addSVar("origin_equal_0_1", new InteropSDefT(classLoader, "trans.origin_equal_0_1", context));
    varScope.addSVar("origin_surrounding_comments_0_0", new InteropSDefT(classLoader, "trans.origin_surrounding_comments_0_0", context));
    varScope.addSVar("origin_documentation_comment_0_0", new InteropSDefT(classLoader, "trans.origin_documentation_comment_0_0", context));
    varScope.addSVar("documentation_comment_chars_0_0", new InteropSDefT(classLoader, "trans.documentation_comment_chars_0_0", context));
    varScope.addSVar("origin_track_forced_1_0", new InteropSDefT(classLoader, "trans.origin_track_forced_1_0", context));
    varScope.addSVar("desugar_position_1_1", new InteropSDefT(classLoader, "trans.desugar_position_1_1", context));
    varScope.addSVar("at_position_1_1", new InteropSDefT(classLoader, "trans.at_position_1_1", context));
    varScope.addSVar("position_of_term_1_0", new InteropSDefT(classLoader, "trans.position_of_term_1_0", context));
    varScope.addSVar("position_of_term_1_1", new InteropSDefT(classLoader, "trans.position_of_term_1_1", context));
    varScope.addSVar("term_at_position_0_1", new InteropSDefT(classLoader, "trans.term_at_position_0_1", context));
    varScope.addSVar("parent_at_position_0_1", new InteropSDefT(classLoader, "trans.parent_at_position_0_1", context));
    varScope.addSVar("subterm_at_0_1", new InteropSDefT(classLoader, "trans.subterm_at_0_1", context));
    varScope.addSVar("set_markers_0_1", new InteropSDefT(classLoader, "trans.set_markers_0_1", context));
    varScope.addSVar("queue_analysis_0_0", new InteropSDefT(classLoader, "trans.queue_analysis_0_0", context));
    varScope.addSVar("set_total_work_units_0_0", new InteropSDefT(classLoader, "trans.set_total_work_units_0_0", context));
    varScope.addSVar("complete_work_unit_0_0", new InteropSDefT(classLoader, "trans.complete_work_unit_0_0", context));
    varScope.addSVar("queue_strategy_0_2", new InteropSDefT(classLoader, "trans.queue_strategy_0_2", context));
    varScope.addSVar("set_analysis_backgrounded_0_0", new InteropSDefT(classLoader, "trans.set_analysis_backgrounded_0_0", context));
    varScope.addSVar("generate_syntax_templates_0_0", new InteropSDefT(classLoader, "trans.generate_syntax_templates_0_0", context));
    varScope.addSVar("prod_to_template_0_0", new InteropSDefT(classLoader, "trans.prod_to_template_0_0", context));
    varScope.addSVar("pp_cons_0_0", new InteropSDefT(classLoader, "trans.pp_cons_0_0", context));
    varScope.addSVar("pp_attrs_0_0", new InteropSDefT(classLoader, "trans.pp_attrs_0_0", context));
    varScope.addSVar("pp_attr_0_0", new InteropSDefT(classLoader, "trans.pp_attr_0_0", context));
    varScope.addSVar("pp_assoc_0_0", new InteropSDefT(classLoader, "trans.pp_assoc_0_0", context));
    varScope.addSVar("get_delimiters_0_0", new InteropSDefT(classLoader, "trans.get_delimiters_0_0", context));
    varScope.addSVar("sym_to_template_elem_0_2", new InteropSDefT(classLoader, "trans.sym_to_template_elem_0_2", context));
    varScope.addSVar("analyze_ast_0_0", new InteropSDefT(classLoader, "trans.analyze_ast_0_0", context));
    varScope.addSVar("declare_globals_top_0_0", new InteropSDefT(classLoader, "trans.declare_globals_top_0_0", context));
    varScope.addSVar("declare_globals_0_0", new InteropSDefT(classLoader, "trans.declare_globals_0_0", context));
    varScope.addSVar("resolve_import_0_0", new InteropSDefT(classLoader, "trans.resolve_import_0_0", context));
    varScope.addSVar("declare_simple_global_0_0", new InteropSDefT(classLoader, "trans.declare_simple_global_0_0", context));
    varScope.addSVar("declare_use_0_0", new InteropSDefT(classLoader, "trans.declare_use_0_0", context));
    varScope.addSVar("propose_completion_0_0", new InteropSDefT(classLoader, "trans.propose_completion_0_0", context));
    varScope.addSVar("editor_analyze_0_0", new InteropSDefT(classLoader, "trans.editor_analyze_0_0", context));
    varScope.addSVar("fetch_sdf_errors_0_0", new InteropSDefT(classLoader, "trans.fetch_sdf_errors_0_0", context));
    varScope.addSVar("fetch_sdf_warnings_0_0", new InteropSDefT(classLoader, "trans.fetch_sdf_warnings_0_0", context));
    varScope.addSVar("editor_complete_0_0", new InteropSDefT(classLoader, "trans.editor_complete_0_0", context));
    varScope.addSVar("editor_resolve_0_0", new InteropSDefT(classLoader, "trans.editor_resolve_0_0", context));
    varScope.addSVar("context_free_syntax_sort_error_0_0", new InteropSDefT(classLoader, "trans.context_free_syntax_sort_error_0_0", context));
    varScope.addSVar("lexical_syntax_error_0_0", new InteropSDefT(classLoader, "trans.lexical_syntax_error_0_0", context));
    varScope.addSVar("context_free_syntax_warning_0_0_fragment_4", new InteropSDefT(classLoader, "trans.context_free_syntax_warning_0_0_fragment_4", context));
    varScope.addSVar("context_free_syntax_warning_0_0_fragment_3", new InteropSDefT(classLoader, "trans.context_free_syntax_warning_0_0_fragment_3", context));
    varScope.addSVar("context_free_syntax_warning_0_0", new InteropSDefT(classLoader, "trans.context_free_syntax_warning_0_0", context));
    varScope.addSVar("lexical_syntax_warning_0_0", new InteropSDefT(classLoader, "trans.lexical_syntax_warning_0_0", context));
    varScope.addSVar("context_free_syntax_error_0_0", new InteropSDefT(classLoader, "trans.context_free_syntax_error_0_0", context));
    varScope.addSVar("is_non_terminal_0_0", new InteropSDefT(classLoader, "trans.is_non_terminal_0_0", context));
    varScope.addSVar("is_iter_0_0", new InteropSDefT(classLoader, "trans.is_iter_0_0", context));
    varScope.addSVar("generate_pp_rules_0_0", new InteropSDefT(classLoader, "trans.generate_pp_rules_0_0", context));
    varScope.addSVar("generate_rtg_0_0", new InteropSDefT(classLoader, "trans.generate_rtg_0_0", context));
    varScope.addSVar("generate_aterm_0_0", new InteropSDefT(classLoader, "trans.generate_aterm_0_0", context));
    varScope.addSVar("add_context_0_0", new InteropSDefT(classLoader, "trans.add_context_0_0", context));
    varScope.addSVar("ppgenerate_0_0", new InteropSDefT(classLoader, "trans.ppgenerate_0_0", context));
    varScope.addSVar("core_rtg2sig_0_0", new InteropSDefT(classLoader, "trans.core_rtg2sig_0_0", context));
    varScope.addSVar("pp_pp_table_0_0", new InteropSDefT(classLoader, "trans.pp_pp_table_0_0", context));
    varScope.addSVar("sdf_desugar_0_0", new InteropSDefT(classLoader, "trans.sdf_desugar_0_0", context));
    varScope.addSVar("COMPLETION_1_0", new InteropSDefT(classLoader, "trans.$C$O$M$P$L$E$T$I$O$N_1_0", context));
    varScope.addSVar("NOCONTEXT_1_0", new InteropSDefT(classLoader, "trans.$N$O$C$O$N$T$E$X$T_1_0", context));
    varScope.addSVar("MARKER_0_0", new InteropSDefT(classLoader, "trans.$M$A$R$K$E$R_0_0", context));
    varScope.addSVar("Entity_2_0", new InteropSDefT(classLoader, "trans.$Entity_2_0", context));
    varScope.addSVar("Property_2_0", new InteropSDefT(classLoader, "trans.$Property_2_0", context));
    varScope.addSVar("Type_1_0", new InteropSDefT(classLoader, "trans.$Type_1_0", context));
    varScope.addSVar("CONS_1_0", new InteropSDefT(classLoader, "trans.$C$O$N$S_1_0", context));
    varScope.addSVar("innermost_scope_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$File_1_0", context));
    varScope.addSVar("DYNAMIC__CALLS_0_0", new InteropSDefT(classLoader, "trans.$D$Y$N$A$M$I$C__$C$A$L$L$S_0_0", context));
    varScope.addSVar("undefine_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$File_0_1", context));
    varScope.addSVar("throw_CurrentFile_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$File_1_1", context));
    varScope.addSVar("continue_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$File_0_1", context));
    varScope.addSVar("continue_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$File_0_0", context));
    varScope.addSVar("break_bp_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$File_0_0", context));
    varScope.addSVar("break_to_label_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$File_0_1", context));
    varScope.addSVar("break_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.break_$Current$File_0_0", context));
    varScope.addSVar("all_keys_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$File_0_0", context));
    varScope.addSVar("bigfold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$File_1_0", context));
    varScope.addSVar("fold_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$File_1_0", context));
    varScope.addSVar("bigchain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$File_0_0", context));
    varScope.addSVar("chain_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$File_0_0", context));
    varScope.addSVar("bigbagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$File_0_0", context));
    varScope.addSVar("once_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.once_$Current$File_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentFile_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$File_1_0", context));
    varScope.addSVar("bagof_CurrentFile_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$File_0_0", context));
    varScope.addSVar("CurrentFile_0_0", new InteropSDefT(classLoader, "trans.$Current$File_0_0", context));
    varScope.addSVar("aux_CurrentFile_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$File_0_1", context));
    varScope.addSVar("innermost_scope_IsImported_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Imported_1_0", context));
    varScope.addSVar("undefine_IsImported_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Imported_0_1", context));
    varScope.addSVar("throw_IsImported_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Imported_1_1", context));
    varScope.addSVar("continue_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("continue_IsImported_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Imported_0_0", context));
    varScope.addSVar("break_bp_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Imported_0_0", context));
    varScope.addSVar("break_to_label_IsImported_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Imported_0_1", context));
    varScope.addSVar("break_IsImported_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Imported_0_0", context));
    varScope.addSVar("all_keys_IsImported_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Imported_0_0", context));
    varScope.addSVar("bigfold_IsImported_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Imported_1_0", context));
    varScope.addSVar("fold_IsImported_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Imported_1_0", context));
    varScope.addSVar("bigchain_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Imported_0_0", context));
    varScope.addSVar("chain_IsImported_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Imported_0_0", context));
    varScope.addSVar("bigbagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Imported_0_0", context));
    varScope.addSVar("once_IsImported_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Imported_0_0", context));
    varScope.addSVar("reverse_bagof_IsImported_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Imported_1_0", context));
    varScope.addSVar("bagof_IsImported_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Imported_0_0", context));
    varScope.addSVar("IsImported_0_0", new InteropSDefT(classLoader, "trans.$Is$Imported_0_0", context));
    varScope.addSVar("aux_IsImported_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Imported_0_2", context));
    varScope.addSVar("innermost_scope_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Project$Dir_1_0", context));
    varScope.addSVar("undefine_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.undefine_$Project$Dir_0_1", context));
    varScope.addSVar("throw_ProjectDir_1_1", new InteropSDefT(classLoader, "trans.throw_$Project$Dir_1_1", context));
    varScope.addSVar("continue_to_label_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Project$Dir_0_1", context));
    varScope.addSVar("continue_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.continue_$Project$Dir_0_0", context));
    varScope.addSVar("break_bp_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Project$Dir_0_0", context));
    varScope.addSVar("break_to_label_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Project$Dir_0_1", context));
    varScope.addSVar("break_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.break_$Project$Dir_0_0", context));
    varScope.addSVar("all_keys_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Project$Dir_0_0", context));
    varScope.addSVar("bigfold_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Project$Dir_1_0", context));
    varScope.addSVar("fold_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.fold_$Project$Dir_1_0", context));
    varScope.addSVar("bigchain_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Project$Dir_0_0", context));
    varScope.addSVar("chain_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.chain_$Project$Dir_0_0", context));
    varScope.addSVar("bigbagof_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Project$Dir_0_0", context));
    varScope.addSVar("once_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.once_$Project$Dir_0_0", context));
    varScope.addSVar("reverse_bagof_ProjectDir_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Project$Dir_1_0", context));
    varScope.addSVar("bagof_ProjectDir_0_0", new InteropSDefT(classLoader, "trans.bagof_$Project$Dir_0_0", context));
    varScope.addSVar("ProjectDir_0_0", new InteropSDefT(classLoader, "trans.$Project$Dir_0_0", context));
    varScope.addSVar("aux_ProjectDir_0_1", new InteropSDefT(classLoader, "trans.aux_$Project$Dir_0_1", context));
    varScope.addSVar("innermost_scope_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Current$Dir_1_0", context));
    varScope.addSVar("undefine_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.undefine_$Current$Dir_0_1", context));
    varScope.addSVar("throw_CurrentDir_1_1", new InteropSDefT(classLoader, "trans.throw_$Current$Dir_1_1", context));
    varScope.addSVar("continue_to_label_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Current$Dir_0_1", context));
    varScope.addSVar("continue_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.continue_$Current$Dir_0_0", context));
    varScope.addSVar("break_bp_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Current$Dir_0_0", context));
    varScope.addSVar("break_to_label_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Current$Dir_0_1", context));
    varScope.addSVar("break_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.break_$Current$Dir_0_0", context));
    varScope.addSVar("all_keys_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Current$Dir_0_0", context));
    varScope.addSVar("bigfold_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Current$Dir_1_0", context));
    varScope.addSVar("fold_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.fold_$Current$Dir_1_0", context));
    varScope.addSVar("bigchain_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Current$Dir_0_0", context));
    varScope.addSVar("chain_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.chain_$Current$Dir_0_0", context));
    varScope.addSVar("bigbagof_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Current$Dir_0_0", context));
    varScope.addSVar("once_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.once_$Current$Dir_0_0", context));
    varScope.addSVar("reverse_bagof_CurrentDir_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Current$Dir_1_0", context));
    varScope.addSVar("bagof_CurrentDir_0_0", new InteropSDefT(classLoader, "trans.bagof_$Current$Dir_0_0", context));
    varScope.addSVar("CurrentDir_0_0", new InteropSDefT(classLoader, "trans.$Current$Dir_0_0", context));
    varScope.addSVar("aux_CurrentDir_0_1", new InteropSDefT(classLoader, "trans.aux_$Current$Dir_0_1", context));
    varScope.addSVar("innermost_scope_IsImportFailed_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Is$Import$Failed_1_0", context));
    varScope.addSVar("undefine_IsImportFailed_0_1", new InteropSDefT(classLoader, "trans.undefine_$Is$Import$Failed_0_1", context));
    varScope.addSVar("throw_IsImportFailed_1_1", new InteropSDefT(classLoader, "trans.throw_$Is$Import$Failed_1_1", context));
    varScope.addSVar("continue_to_label_IsImportFailed_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Is$Import$Failed_0_1", context));
    varScope.addSVar("continue_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.continue_$Is$Import$Failed_0_0", context));
    varScope.addSVar("break_bp_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Is$Import$Failed_0_0", context));
    varScope.addSVar("break_to_label_IsImportFailed_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Is$Import$Failed_0_1", context));
    varScope.addSVar("break_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.break_$Is$Import$Failed_0_0", context));
    varScope.addSVar("all_keys_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Is$Import$Failed_0_0", context));
    varScope.addSVar("bigfold_IsImportFailed_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Is$Import$Failed_1_0", context));
    varScope.addSVar("fold_IsImportFailed_1_0", new InteropSDefT(classLoader, "trans.fold_$Is$Import$Failed_1_0", context));
    varScope.addSVar("bigchain_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Is$Import$Failed_0_0", context));
    varScope.addSVar("chain_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.chain_$Is$Import$Failed_0_0", context));
    varScope.addSVar("bigbagof_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Is$Import$Failed_0_0", context));
    varScope.addSVar("once_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.once_$Is$Import$Failed_0_0", context));
    varScope.addSVar("reverse_bagof_IsImportFailed_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Is$Import$Failed_1_0", context));
    varScope.addSVar("bagof_IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.bagof_$Is$Import$Failed_0_0", context));
    varScope.addSVar("IsImportFailed_0_0", new InteropSDefT(classLoader, "trans.$Is$Import$Failed_0_0", context));
    varScope.addSVar("aux_IsImportFailed_0_2", new InteropSDefT(classLoader, "trans.aux_$Is$Import$Failed_0_2", context));
    varScope.addSVar("innermost_scope_DeclarationFile_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Declaration$File_1_0", context));
    varScope.addSVar("undefine_DeclarationFile_0_1", new InteropSDefT(classLoader, "trans.undefine_$Declaration$File_0_1", context));
    varScope.addSVar("throw_DeclarationFile_1_1", new InteropSDefT(classLoader, "trans.throw_$Declaration$File_1_1", context));
    varScope.addSVar("continue_to_label_DeclarationFile_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Declaration$File_0_1", context));
    varScope.addSVar("continue_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.continue_$Declaration$File_0_0", context));
    varScope.addSVar("break_bp_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Declaration$File_0_0", context));
    varScope.addSVar("break_to_label_DeclarationFile_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Declaration$File_0_1", context));
    varScope.addSVar("break_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.break_$Declaration$File_0_0", context));
    varScope.addSVar("all_keys_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Declaration$File_0_0", context));
    varScope.addSVar("bigfold_DeclarationFile_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Declaration$File_1_0", context));
    varScope.addSVar("fold_DeclarationFile_1_0", new InteropSDefT(classLoader, "trans.fold_$Declaration$File_1_0", context));
    varScope.addSVar("bigchain_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Declaration$File_0_0", context));
    varScope.addSVar("chain_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.chain_$Declaration$File_0_0", context));
    varScope.addSVar("bigbagof_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Declaration$File_0_0", context));
    varScope.addSVar("once_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.once_$Declaration$File_0_0", context));
    varScope.addSVar("reverse_bagof_DeclarationFile_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Declaration$File_1_0", context));
    varScope.addSVar("bagof_DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.bagof_$Declaration$File_0_0", context));
    varScope.addSVar("DeclarationFile_0_0", new InteropSDefT(classLoader, "trans.$Declaration$File_0_0", context));
    varScope.addSVar("aux_DeclarationFile_0_2", new InteropSDefT(classLoader, "trans.aux_$Declaration$File_0_2", context));
    varScope.addSVar("innermost_scope_Declaration_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Declaration_1_0", context));
    varScope.addSVar("undefine_Declaration_0_1", new InteropSDefT(classLoader, "trans.undefine_$Declaration_0_1", context));
    varScope.addSVar("throw_Declaration_1_1", new InteropSDefT(classLoader, "trans.throw_$Declaration_1_1", context));
    varScope.addSVar("continue_to_label_Declaration_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Declaration_0_1", context));
    varScope.addSVar("continue_Declaration_0_0", new InteropSDefT(classLoader, "trans.continue_$Declaration_0_0", context));
    varScope.addSVar("break_bp_Declaration_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Declaration_0_0", context));
    varScope.addSVar("break_to_label_Declaration_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Declaration_0_1", context));
    varScope.addSVar("break_Declaration_0_0", new InteropSDefT(classLoader, "trans.break_$Declaration_0_0", context));
    varScope.addSVar("all_keys_Declaration_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Declaration_0_0", context));
    varScope.addSVar("bigfold_Declaration_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Declaration_1_0", context));
    varScope.addSVar("fold_Declaration_1_0", new InteropSDefT(classLoader, "trans.fold_$Declaration_1_0", context));
    varScope.addSVar("bigchain_Declaration_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Declaration_0_0", context));
    varScope.addSVar("chain_Declaration_0_0", new InteropSDefT(classLoader, "trans.chain_$Declaration_0_0", context));
    varScope.addSVar("bigbagof_Declaration_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Declaration_0_0", context));
    varScope.addSVar("once_Declaration_0_0", new InteropSDefT(classLoader, "trans.once_$Declaration_0_0", context));
    varScope.addSVar("reverse_bagof_Declaration_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Declaration_1_0", context));
    varScope.addSVar("bagof_Declaration_0_0", new InteropSDefT(classLoader, "trans.bagof_$Declaration_0_0", context));
    varScope.addSVar("Declaration_0_0", new InteropSDefT(classLoader, "trans.$Declaration_0_0", context));
    varScope.addSVar("aux_Declaration_0_2", new InteropSDefT(classLoader, "trans.aux_$Declaration_0_2", context));
    varScope.addSVar("innermost_scope_Usage_1_0", new InteropSDefT(classLoader, "trans.innermost_scope_$Usage_1_0", context));
    varScope.addSVar("undefine_Usage_0_1", new InteropSDefT(classLoader, "trans.undefine_$Usage_0_1", context));
    varScope.addSVar("throw_Usage_1_1", new InteropSDefT(classLoader, "trans.throw_$Usage_1_1", context));
    varScope.addSVar("continue_to_label_Usage_0_1", new InteropSDefT(classLoader, "trans.continue_to_label_$Usage_0_1", context));
    varScope.addSVar("continue_Usage_0_0", new InteropSDefT(classLoader, "trans.continue_$Usage_0_0", context));
    varScope.addSVar("break_bp_Usage_0_0", new InteropSDefT(classLoader, "trans.break_bp_$Usage_0_0", context));
    varScope.addSVar("break_to_label_Usage_0_1", new InteropSDefT(classLoader, "trans.break_to_label_$Usage_0_1", context));
    varScope.addSVar("break_Usage_0_0", new InteropSDefT(classLoader, "trans.break_$Usage_0_0", context));
    varScope.addSVar("all_keys_Usage_0_0", new InteropSDefT(classLoader, "trans.all_keys_$Usage_0_0", context));
    varScope.addSVar("bigfold_Usage_1_0", new InteropSDefT(classLoader, "trans.bigfold_$Usage_1_0", context));
    varScope.addSVar("fold_Usage_1_0", new InteropSDefT(classLoader, "trans.fold_$Usage_1_0", context));
    varScope.addSVar("bigchain_Usage_0_0", new InteropSDefT(classLoader, "trans.bigchain_$Usage_0_0", context));
    varScope.addSVar("chain_Usage_0_0", new InteropSDefT(classLoader, "trans.chain_$Usage_0_0", context));
    varScope.addSVar("bigbagof_Usage_0_0", new InteropSDefT(classLoader, "trans.bigbagof_$Usage_0_0", context));
    varScope.addSVar("once_Usage_0_0", new InteropSDefT(classLoader, "trans.once_$Usage_0_0", context));
    varScope.addSVar("reverse_bagof_Usage_1_0", new InteropSDefT(classLoader, "trans.reverse_bagof_$Usage_1_0", context));
    varScope.addSVar("bagof_Usage_0_0", new InteropSDefT(classLoader, "trans.bagof_$Usage_0_0", context));
    varScope.addSVar("Usage_0_0", new InteropSDefT(classLoader, "trans.$Usage_0_0", context));
    varScope.addSVar("aux_Usage_0_2", new InteropSDefT(classLoader, "trans.aux_$Usage_0_2", context));
  }
}