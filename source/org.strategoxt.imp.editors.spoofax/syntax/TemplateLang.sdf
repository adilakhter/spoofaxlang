module TemplateLang
imports
  SPXCommon

exports
  context-free start-symbols
    %% for testing
    SdfProduction TemplateProduction Template

  context-free syntax
    %% tweaks for content completion
    CONTENTCOMPLETE -> TemplateProduction {recover, cons("WATER")}
    CONTENTCOMPLETE -> PlaceholderOption  {recover, cons("WATER")}
    CONTENTCOMPLETE -> PlaceholderOptions {recover, cons("WATER")}

  context-free syntax
    %% options section
    "template" "options" TemplateOption* -> Section {cons("TemplateOptions")}

    "newlines" ":" NewlineOptionValue -> TemplateOption {cons("Newlines")}

    "none"       -> NewlineOptionValue {cons("None")}
    "leading"    -> NewlineOptionValue {cons("Leading")}
    "trailing"   -> NewlineOptionValue {cons("Trailing")}
    "separating" -> NewlineOptionValue {cons("Separating")}

    "keyword" "-/-" Lookaheads[[SDF]] -> TemplateOption {cons("KeywordFollowRestriction")}

  context-free syntax
    %% references to productions using sort.cons notation in priority specification
    SortCons                                   -> Group[[SDF]]  {cons("simple-ref-group")}
    "{" SortCons+ "}"                          -> Group[[SDF]]  {cons("prods-ref-group")}
    "{" Associativity[[SDF]] ":" SortCons+ "}" -> Group[[SDF]]  {cons("assoc-ref-group")}

  context-free syntax
    %% "grammars"
    "templates" TemplateProduction* -> Section {cons("TemplateSection")}

    %% BNF order and SDF order can't go together in the same section,
    %% because of ambiguity. "X = Y -> Z": is it "X = Y" "Z" or "X =" "Y -> Z"?
    "lexical" "syntax"      SdfProduction* -> Grammar[[SDF]] {cons("lexical-syntax")}
    "context-free" "syntax" SdfProduction* -> Grammar[[SDF]] {cons("context-free-syntax")}

    %% syntactic sugar for SDF
    ID "=" Symbols[[SDF]] Attributes[[SDF]]       -> SdfProduction {cons("SdfProduction")}
    SortCons "=" Symbols[[SDF]] Attributes[[SDF]] -> SdfProduction {cons("SdfProductionWithCons")}

    %% template productions
    ID "=" Template Attributes[[SDF]] -> TemplateProduction {cons("TemplateProduction")}

    %% template productions `sort.cons = ...'
    SortCons "=" Template Attributes[[SDF]] -> TemplateProduction {cons("TemplateProductionWithCons")}

    ID "." ID -> SortCons {cons("SortCons")}

    %% placeholders
    "<" Placeholder ">" -> TemplatePart1 {bracket}
    "[" Placeholder "]" -> TemplatePart2 {bracket}
    PlaceholderSort PlaceholderSuffix PlaceholderOptions -> Placeholder {cons("Placeholder")}

    %% constructor identical to SDF sort to simplify some transformations
    ID -> PlaceholderSort {cons("sort")}

        -> PlaceholderSuffix {cons("None")}
    "*" -> PlaceholderSuffix {cons("Star")}
    "+" -> PlaceholderSuffix {cons("Plus")}
    "?" -> PlaceholderSuffix {cons("Option")}

                                 -> PlaceholderOptions {cons("NoOptions")}
    ";" {PlaceholderOption ","}+ -> PlaceholderOptions {cons("Options")}

    "hide"                 -> PlaceholderOption {cons("Hide")}
    "wrap"                 -> PlaceholderOption {cons("Wrap")}
    "anchor"               -> PlaceholderOption {cons("Anchor")}
    "separator" "=" STRING -> PlaceholderOption {cons("Separator")}
    "text" "=" STRING      -> PlaceholderOption {cons("Text")}

  syntax
    %% template parts
    "<" {<TemplateLine1-CF> "\n"}+ ">" -> <Template-CF> {cons("Template")}
    "<<" {<TemplateLine1-CF> "\n"}+ ">>" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart1-CF>* -> <TemplateLine1-CF> {cons("Line")}
    <TemplateString1-LEX> -> <TemplatePart1-CF> {cons("String")}
    <TemplateEscape1-LEX> -> <TemplatePart1-CF> {cons("Escape")}
    <TemplateLayout-LEX>  -> <TemplatePart1-CF> {cons("Layout")}

    "[" {<TemplateLine2-CF> "\n"}+ "]" -> <Template-CF> {cons("Template")}
    "[[" {<TemplateLine2-CF> "\n"}+ "]]" -> <Template-CF> {cons("Template"), avoid, deprecated("Use single brackets to delimit the template")}
    <TemplatePart2-CF>* -> <TemplateLine2-CF> {cons("Line")}
    <TemplateString2-LEX> -> <TemplatePart2-CF> {cons("String")}
    <TemplateEscape2-LEX> -> <TemplatePart2-CF> {cons("Escape")}
    <TemplateLayout-LEX>  -> <TemplatePart2-CF> {cons("Layout")}

    %% special: no placeholders, no newlines
    '"' <TemplatePartQ-CF>* '"' -> <Template-CF> {cons("SingleLineTemplate")}
    <TemplateStringQ-LEX> -> <TemplatePartQ-CF> {cons("String")}
    <TemplateEscapeQ-LEX> -> <TemplatePartQ-CF> {cons("Escape")}
    <TemplateLayout-LEX>  -> <TemplatePartQ-CF> {cons("Layout")}

  lexical syntax
  	[\r][\n] -> "\n"
    [\ \t]+  -> TemplateLayout

    (~[\\\<\>\ \t\r\n] | Backslash1)+ -> TemplateString1
    (~[\\\[\]\ \t\r\n] | Backslash2)+ -> TemplateString2
    ~[\\\"\ \t]+                      -> TemplateStringQ

    [\\] -> Backslash1
    [\\] -> Backslash2

  lexical restrictions
    TemplateLayout -/- [\ \t]

    %% must be followed by:
    TemplateString1 -/- ~[\\\<\>\ \t\r\n]
    TemplateString2 -/- ~[\\\[\]\ \t\r\n]
    TemplateStringQ -/- ~[\\\"\ \t]

    %% if followed by a backslash, then the backslash must be followed by:
    TemplateString1 -/- [\\].~[\<\>\\]
    TemplateString2 -/- [\\].~[\[\]\\]

    Backslash1 -/- [\<\>\\]
    Backslash2 -/- [\[\]\\]

  lexical syntax
    %% combine sequences of escaped chars 
    EscapedChar1+ -> TemplateEscape1
    EscapedChar2+ -> TemplateEscape2

    %% this are the escapes which StringTemplate has
    "\\<"  -> EscapedChar1
    "\\>"  -> EscapedChar1
    "\\\\" -> EscapedChar1
    "\\["  -> EscapedChar2
    "\\]"  -> EscapedChar2
    "\\\\" -> EscapedChar2

    "<" EscapedChar* ">"    -> EscapedChar1
    "<\\\\>" [\ \t\r]* [\n] -> EscapedChar1
    "[" EscapedChar* "]"    -> EscapedChar2
    "[\\\\]" [\ \t\r]* [\n] -> EscapedChar2

    %% double-backslash isn't allowed in <<>> / [[]] templates
    %% (would clash with <\\> / [\\] line continuation construct)
    ("\\\\" | EscapedChar)+ -> TemplateEscapeQ

    %% escapes allowed in a placeholder-like construct
    "\\'" -> EscapedChar
    '\\"' -> EscapedChar
    "\\ " -> EscapedChar
    "\\t" -> EscapedChar
    "\\r" -> EscapedChar
    "\\n" -> EscapedChar

    "\\u" [0-9A-Fa-f]+ -> EscapedUnicodeChar
    EscapedUnicodeChar -> EscapedChar

    "\\" ~[]       -> EscapedChar  {recover, cons("WATER")}
    "<" ~[\>]+ ">" -> EscapedChar1 {recover, cons("WATER")}
    "[" ~[\]]+ "]" -> EscapedChar2 {recover, cons("WATER")}

  lexical restrictions
    TemplateEscape1 -/- [\\]
    TemplateEscape1 -/- [\<].[\\]
    TemplateEscape2 -/- [\\]
    TemplateEscape2 -/- [\[].[\\]
    TemplateEscapeQ -/- [\\]
    EscapedUnicodeChar -/- [0-9A-Fa-f]
