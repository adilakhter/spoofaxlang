module context/str/declare-locals
imports
	libstrc		
	libstratego-lib
 	libstratego-gpp
	libstratego-aterm
imports
	lib/editor-common.generated
	include/SpoofaxLang
imports	
	utils/sourcedir
 	utils/debug
 	utils/contract
 	utils/annotations
 	common 
	config 
imports 
	context/-
	normalize/-
	context/str/-
	spoofaxlang  
	
strategies 
  // Declarations inside definition bodies , i.e., analyzing strategies local declarations
  declare-str-local-definition-main =  declare-bodies-top 
  
  declare-bodies-top = alltd(declare-bodies)

strategies 
	// strategies to differentiate internal and public strategie or rule blocks
    
  declare-bodies: 
    InternalRules(str-defs*) -> InternalRules(analyzed-str-defs*)
    where 
    	<activate-stratego-internal-scope(
      	declare-bodies-top
    	)>str-defs*  
      => analyzed-str-defs*
       

  declare-bodies: 
    InternalStrategies(str-defs*) -> InternalStrategies(analyzed-str-defs*)
    where
	    <activate-stratego-internal-scope( 
	    	declare-bodies-top 
    	) >str-defs*  
	    => analyzed-str-defs*
             
  declare-bodies: 
    Rules(str-defs*) -> Rules(analyzed-str-defs*)
    where 
      <declare-rules(
      		declare-bodies-top
    		)>str-defs*  
    		=>analyzed-str-defs* 

  declare-bodies: 
    Strategies(str-defs*) -> Strategies(analyzed-str-defs*)
    where 
      <declare-rules(
      	declare-bodies-top
    		)
  		>str-defs*  =>analyzed-str-defs*

rules
        
  declare-bodies:
    SDefT(x, s*, t*, s) -> SDefT(x, s'*, t'*, s')
    where 
    	with-spxverify(
	      {| DeclareCookie:
	        s'* := <map(declare-svar)> s*;
	        t'* := <map(declare-tvar)> t*;
	        s'  := <declare-bodies-top> s
	      |}
   		) 

  declare-bodies:
    Let(d*, b) -> Rec(d'*, b')
    where with-spxverify(
      dr-scope-declare-cookies(
        !d*
      ,
        d'* := <map(declare-let-definition)> d*;
        b'  := <declare-bodies-top> b
      )
    )

  declare-let-definition:
    SDefT(x, s*, t*, s) -> SDefT(x', s'*, t'*, s')
    where with-spxverify(
      dr-scope-declare-cookies(
        ![s*, t*]
      ,
        x'  := x{<redeclare-definition>};
        s'* := <map(declare-svar)> s*;
        t'* := <map(declare-tvar)> t*;
        s'  := <declare-bodies-top> s
      )
    )

  declare-bodies:
    rec @ Rec(r, b) -> Rec(r', b')
    where with-spxverify(
      dr-scope-declare-cookies(
        ![rec]
      ,
        r' := r {<redeclare-definition> rec};
        b' := <declare-bodies-top> b
      )
    )

  declare-bodies:
    Overlay(x, t*, d) -> Overlay(x, t'*, d')
    where with-spxverify(
      {| DeclareCookie:
        t'* := <map(declare-tvar)> t*;
        d'  := <declare-bodies-top> d 
      |}
    )

  declare-bodies:
    ScopeDefault(s) -> ScopeDefault(s')
    where with-spxverify(
      {| DeclareCookie:
        with-spxverify(
          tvars;
          list-loop(
            {
              sig := (<id>, 0)
              ; scoped-sig := <to-scoped-symbol>sig
              ; rules(DeclareCookie :- scoped-sig)
            }
          )
        );
        s' := <declare-bodies-top> s
      |}
    )

  declare-bodies:
    Scope(v*, s) -> Scope(v*, s')
    where with-spxverify(
      {| DeclareCookie:
        <list-loop(
	          { 
	            sig := (<id>, 0)
	            ; scoped-sig:=<to-scoped-symbol> sig
	            ; rules(DeclareCookie :- scoped-sig)
	          }
          )> v*
          ;s' := <declare-bodies-top> s
      |}
    )
        
  declare-bodies:
    Match(t) -> Match(t')
    where with-spxverify(
      t' := <declare-match> t
		)
  declare-bodies:
    Rule(t1, t2, w) -> Rule(t1', t2', w')
    where with-spxverify(
      t1' := <declare-match> t1;
      w'  := <declare-bodies-top> w;
      t2' := <declare-bodies-top> t2 
		)
  declare-bodies:
    LRule(r) -> LRule(r')
    where with-spxverify(
      {| DeclareCookie: // acts as a non-blanking scope
        r' := <declare-bodies-top> r
      |}
    )

  declare-bodies:
    SetDynRule(x, r) -> SetDynRule(x', r')
    where with-spxverify(
      {| DeclareCookie: // acts as a non-blanking scope
        x' := <declare-bodies-top> x;
        r' := <declare-bodies-top> r
      |}
    )

  declare-bodies:
    DynRuleScopeId(x) -> DynRuleScopeId(x')
    where
      x' := x{<declare-cookie-of>} 

  declare-bodies:
    LabeledDynRuleScopeId(x, t) -> LabeledDynRuleScopeId(x', t')
    where
      x' := x{<signature-of; resolve-str-cookie>}; 
      t' := <declare-bodies-top> t

  declare-bodies:
    Assign(t1, t2) -> Assign(t1', t2')
    where with-spxverify(
      t2' := <declare-bodies-top> t2;
      t1' := <declare-match> t1
    )

  declare-bodies:
    AM(s, t) -> AM(s', t')
    where with-spxverify(
      s' := <declare-bodies-top> s;
      t' := <declare-match> t
    )

  declare-match =
    alltd(?Var(_); declare-var + ?App(_, _) + ?RootApp(_));
    declare-bodies-top

  declare-bodies:
    GuardedLChoice(c, s1, s2) -> GuardedLChoice(c', s1', s2')
    where with-spxverify(
      ( c' := <declare-bodies-top> c;
        s1' := <declare-bodies-top> s1)
    \DeclareCookie/
      s2' := <declare-bodies-top> s2
    )

  declare-svar:
    dec @ VarDec(x, t) -> VarDec(x', t)
    where with-spxverify(
      cookie := <newterm>;
      x'     := x{cookie};
      scoped-cookie := <to-scoped-symbol> cookie;
      scoped-sig    := <to-scoped-symbol><signature-of>x;   
      rules(
	    	DeclareCookie:   scoped-sig -> cookie
	      STRDeclaration:  scoped-cookie  -> dec
	    );
	    // HACK: a higher-order strategy can be passed as an argument, 
      // as in s1(s2), where s2 has arguments.
      // We overwrite (in local scope) global strategies with signature ?(x,_,_)
      // Fixes Bug: a{1} = fail; foo(a{2}) = a{2} //NOT a{1}
      <resolve-str-signatures> x; 
      filter(declare-svar-signatures(|cookie, x))
    )
  
  declare-svar-signatures(|cookie, svar-name):
    key@(svar-name,_ ,_) -> key
    where 
      scoped-sig    := <to-scoped-symbol>key
    where
      rules (DeclareCookie: scoped-sig -> cookie)
   
	    
  declare-tvar:
    x -> x'
    where
      <is-string> x
    where with-spxverify(
      x' := x{<declare-definition> Var(x)}
		)
		
  declare-tvar:
    VarDec(x, t) -> VarDec(x', t)
    where with-spxverify(
      x' := x{<declare-definition>}
  	)
  	
  declare-var:
    Var(x) -> Var(x')
    where with-spxverify(
      x' := x{<declare-definition>}
		)
		
  declare-bodies:
    Var(x{}) -> Var(x')
    where
      x' := x{<declare-cookie-of>}
      
rules 
  // Uses inside definition bodies
  declare-bodies:
    CallT(SVar(x), s*, t*) -> CallT(SVar(x'), s'*, t'*)
    where with-spxverify(
      x' := x{<declare-cookie-of>}
    <+
      x' := x
    )
    where with-spxverify(
      t'* := <declare-bodies-top> t*;
      s'* := <map(declare-bodies-svar <+ declare-bodies-top)> s*
		)
		
  declare-bodies-svar:
    CallT(SVar(x), [], []) -> CallT(SVar(x'), [], [])
    where
      x' := x{<declare-cookie-of>}
    <+
      // HACK: a higher-order strategy can be passed as an argument, 
      // as in s1(s2), where s2 has no arguments. We can only check if there
      // is a strategy called s2, independent of the number of
      // (strategy/term) arguments to s2.
      // map(to-java) => Call(SVar("map"), [CallNoArgs(SVar("to-java"))])
      <resolve-str-signatures>x
      ; filter(?(x,_,_))
      ; fetch-elem(\key@(x, s*, t*) -> <resolve-str-cookie>\)
      ; x' := x{<id>}
    <+
      x' := x
      
  declare-bodies:
    Op(x, t*) -> Op(x', t'*)
    where
      x' := x{<declare-cookie-of>}
    where with-spxverify(
      t'* := <declare-bodies-top> t*
		)

rules 
  dr-scope-declare-cookies(defs, s):
    t -> t'
    where with-spxverify(
      defs        := <defs>;
      old-cookies := <map(!(<signature-of>, <declare-cookie-of <+ !()>))>;
      t'          := <s> t;
      <list-loop(
        { ?(sig, cookie);
          if !cookie => () then
            scoped-sig    :=<to-scoped-symbol> sig;
            rules(DeclareCookie :- scoped-sig)
          else
            scoped-sig    :=<to-scoped-symbol> sig;
            rules(DeclareCookie : scoped-sig -> cookie)
          end
        })
      >old-cookies
  	)
  	
rules 

	// TODO IMPLEMENT IMPORT handling => needs to be moved to the compile-legacy-artifacts
	// and declare them in GLobal Scope for the furthur analysis
  open-import(to-signatures):
    full-path -> ast
    where with-spxverify(
      ast := <id>
    )
  
  //TODO fix : remove obsolete constructs imports . In legacy str , we dont support transitive imports
  //hence, in declare str , we dont require to handle imports .
  declare-str-definition:
    Import(x) -> Import(x)
 		where with-spxverify(
	  	if (!x => Name(mName)) then
  			moduleName := mName 
  		else
  			moduleName :=  x 
  		end
  	)	
  	where with-spxverify( 
  		<open-import(resolve-import-decl, read-stratego-signatures, declare-stratego-globals-top)> moduleName
    <+
      rules(IsImportedFailed: moduleName)
 		)
 		
  declare-str-definition:
    ImportWildcard(x) -> ImportWildcard(x)
   	where with-spxverify(
	  	if (!x => Name(mName)) then
  			moduleName := mName 
  		else
  			moduleName :=  x 
  		end
  	)	
  	where with-spxverify( 
  	  <open-wildcard-import(file-exists <+ resolve-import-path, read-stratego-signatures, declare-stratego-globals-top, has-extension(|"str") + has-extension(|"rtree"))> x
    <+
      rules(IsImportedFailed: x)
		)
   
   resolve-import-decl:
     x -> full-path
     where
       fetch-library-ast; 
       full-path := x 
     <+
       full-path := <resolve-import-path> $[[x].spx]
     <+
       full-path := <resolve-import-path> $[[x].str]
     <+
       full-path := <resolve-import-path> $[[x].rtree]

   resolve-import-path:
     x -> full-path
     where
        // FIXME: fetch true import paths from someplace
   			full-path := <file-exists> $[[<get-project-path>]/[x]]
     <+ full-path := <file-exists> $[[<get-project-path>]/trans/[x]]
     <+ full-path := <file-exists> $[[<get-project-path>]/lib/[x]]
     <+ full-path := <file-exists> $[[<get-project-path>]/src/[x]]
     <+ full-path := <file-exists> $[[<get-project-path>]/syntax/[x]]
     <+ full-path := <file-exists> $[[<get-project-path>]/syn/[x]]
     <+ full-path := <file-exists> $[[<get-project-path>]/src/syntax/[x]]
 
  fetch-library-ast:
    x -> <pack-stratego-parse-stratego> (IncludeFromPath(x), [])

	
  read-stratego-signatures:
    str -> <to-signatures> file
    where
      file := <fetch-library-ast>str
    <+
      rtree := <guarantee-extension(|"rtree")>;
      if <is-newer> (rtree, str) + not(<file-exists> str) + <has-extension(|"rtree")> str then
        file := <file-exists; ReadFromFile> rtree
      else
        file := <parse-stratego-file> str
      end
	
	to-signatures = basic-stratego-desugar-top; topdown(try(remove-stratego-bodies))

  remove-stratego-bodies:
    SDefT(x, s*, t*, s) -> SDefT(x, s*, t*, s')
    where with-spxverify(
      s' := <collect-all(?RDecT(_, _, _))> s
   	)
   	
  remove-stratego-bodies: Import(_) -> ()
   
  remove-stratego-bodies: ImportWildcard(_) -> ()

