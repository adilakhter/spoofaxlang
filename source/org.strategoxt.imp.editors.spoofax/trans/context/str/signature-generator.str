module context/str/signature-generator

imports 
	include/SpoofaxLang
	utils/contract
	utils/annotations
imports
	lib/editor-common.generated
	
rules
  		
	signature-of:
    SDefT(x, s*, t*, s) -> (<remove-quote> x, <length> s*, <length> t*)

  signature-of:
    RDecT(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)

  signature-of:
    ExtSDef(x, s*, t*) -> (<remove-quote> x, <length> s*, <length> t*) 

  signature-of:
    CallT(SVar(x), s*, t*) -> (<remove-quote> x, <length> s*, <length> t*)

  signature-of:
    Var(x) -> (<remove-quote> x, 0)

  signature-of:
    VarDec(x, t) -> (<remove-quote> x, 0)

  signature-of:
    Op(x, t*) -> (<remove-quote> x, <length> t*)

  signature-of:
    OpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
    
  signature-of:
    ExtOpDecl(x, t) -> (<remove-quote> x, <dec> <occurrences(?ConstType(_))> t)
    
  signature-of:
    Overlay(x, t*, _) -> (<remove-quote> x, <length> t*)

  signature-of:
    Rec(x, s) -> (<remove-quote> x, 0, 0)

  signature-of:
    LabeledDynRuleScopeId(x, _) -> <remove-quote> x

  signature-of:
    DynRuleScopeId(x) -> <remove-quote> x
  
  
  signature-of: x -> (<remove-quote> x, 0, 0)
  where 
  	is-string
  
  remove-quote:
    COMPLETION(s) -> COMPLETION(<remove-quote> s)
  
  remove-quote: 
    s -> s'
    with
      if explode-string => ['\'' | s_tail] then
        s' := <implode-string> s_tail
      else
        s' := s
      end
rules 
  
  strip-annotation : (x ,s,t)  -> (<remove-annotations>x ,s ,t) 
   
  strip-annotation : (x , t)  -> (<remove-annotations>x ,t)  
  
  strip-annotation : x -> <remove-annotations>x
  
   
  signature-to-declaration-id = 
    (  
    	?(<id> ,_ ,_) <+ 
    	?(<id> ,_ )   <+ 
    	? <id>
  	)
  	; remove-annotations
    ; verify(String | <id> , "String @signature-to-declaration-id")     
  	
  
  signature-to-str-args-length = 
    ?(_ ,<id> ,_)    <+  !0
  
  
  signature-to-term-args-length = 
    ?(_ ,_ ,<id>) + ?(_ , <id>) <+ !0
  
    
  