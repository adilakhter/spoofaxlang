module context/str/declare-utils

imports
	libstrc		
	libstratego-lib
 	libstratego-gpp
	libstratego-aterm
imports
	lib/editor-common.generated
	include/SpoofaxLang
imports	
	utils/sourcedir
 	utils/debug
 	utils/contract
 	utils/annotations
 	common 
	config 
imports 
	context/-
	normalize/-
	context/str/-
	spoofaxlang  
	
rules 
	verify-declared-stratego = 
		remove-annotations;
	 	verify(String | <id> , "String @is-declared-stratego"); 
		<verify-symbol-exists>(<id> , STRSignature())
	<+
    dbg-analysis(! $[Failed verify-declared-stratego  id [<print-as-string>]] | "STR|verify-declared-stratego" , "Warning" );
    fail
	
	
	is-declared-stratego(s) = 	
		 one(
        ( ?<id>
        + ?SVar(<id>))
        ; resolve-str-signatures
        ; filter(s)
        ; is-not-empty-list  
     )
rules 
	is-constructor =
    ?(_, _); 
    (
    	resolve-str-cookie; 
    	resolve-str-declaration 
    <+ 
    	declaration-of
    );
    (?OpDecl(_, _) + ?ExtOpDecl(_, _))
  
  
 
  //TODO FIX: 
  //<+ ?(name, #of arguments) ; gets signature contructor from declare - signature ; verify it has the same arity 
  
  is-congruence-signature:
    (x, s, 0) -> (x, s, [])
    where
      <resolve-str-cookie> (x, s)   
      
  declare-cookie-of(s) =signature-of ; s;  resolve-str-cookie
     
  declare-cookie-of = declare-cookie-of(id)
  
  declaration-of =
    signature-of 
    ; (  ?_{<resolve-str-declaration>} 
  	 	<+ ?(_{<resolve-str-declaration>}, _) 
  	 	<+ ?(_{<resolve-str-declaration>}, _, _)
 	  )
 	 
 
rules 
	
  get-internally-declared-cookie : 
  	sig -> cookie
  	where 
  		<resolve-symbol-definitions-internal> ( sig , STRCookie(), (LookupLocalScope() , <ONLY_ONE>)); // getting symboldef
  		map(project-from-symboldef-to-symbol); // projecting symbol
			?[cookie] // should only contain one element  
  	
  get-declared-cookie: 
  	sig -> cookie 
  	where
  		// search in current stratego section. if it is not found, 
  		// search in the index to verify if it exits
  		<to-scoped-symbol;DeclareCookie> sig => cookie 
		<+
  		if GetScopeType => InternalScope() 	then
  			<get-internally-declared-cookie>sig => cookie			
  		else
  			activate-scope(
		 			<resolve-symbol-definitions-internal>(sig , STRCookie(), (LookupLocalScope() , <ALL_AS_SEQUENCE>));
		 			filter(not(is-internal-symbol(|<GetEnclosingPackageName>)));
		 			map(project-from-symboldef-to-symbol); // projecting symbol
		 			?[cookie] // should only contain one element   
			 		|<GetEnclosingPackageName>
  			 ) 
  		end
  				  
  	  	
  declare-definition:
    def -> cookie
    where 
    	with-spxverify(
	      sig := <signature-of>
	      // ; enable-symboltable-debugging  //TODO : remove enable debugging
	      // ; enable-declaration-debugging  //TODO : remove enable debugging
	      ; (
	        	<get-declared-cookie> sig => cookie 
	        <+ 
	          //where(<debug(!"cookie not found for ")>sig) 
	          cookie := <newterm> // declaring a new cookie
	          ; scoped-cookie := <to-scoped-symbol> cookie
	          ; scoped-sig    := <to-scoped-symbol> sig   
	          ; rules(
	              DeclareCookie:  scoped-sig  -> cookie
	              STRDeclaration: scoped-cookie  -> def
	            )
			      ; dbg-declaration(
			        	! $[Storing DeclareCookie : [<print-as-string>scoped-sig] -> [<print-as-string>cookie]]  | "STR|declare-definition" 
		        		, <debug-level-INFO> 
	      		  ) 
					  ; dbg-declaration(
					    	! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]] | "STR|declare-definition" 
					    	, <debug-level-INFO> 
			    	  )      
	    		)
	    		// ; disable-symboltable-debugging
	    		// ; disable-declaration-debugging 
		  )
 
  redeclare-definition:
    def -> cookie
    where with-spxverify( 
    	sig := <signature-of>
      ; cookie := <newterm>
      ; scoped-cookie :=<to-scoped-symbol> cookie
      ; scoped-sig    :=<to-scoped-symbol> sig
      ; rules(
         DeclareCookie:  scoped-sig    -> cookie
         STRDeclaration: scoped-cookie -> def
       )
      , ! "Failed at redeclare-definition" 
   	)
   	where
   		dbg-declaration(! $[Storing DeclareCookie : [<print-as-string>scoped-sig] ->    [<print-as-string>cookie]] | "STR|redeclare-definition" , <debug-level-INFO> );
 	  	dbg-declaration(! $[Storing STRDeclaration : [<print-as-string>scoped-cookie] -> [<print-as-string>def]]  | "STR|redeclare-definition" , <debug-level-INFO> )
		
  
  external SRTS-EXT-newint(|)
		
	get-all-declared-cookies = 
		<resolve-all-symbol-definitions( 
			id 
	  | ( LookupLocalScope() , <ALL_AS_SET>) // lookup configuration ( Search Depth , Symbol Return Mode )
		)>(<MATCH_ALL_KEYS> ,  STRCookie());
	 	map({sig,cookie: debug; ?SymbolDef(_, sig, _ , cookie,_); !(sig,cookie)})
			 
 	get-all-declarations = 
		<resolve-all-symbol-definitions( 
			id 
		|( LookupLocalScope() , <ALL_AS_SET>) // lookup configuration ( Search Depth , Symbol Return Mode )
		)>(<MATCH_ALL_KEYS> ,  STRDef());
	 	map({cookie,def: ?SymbolDef(_, cookie, _ , def,_); !(cookie,def)})
				  
	  
  print-statistics = 
		<debug> $[ | Cookie  ---Declarations Mapping| ];
		<debug> $[ ---------------------------------- ];
		get-all-declared-cookies; 
  	list-loop(
  		{
  			?(sig, cookie) ;
  			<debug> $[[<ppterm>cookie] : [<ppterm>sig] :[<resolve-str-declaration;print-as-string>cookie]]
  		}
  	);
  	<debug> $[  ];
  	<debug> $[ Declaration that is not in cookie: ];
		<debug> $[ ---------------------------------- ];
		get-all-declarations;
		filter(
  		{
  			?(cookie, decl) ;
  			<signature-of>decl => sig;
  			not(<resolve-str-cookie>sig);
				<debug> $[ [<ppterm>cookie] : [<resolve-str-declaration;print-as-string>cookie]]
  		}
		)
			
rules 
  
  index-str-declarations = 
    dbg-declaration(! $[indexing Stratego Declarations : [<print-as-string><all-keys-STRDeclaration>]]  
    								| "STR|index-str-declarations " , <debug-level-INFO> );
		<list-loop(
        { 
          ?cookie
          // Cookie  ---> STR DEFINITION Mapping 
          ; dbg-declaration(! $[Indexing: [<print-as-string>cookie] -> STRDef()  ->  [<print-as-string><STRDeclaration>cookie]] | "STR|index-str-declarations " , <debug-level-INFO> ) 
          ; <index-unique-symbol-definition>(cookie, STRDef() ,  <STRDeclaration>cookie)
        }
    )><all-keys-STRDeclaration>
      
  
  //TODO FIX : strip all the scope . Better not to enclode it with scope.
  index-str-cookies =      
  	 dbg-declaration(! $[indexing Stratego cookies  : [<print-as-string><all-keys-DeclareCookie>]]  
    								| "STR|index-str-cookies" , <debug-level-INFO> );
    <list-loop(
	    { ?sig
	      ; dbg-declaration(! $[Indexing: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><DeclareCookie>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)  
	      // Signature -------> Cookie Mapping 
	      ; <index-unique-symbol-definition>(sig, STRCookie() ,  <DeclareCookie>sig)
	      ; <remove-scope-from-symbol; ?sig'; signature-to-declaration-id>sig => str-id
	      ;  dbg-declaration(! $[Indexing: [<print-as-string>str-id] -> STRSignature() ->  [<print-as-string>sig]] | "STR|index-str-cookies" , <debug-level-INFO>)
        // Stratego ID , Type  -------> Signature Mapping 
        ; <index-symbol-definition>(str-id, STRSignature() , sig')  
	    }
    )><all-keys-DeclareCookie>
       
 
  resolve-str-declaration =
    ? cookie; 
    ( 
   		<STRDeclaration> <to-scoped-symbol> cookie 	<+
    	<resolve-symbol-definition>( cookie, STRDef()) ; 
    	dbg-declaration(!$[[<print-as-string>cookie] -> STRDef() ->  [<print-as-string><id>]] | "STR|resolve-str-declaration" , <debug-level-INFO> )
  	)	
	<+
  	dbg-declaration(!$[Failed to retrive STRDef for cookie [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-declaration" , "Warning" ); 
  	fail
    
  resolve-str-cookie =
    ?sig ;
    (
    	<to-scoped-symbol;DeclareCookie>sig 
   	<+	
     <resolve-symbol-definition>( sig , STRCookie()); 
     dbg-declaration(! $[resolve-str-cookie: [<print-as-string>sig] -> STRCookie() ->  [<print-as-string><id>]] | "STR|resolve-str-cookie" , <debug-level-INFO>)
    ) 
  <+
  	dbg-declaration(!$[Failed to retrive STRCookie for signature [<print-as-string><to-scoped-symbol>]]| "STR|resolve-str-cookie" , "Warning"); 
    fail
  
  resolve-str-signatures =
    ?key
    ; verify(String | key , "String at resolve-str-signatures")
    ; <resolve-all-symbol-definitions>( <id>, STRSignature())
    ; dbg-declaration(! $[[<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
                      | "STR|resolve-str-signatures" , <debug-level-INFO> )
  <+
    dbg-declaration(! $[Failed to retrive STRSignatures* for id [<print-as-string><to-scoped-symbol>]] 
                      | "STR|resolve-str-signatures" , "Warning" );
    fail
      
  resolve-str-signature =
    ?key
    ; verify(String | key , "String @resolve-str-signatures")
		; <resolve-symbol-definition>( <id>, STRSignature())
  	; dbg-declaration(! $[resolve-str-signature: [<print-as-string>key] -> STRSignature() ->  [<print-as-string><id>]] 
	                      | "STR|resolve-str-signature" , <debug-level-INFO> )  
  <+
    dbg-declaration(! $[Failed to retrive STRSignature for id [<print-as-string><to-scoped-symbol>]] 
                      | "STR|resolve-str-signature" , "Warning" );   
    fail 