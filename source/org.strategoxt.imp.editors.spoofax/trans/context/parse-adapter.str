module context/parse-adapter

imports
	include/SpoofaxLang
	context/signatures
	normalize/signatures
	lib/Configuration/SpoofaxConfiguration
	lib/editor-common.generated
imports
	context/sdf/parse
	context/str/parse
	codegen/-
imports
	utils/path
	utils/debug
	utils/cache
	utils/contract
	config
	common
	normalize/main 
	
rules
	parse-spx-sources :
		(sourcedir , searchOption) -> <id>
		where
			with-spxverify(
				current-working-root-dir  := <get-project-path>
				, !"Failed to initialize current-working-root-directory ::parse-spx-sources"
			);	
			if run-strategy( 
					<chdir>sourcedir 
					, fail 
				  | $[Warning | Failed to change current directory to : [<print-as-string>sourcedir]]
	  	) then
					<parse-spx-compilationUnits(|searchOption)> <getcwd>;
					run-strategy( 
						<chdir> current-working-root-dir  
						, fail 
					  | $[Warning | Failed  to change current directory to : [<print-as-string>current-working-root-dir]])
			end
		
	parse-spx-compilationUnits(|search-option) =
		readdir;
		list-loop(
    	if <isdir> <filemode> then  //FIXME : filemode / isdir contains bug. Common folder is not considered as directory which is a bug
    		if not(is-ignored-spx-directory); !search-option => All()  then
       		 chdir;
        	 <parse-spx-compilationUnits(|search-option)<+ throw-unable-read-exception(|"Failed to read this directory : ")><getcwd>;
           <chdir> ".."
        end
      else
        where(parse-and-precompile-if-needed) <+ throw-unable-read-file
      end
    )

 	parse-and-precompile-if-needed: 
 		filename -> <id>
 		where	if has-extension(|"spx") then
	 					debug-compiler(! $[Pre-Compiling| Parsing following file : [<print-as-string>]]);
	 					open-spx-compilation-unit(
							spx-compilation-unit-path,
							spx-precompiled-cache-path,
							parse-spoofaxlang-file ,
							normalize-all
						)
					end

rules 
	  
	get-spxcompilation-unit =  verify(is-string|<id>, "Full-path String @get-compilation-unit"); parse-spoofaxlang-file


rules

	parse-legacy-artifact:
		resolved-path-> parsed-string
		where
			has-extension(|"sdf") + has-extension(|"def")
		where
			parsed-string:= <parse-sdf-file>resolved-path


	parse-legacy-artifact:
		resolved-path -> parsed-string
		where
			has-extension(|"str")
		where
			parsed-string:= <parse-stratego>resolved-path


	parse-legacy-artifact:
		resolved-path -> parsed-string
		where
			has-extension(|"rtree")
		where
			parsed-string:= <ReadFromFile>resolved-path
