module codegen/generate
imports 
	codegen/compile
	codegen/sdf/to-sdf
	codegen/sdf/to-signature 
	codegen/str/to-stratego
	codegen/esv/to-esv
	codegen/buildscripts
imports 
	config 
	common
imports	
	lib/editor-common.generated 
	include/SpoofaxLang
imports	
	context/-
	normalize/signatures
imports 	
	utils/path 
	utils/contract
	utils/debug
	analyze/main
	spoofaxlang
	

rules
	
	// builds all the packages 
	build-all = 
		new-compile-session(
			  get-package-list
			; compile-main
			; <get-all-analyzed-modules-locations>() => analyzed-files*
			; mark-issues-of-files
			; if HasErrors 
			  then 
		  		index-close;
		  		
		  		<pp-errors> analyzed-files* => ( error-entries-string, total-num-errors);
		  		error-message := 
$[Compile completes -- [total-num-errors] errors -- please check the following errors in the Problems view (located at Windows>Show Views>Problems).
[error-entries-string]
];
		  		fatal-err-msg(|error-message) 
 	  	 else
		  		<debug> $[Compile complete -- no error during compilation -- generating artefacts.];
		  		generate-spx-artifacts		
		 	 end
	 )
	 
	
	// builds incrementally. 
	// only compile and generate codes for the packages that is needed.
	build-spx-incrementally =
		verify(?(ast, abs-path) |<id> , "?(ast, abs-path) at build-spx-incrementally" );   
		compile-packages-of(generate-spx-artifacts) 

	generate-spx-artifacts = 
		if not(HasErrors) then
				packages := <get-package-list>
	 		;	debug-time( 
			  	new-code-generate-session(
 						init-code-generation
	 				  ; <list-loop(generate-spx-package)> packages
				  	;	<filter(has-language-name-configured)>packages
		    		; emit-build-script 
					)
					// refreshes autogenerated directory . Seems redundant . Build automatically refreshing following directory. 
					// ; <refresh-workspace-file> $[[<ProjectPath>]/[<get-autogenerated-artifacts-dir>]]
					| "--Code Generation done"
	  		) 
		else
			<debug>$[-- Compilation Failed.Please fix the errors before building the artifacts -----------------------]		
		end			
					
rules 
	new-code-generate-session(s) =
  	debug-compiler(!$[-----------------new-code-generate-session::-----------------]);
		with-spxverify(
			index-on-init-code-generation;
  		s;
  		index-on-complete-code-generation 
    	, !" new code generated session failed unexpectedly. "  
    )  
	
	// temp fix : refresh doing nothing 
	// TODO : remove all calls to refresh-file 
	refresh-file = id  

	//TODO: OPTIMIZE : get the imports and resue it in all the generation phase rather traversing to find it out each time. 
	//TODO: OPTIMIZE : DR can be used to construct this imports  


	// generates artifact for spx packages 
	generate-spx-package: 
		package-typed-qname@Package(untyped-qname) -> <id>
		where 
			debug-compiler(!$[SpxPackage : Generate code for spx-package| Generating Artifacts for following package: [<print-as-string>]] | <debug-at-generator> , <debug-level-INFO>); 
			with-spxverify(
				if not(<get-declared(|CodeGenerated())>package-typed-qname)  then 
					{|	GetEnclosingPackageName
					 :
								with-spxverify(
									<declare-current-package-scope>package-typed-qname
							 		, !"Setting GetEnclosingPackageName failed"
								);  
							
								// only performing selective code generation for the changed modules
								enclosed-module-typed-qnames := <get-enclosed-dirty-modules-to-generate>package-typed-qname;
							
								<list-loop(generate-spx-module)>enclosed-module-typed-qnames;// Generates artifacts from all the modules 	
								<emit-internal-signatures>package-typed-qname;// generating internal signatures
							 
								<generate-sdf-mix-main> package-typed-qname;
								// Since, the language-name is defined for this language 
								// generate all the main artifacts  for this package
								// if Language name is not defined for certain packaged, they will not be considered 
								// as a language , rather will be treated as a langauge library to be reused by other 
								// languages.
								if (<get-language-name> package-typed-qname) then
									<emit-package-signature-main>();
									<link-all-generated-artefacts> package-typed-qname
								end
				|};		
				with-spxverify( <store-declared(|CodeGenerated())>package-typed-qname , "failed to store CodeGenerated()")
				end
				, ! $[Generate| generate-spx-package |[<print-as-string>package-typed-qname] Failed. ]
				)
	
	generate-spx-module: 
		module-typed-qname@Module(untyped-qname) -> <id>
		where 
			debug-compiler(!$[Starting code generator for : [<print-as-string>]] | <debug-at-generator> , <debug-level-INFO>) 
		where 
			with-spxverify(
				debug-compiler (! $[currently generating : [<print-as-string>]] | <debug-at-generator> , <debug-level-INFO>);
				{|GetEnclosingModuleName:
							<declare-current-module-scope>module-typed-qname ;
							<generate-all>module-typed-qname	
				|}
				, !$[generate-spx-module: [<print-as-string>module-typed-qname] Failed. ]
			)
			
	
	init-code-generation = with-spxverify(<emit-default-signatures>() , "Failed to emit default signatures") 
	
	generate-all:
		m@Module(QName(_)) -> <id>
		where with-spxverify( 
						get-analyzed-module-ast
						; emit-sdf
						, !$[Failed to generate sdf artifacts for module [<print-as-string>m]]
					)	    
		where	with-spxverify(	
						get-original-module-definition // TODO  FIX : check whether it is needed 
						; emit-signatures 
		  			; emit-str
		  			, !$[Failed to generate str artifacts for module [<print-as-string>]]   
  				)  

	link-all-generated-artefacts =
		with-spxverify(
			verify(?Package(QName(_)) |<id> , "?Package(QName(_))  at link-all-generated-artefacts ")
			;	get-enclosed-modules
			; generate-sdf-main
			; generate-str-main 
			; generate-esv-main
			, !$[Failed to generate artifacts for package [<print-as-string>]]
		)
	
	get-main-file-name : p@Package(QName(_)) -> <get-language-name>p

rules
	
	to-generated-artifact-block(adapter, post-adapter) : 
		list-stmt* -> resultant-block* 
		where 
			verify( List | list-stmt* , "List at to-generated-artifact-block")
		where 
			<adapter>list-stmt*  => adapted-result*; // results are  adapted using the specified adapter
			<post-adapter>adapted-result*  => resultant-block*
	
	
	// generates the import declaration for the artifacts .  
	// s is a artifact specific adapted strategy applied to all the import declaration 
	// to get the artifact-specific import declaration. 
	to-generated-artifacts-import-declarations(s) =
		?imports*
		;	map(to-import-declaration(s))
		; flatten-list
		;	make-set
		; debug-compiler(!$[Imports : Resultant imports :  [<print-as-string>]] | <debug-at-generator>, <debug-level-INFO>) 
		
	to-import-declaration(s): 
		i@ImportPackage(package-qname@QName(_)) -> results
		where	if not(<get-package-declaration>package-qname) then
						results := [] // unresolved imports. ignore. 
					else
						results := <s>Package(package-qname) 
					end
		where	debug-compiler(!$[Imports: result: [<print-as-string>results] ] | <debug-at-generator>, <debug-level-INFO>)
	
	
	// TODO : remove following rules as they are not needed anymore 
	to-import-declaration(s):		
		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> <to-import-declaration(s)>ImportSpxModule(QName([package-name]), SPXModuleName(modname))
	
	to-import-declaration(s):
		ImportSpxModule(QName(package-qname-parts), SPXModuleName(modname)) -> result
		where
			 module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname)
			;if(not(<get-module-uri>Module(module-qname)))   then
				result := [] // unresolved imports. ignore. 
			else
				module-name-path    := <qname-to-path>module-qname
				;<s>module-name-path => result'
				;result := [result']  
			end
		where 
			debug-compiler(!$[Imports: import module Result:  [<print-as-string>result]] |  <debug-at-generator> , <debug-level-INFO>) 
	
	to-import-declaration(s): 
		ImportPackage(Name(package-name)) -> result
		where if <get-package-declaration>QName([package-name]) then
						result:= <s>Package(QName([package-name]))
					else
				 		result := <to-import-declaration(s)>ImportLegacyArtifact(Name(package-name)) 	// since it is not declared as a spx package , it could be a legacy artifact . 
				 	end
		where debug-compiler(!$[Imports: import pcakage/legacy artifact Result :  [<print-as-string>result]] |<debug-at-generator> , <debug-level-INFO>) 
	
	to-import-declaration(s): 
		ImportLegacyArtifact(Name(modulename)) -> result
		where 
				<s>Name(modulename) => result
		where 
			debug-compiler(!$[Imports: import legacy artifact Result : [<print-as-string>result].]|<debug-at-generator> , <debug-level-INFO>)

rules 
	save-artifact(s | package-untyped-qname, root-directory,output-path) : 
		content -> content
		where with-spxverify( 
				<ensure-exists>(root-directory, package-untyped-qname)
			 	;	<s>(output-path , content)
			 	;	<refresh-file>output-path 
			 	;	chdir-to-project-path
			 	, "Failed to save artifact " 	
		 	) 	     
		
	
	save-artifact( | package-untyped-qname, root-directory,output-path) : 
		content -> <save-artifact( save-to-file | package-untyped-qname, root-directory,output-path)>content 


rules
	
	// Verifies wheter a particular list is empty or not.
	ensure-list-is-not-empty =  verify(is-list| <id> , "List ::ensure-list-is-not-empty"); is-not-empty-list
		
	has-language-name-configured = verify(?Package(QName(_)) | <id> , "Package(QName(_)) :has-language-name-configured") ; where(get-language-name)

	
signature constructors
	GeneratedPackages : Type 	
	ImportedDef   : Type
	CodeGenerated : Flag 
	 
rules 
	index-generated-package-ids = 
			with-spxverify(
				? package-qnames 
				; <get-constructor> GeneratedPackages() => cons-name
				; activate-global-scope( 
				  	<undefine-symbol-definitions>(cons-name, GeneratedPackages()); 
				  	<index-symbol-definition>(cons-name, GeneratedPackages() , package-qnames)
			  	)
				, !"Failed index-generated-package-ids"  
			)  
			
		get-generated-package-ids = 
			<get-constructor>  GeneratedPackages() => key ;  
			activate-global-scope( 
				<resolve-symbol-definition <+ ![]>(key,  GeneratedPackages()) => package-qnames* 
			);
			!package-qnames*
			
rules 
	
	index-imported-def-of-package =
			verify(
				?(key@Package(QName(_)) , value)
				|<id> , "?(key@Package(QName(_)) , value) at index-imported-package-def"
			); 
			with-spxverify(
				<index-symbol-definition>(key, ImportedDef() , value)
			)  
			
	get-imported-defs-of-package = 
		verify(
			?p@Package(QName(_)) 
			|<id> , "?Package(QName(_)) at get-imported-defs-of-package "
		);
		activate-scope(<resolve-all-symbol-definitions>(<id>,  ImportedDef()) => package-qnames*|p);  
		!package-qnames*	
					 