module to-esv
imports
  libstratego-lib
  lib/EditorService
  include/SpoofaxLang
imports
  context/resolve-symbols
  context/sdf/declare
  context/template/declare
  normalize/templatelang
  utils/attributes
  utils/contract
  utils/templatelang
  common
  context/symboltable
  context/sdf/declare
  context/declare

strategies

  test-templatelang-to-esv:
    ast -> Module(modulename, NoImports(), [Completions("", listOfCompletions)])
    with
      <?CompilationUnit([], [Package(_, [Module(_, SPXModuleName(modulename), _)])])> ast;
      <?CompilationUnit([], [Package(_, [<template-module-to-esv>])]); alltd(String(double-quote))> ast => listOfCompletions

strategies

  /** @type Module -> List(Completions) */
  template-module-to-esv:
    Module(_, _, section*) -> <template-sections-to-esv> section*

  /** @type List(TemplateSection) -> List(Completions) */
  template-sections-to-esv:
    section* -> completion*
    where with-spxverify(
      verify(List | section* , "List at template-sections-to-esv")
    )
    where with-spxverify(
      completion* := <filter(template-section-to-esv); concat> section*
    )
    where with-spxverify(
      verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  at template-module-to-esv")
    )

  /** @type TemplateSection -> List(CompletionTemplate) */
  template-section-to-esv:
    TemplateSection(prod*) -> completion*
    where
      with-spxverify(
        verify( ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _)) | prod* , "ListOf(?TemplateProduction(_, _, _) + ?TemplateProductionWithCons(_, _, _))  ::template-section-to-esv")
      )
    where with-spxverify(
      // FIXME: desugaring should have been performed before the current strategy is invoked.
      // FIXME: declaring is here for unit testing only ???
      completion* := <templatelang-desugar-top;
                      declare-template-definition-main;
                      filter(template-to-completion-template)> prod*
    )
    where with-spxverify(
      verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::template-section-to-esv")
     )

  template-section-to-esv:
    SDFSection(lexical-syntax(prod*)) ->
      <sdf-productions-to-completion-templates> prod*

  template-section-to-esv:
    SDFSection(context-free-syntax(prod*)) ->
      <sdf-productions-to-completion-templates> prod*

  sdf-productions-to-completion-templates:
    prod* -> completion*
    where with-spxverify(
        // FIXME: remove SdfProduction/3 and SdfProductionWithCons/3 when desugaring is performed before code generation.
        verify(ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _)) | prod* , "ListOf(?prod(_, _, _) + ?SdfProduction(_, _, _) + ?SdfProductionWithCons(_, _, _))  ::sdf-productions-to-completion-templates")
    )
   where
     with-spxverify(
      // FIXME: desugaring should have been performed before the current strategy is invoked.
      // FIXME: declaring is here for unit testing only ???
      completion* := <templatelang-desugar-sdf-top;
                      declare-sdf-definition-main;
                      filter(sdf-production-to-template;
                             template-to-completion-template)> prod*
     )
    where with-spxverify(
      verify(ListOf(?CompletionTemplateEx(_, _, _, _)) | completion* , "ListOf(?CompletionTemplateEx(_, _, _, _))  ::sdf-productions-to-completion-templates " )
    )

/*internal*/ strategies

  sdf-production-to-template:
    prod([lit(text)], sort(sort), attrs) ->
      TemplateProduction(sort, SingleLineTemplate([String(<un-double-quote> text)]), attrs)

  template-to-completion-template:
    prod @ TemplateProduction(sort, SingleLineTemplate(_), attrs) ->
      |[ completion template ~sort : ~prefix = ~*part* ]|
    where
      not(<is-deprecated + is-reject> attrs)
    where with-spxverify(
      elem* := <expand-single-line-template-production> prod;
      part* := <filter(template-element-to-esv);
                template-to-completion-template-helper> elem*;
      prefix := <build-prefix> part*
    )
    where
      <accept-template-parts(|sort)> part*

  template-to-completion-template:
    prod @ TemplateProduction(sort, Template(_), attrs) ->
      |[ completion template ~sort : ~prefix = ~*part* (blank) ]|
    where
      not(<is-deprecated + is-reject> attrs)
    where with-spxverify(
      line* := <expand-multi-line-template-production> prod;
      part* := <filter(template-line-to-esv);
                remove-cursor-except-first;
                separate-by(|String("\n"));
                template-to-completion-template-helper> line*;
      prefix := <build-prefix> part*
    )
    where
      <accept-template-parts(|sort)> part*

  template-to-completion-template-helper =
    flatten-list;
    concatenate-consecutive-strings;
    map(try(String(templatelang-escape)))

  build-prefix =
    map(template-element-to-string);
    concat-strings;
    string-replace(|"\\n", " ");
    string-replace(|"\\t", " ");
    string-as-chars(listbu(try( \[' ', ' ' | t] -> [' ' | t]\ )));
    !String(<id>)

  accept-template-parts(|sort) =
    // not acceptable are:
    //  * empty templates
    //  * injections (i.e., a single element that isn't String(_))
    ?[_, _ | _] + ?[String(_) | _]

rules

  template-line-to-esv:
    Line([Layout(x), Placeholder(_, <Option() + Star()>, option*)]) ->
      <spaces-to-tabs> [String(x), Cursor()]
      where
        <not(one(?Text(_)))> option*

  template-line-to-esv:
    Line(elem*) -> <filter(template-element-to-esv); not(?[]); spaces-to-tabs> elem*

  spaces-to-tabs =
    try([String(string-replace(|"  ", "\t")) | id])

  // Any placeholder with title results in a placeholder with that title.
  template-element-to-esv:
    Placeholder(sort(sort), _, option*) ->
      PlaceholderWithSort($[<[text]:], sort)
      where
        <one(?Text(text))> option*

  // A and A+ result in a placeholder containing the shortest expansion of A.
  template-element-to-esv:
    placeholder @ Placeholder(sort(sort), <None() + Plus()>, option*) ->
      PlaceholderWithSort($[<[text]:], sort)
    where
      <not(one(?Text(_) + ?Hide()))> option*
    where
      text := <expand-template-element;
               map(template-element-to-string);
               concat-strings
               <+ !sort> [placeholder]

  // A? and A* result in a 0-length placeholder.
  template-element-to-esv:
    Placeholder(sort(sort), <Option() + Star()>, option*) ->
      PlaceholderWithSort("<:", sort)
    where
      <not(one(?Text(_)))> option*

  template-element-to-esv:
    Layout(x) -> String(x)

  template-element-to-esv:
    String(_) -> <id>

  remove-cursor-except-first =
    [[id, Cursor()] | remove-cursor] <+ [id | remove-cursor-except-first] <+ []

  remove-cursor =
    ?[[_, Cursor()] | <remove-cursor>] <+ [id | remove-cursor] <+ []

rules // TemplateLang / completion template element to string

  template-element-to-string:
    Placeholder(_, _, option*) -> text
    where
      <one(?Text(text))> option*

  template-element-to-string:
    Placeholder(sort(sort), <None() + Plus()>, option*) -> sort
    where
      <not(one(?Text(_) + ?Hide()))> option*

  template-element-to-string:
    Placeholder(_, <Option() + Star()>, option*) -> ""
    where
      <not(one(?Text(_) + ?Hide()))> option*

  template-element-to-string:
    Placeholder(_, _, option*) -> ""
    where
      <one(?Hide())> option*

  template-element-to-string:
    Placeholder(t) -> t

  template-element-to-string:
    PlaceholderWithSort(t, _) -> <string-as-chars(Tl; init)> t

  template-element-to-string:
    Layout(x) -> x

  template-element-to-string:
    String(x) -> x

  template-element-to-string:
    Cursor() -> ""

strategies // Template expansion

  //builder for testing
  build-expand-template:
    (selected, position, ast, path, project-path) -> (filename, result)
    where with-spxverify(
      filename := <guarantee-extension(|"generated.aterm")> path;
      result := <templatelang-desugar-top;
                 collect-all(?TemplateProduction(_, _, _));
                 filter(expand-multi-line-template-production)> selected
     )

strategies

  // Many of the following strategies fail if a placeholder is encountered
  // that has been expanded before (i.e., a cycle).

  // The failure propagates up and is handled by the filter strategy in
  // get-template-lines / get-template-elements, so that placeholders that
  // would lead to infinite recursion are never expanded.

  /**
   * @type TemplateProduction ->? List(template-line)
   */
  expand-multi-line-template-production:
    TemplateProduction(sort, SingleLineTemplate(elem*), a) ->
      <memo(expand-template-production)> TemplateProduction(sort, Template([Line(elem*)]), a)

  expand-multi-line-template-production:
    TemplateProduction(_, Template(_), _) -> <memo(expand-template-production)>

  expand-multi-line-template-production:
    prod(_, _, _) -> <memo(expand-template-production)>

  /**
   * @type TemplateProduction ->? List(template-element)
   */
  expand-single-line-template-production:
    TemplateProduction(_, SingleLineTemplate(_), _) -> <memo(expand-template-production)>

  expand-single-line-template-production:
    prod(_, _, _) -> <memo(expand-template-production)>

  /**
   * @type TemplateProduction ->? List(template-line) | List(template-element)
   */
  expand-template-production:
    TemplateProduction(sort, template, attrs) -> result{score}
    where
      <not(is-reject)> attrs;
      <not(Expanded)> sort
    where {|Expanded:
      rules( Expanded: sort -> sort );
      result := <expand-template> template;
      score := <determine-score> attrs
    |}

  expand-template-production:
    prod(_, _, _) -> <sdf-production-to-template; expand-template-production>

  /**
   * @type template-attributes -> Int
   */
  determine-score:
    attrs -> <sum> [depr', prefer', avoid']
    where
      depr'   := <is-deprecated < !-100 + !0> attrs;
      prefer' := <is-completion-prefer < !50 + !0> attrs;
      avoid'  := <is-completion-avoid < !-50 + !0> attrs

  /**
   * @type SingleLineTemplate ->? List(template-element)
   */
  expand-template:
    t @ SingleLineTemplate(elem*) -> elem'*
    where
      elem'* := <listbu(expand-template-element)> elem*

  /**
   * @type Template ->? List(template-line)
   */
  expand-template:
    t @ Template(line*) -> line'*
    where
      line'* := <listbu(expand-template-line)> line*

  /**
   * @type Placeholder ->? Placeholder
   */
  is-template-placeholder:
    Placeholder(sort(x), _, _) -> <id>
    where
      <get-declarations; one(?TemplateProduction(_, _, _))> x

  /**
   * @type List(template-line) ->? List(template-line)
   *
   * expand-template-line covers exactly all valid input terms except:
   *  Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) where <Expanded> x
   */
  expand-template-line:
    [t @ Line([indent @ Layout(_), Placeholder(sort(x), <None() + Plus()>, option*)]) | tail] -> [line* | tail]
    where
      <not(Expanded)> x;
      <not(one(?Hide()))> option*
    where
      line* := <get-template-lines(|indent) <+ ![t]> x

  // Do not touch already expanded placeholders.
  expand-template-line:
    [t @ Line([Layout(_), Placeholder(sort(x), <None() + Plus()>, _)]) | tail] -> [t | tail]
    where
      <Expanded> x

  // Do not touch option/star placeholders.
  expand-template-line:
    [t @ Line([Layout(_), Placeholder(_, <Option() + Star()>, option*)]) | tail] -> [t | tail]
    where
      <not(one(?Hide()))> option*

  // Remove line with hidden placeholder.
  expand-template-line:
    [Line([Layout(_), Placeholder(_, _, option*)]) | tail] -> tail
    where
      <one(?Hide())> option*

  expand-template-line:
    [t @ Line(elem*) | tail] -> t'
    where
      not(!elem* => [Layout(_), Placeholder(_, <None() + Plus()>, _)])
    where
      t' := <![Line(<listbu(expand-template-element); not(?[])>) | tail] <+ !tail> elem*

  expand-template-line:
    [] -> <id>

  /**
   * @type List(template-element) ->? List(template-element)
   *
   * expand-template-element covers exactly all valid input terms except:
   *  Placeholder(sort(x), <None() + Plus()>, _) where <Expanded> x
   */
  expand-template-element:
    [t @ Placeholder(sort(x), m @ <None() + Plus()>, option*) | tail] ->
      // [elem* | tail]
      [Placeholder(sort(x), m, [Text(text) | option*]) | tail]
    where
      <not(Expanded)> x;
      <not(one(?Hide()))> option*
    where
      elem* := <get-template-elements <+ ![t]> x;
      text := <map(template-element-to-string); concat-strings> elem*

  // Do not touch already expanded placeholders.
  expand-template-element:
    [t @ Placeholder(sort(x), <None() + Plus()>, _) | tail] -> [t | tail]
    where
      <Expanded> x

  // Do not touch option/star placeholders.
  expand-template-element:
    [t @ Placeholder(_, <Option() + Star()>, option*) | tail] -> [t | tail]
    where
      <not(one(?Hide()))> option*

  // Remove hidden placeholder.
  expand-template-element:
    [Placeholder(_, _, option*) | tail] -> tail
    where
      <one(?Hide())> option*

  expand-template-element:
    [t | tail] -> [t | tail]
    where
      not(!t => Placeholder(sort(x), <None() + Plus()>, _))

  expand-template-element:
    [] -> <id>

strategies  // helpers

  /**
   * @type String -> List(template-line)
   */
  get-template-lines(|indent) =
    get-declarations;
    not(?[]);
    filter(expand-multi-line-template-production);
    choose-one-expansion;
    map(Line(![indent | <id>]))

  /**
   * @type String -> List(template-element)
   */
  get-template-elements =
    get-declarations;
    not(?[]);
    filter(expand-single-line-template-production);
    choose-one-expansion

  choose-one-expansion =
       filter(not(oncetd(is-template-placeholder)));
       qsort(template-compare);
       Hd
    <+
       Hd

  /**
   * @type Any{Int} * Any{Int} -> Any
   *
   * The expansion with the least amount of literal characters is preferred.
   */
  template-compare:
    (x{x-score}, y{y-score}) -> <id>
    where
      <gti> (x-score, y-score)
    <+
      <eq> (x-score, y-score);
      <lti> (<template-character-count> x, <template-character-count> y)

  template-character-count =
    ?String(<string-length>)
    <+ ?Layout(<string-length>)
    <+ ?Text(<string-length>)
    <+ crush(!0, addi, template-character-count)

  // lower than (does not exist in library)
  lti = not(gti)

  get-declarations =
    activate-scope(
      setof-sdf-declarations
      |<GetEnclosingPackageName>
    )
