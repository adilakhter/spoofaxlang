module codegen/main

imports 
	codegen/compile
	codegen/sdf/-
	codegen/str/-
	codegen/esv/-
imports
	codegen/buildscripts
	codegen/generate
	analyze/main
imports 
	config 
	utils/cache
	lib/editor-common.generated
	context/-
  normalize/signatures  
	include/SpoofaxLang
	utils/path
	utils/debug
	utils/contract
	common
	analyze/main
	
rules 
	
	editor-build-spoofaxlang-jvm :
		(selected, position, ast, path, project-path) -> None()
		where
			 <build-spoofaxlang-jvm>project-path
			 
  			
  close-spoofaxlang-index-jvm: 
  	current-project-location -> <id>
  	where debug(!"Inside close-spoofaxlang-index-jvm: ")
  	where 
  		editor-init;
  		rules(
					ProjectPath := current-project-location
			);
			index-close
  	 
  build-spoofaxlang-jvm:
    (current-project-location, build-opt) -> <id>
    where verify-if-has-errors
    where <debug> $[-- Invoking Spoofaxlang Bulid with following arguments [<print-as-string>]] 
		where 
			with-spxverify(	
	  		editor-init; 						         // cleaning up and initializing editors
				previous-working-dir := <getcwd>;
				rules(
					ProjectPath := current-project-location
				);
				<chdir>current-project-location				// setting current directory to the project location
			<+
				fatal-err-msg(|$[Failed to intialize SPX Editor.]) 
			)
		where 
			with-spxverify(	
				<debug>$[-- Activating following Project Configuration : ];
				initialize-configuration;        	// initializes configuration and setting up enviroment variables
				<show-configuration;debug>()     //show configuration for this spx project
			<+
				fatal-err-msg(|$[Failed to intialize SPX project Configuration. Please check the configuration file.]) 
		  )	
		where
			with-spxverify(
				<debug>$[-- SPXLang Build: build option : [build-opt]];
				enable-command-line-mode;
				if <equal-strings>(build-opt , "-c")  then
					(	index-clearall 	<+ 
						<debug>$[-- Index cleanup failed . Please clean index by invoking builder from the transform menu before building again.]
						; fail
				  );
					<debug>$[-- Initializing clean build.]
				else
					<debug>$[-- Initializing Incremental Build.]
				end;  
				<build-all>();  //building all the spx files in the sources directory
				compile-unload; // saving compile state and releasing resources 
				<debug>$[-- Intermediate artefacts have been generated successfully.]
			)
			
rules
	
	spxlang-editor-init(|project-path) =
		with-spxverify(	
					editor-init	
		 		; rules(ProjectPath := project-path)
		 		; initialize-configuration
		 		, "Failed to initialize editor" 
 		  )
	
	editor-build-all-after-cleanup:
		(selected, position, ast, path, project-path) -> None()
		where	<debug>$[----------------------------starting compile + build all----------------------------]
					; spxlang-editor-init(|project-path)
	  			; clean-spx (| project-path)
					; with-spxverify(
							abs-path := <concat-strings>[project-path, "/" ,path]
						;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
	  				; <build-all>()
	  				)  

	    //TODO delete all the folder from spxcache
  editor-clean-and-compile-spx-all : 
  	(selected, position, ast, path, project-path) -> None()
  	where spxlang-editor-init(|project-path)
  				; clean-spx (| project-path)
  	where abs-path := <concat-strings>[project-path, "/" ,path]
	   			; with-spxverify( 
	  	 	 			<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path , ast)	 
						; <compile-all>()
						, !"compile-spx failed due to error in complile-all"
			 			) 
  
	editor-compile-spx-all-incrementally:
		(selected, position, ast, path, project-path) -> None()
		where <debug>$[------Starting Compile Incrementally------]
			 		; spxlang-editor-init(|project-path)
		   		; abs-path := <concat-strings>[project-path, "/" ,path]
		   		; with-spxverify( 
		   	 			<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path , ast)	 
						; <compile-all>()
						, !"compile-spx failed due to error in complile-all"
				 		)

	editor-clean-spx:  
		(selected, position, ast, path, project-path) -> None()
		where	clean-spx(|project-path)

	
rules 
	
	clean-spx(|project-path) = 
		with-spxverify(
			index-clearall;
			<refresh-workspace-file>project-path;
    	<debug>$[------Index Cleanup is done ------]
  	)

				
	editor-build-all:
		(selected, position, ast, path, project-path) -> None()
		where verify-if-has-errors  
		where <debug>$[----------------------------starting compile + build all----------------------------];
					spxlang-editor-init(|project-path);
		  		with-spxverify(
							abs-path := <concat-strings>[project-path, "/" ,path]
						;	<store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
	  				; <build-all>()
	  			)  

	verify-if-has-errors = 	
		not(HasErrors)	<+
		<debug>$[Build Failed.Please fix the errors before building the artifacts...];
		fail
		