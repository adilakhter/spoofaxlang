module codegen/buildscripts

imports 
  lib/editor-common.generated
  lib/Configuration/SpoofaxConfiguration
imports 
	include/SpoofaxLang
	
imports 
	common
	config 
	utils/path
	normalize/-
	context/-
	codegen/-
	utils/contract

					
rules
	emit-build-script: 
		package-qnames* -> package-qnames*  
		where
 			with-spxverify(
	 			 project-path             := <ProjectPath>
	 			 ; main-ant-output-file-name    := "build.spx.main.generated"
				 ; autogen-ant-output-file-name := "build.spx.packages.generated"
			   ; autogen-ant-output-path      := <concat-strings>[project-path  , "/.build/" ,  autogen-ant-output-file-name , ".xml"]
				 ; main-ant-output-path         := <concat-strings>[project-path  , "/.build/" ,  main-ant-output-file-name    , ".xml"]
			 	 , !"Failed to initialize properties"
			);  
			<generate-autogenerated-build-file> ( autogen-ant-output-path, autogen-ant-output-file-name);   
			<generate-main-build-spx-file> (package-qnames* , main-ant-output-file-name, main-ant-output-path, autogen-ant-output-file-name)
			
		generate-main-build-spx-file =
			?(package-qnames* , main-ant-output-file-name, main-ant-output-path, autogen-ant-output-file-name);
			cache-path := <spx-cache-path(|"cache.buid.xml")>main-ant-output-path;
			<dirname; ensure-directory-exists> main-ant-output-path; // ensures the directory exists
			
			// OPTIMIZATION : only generating the ant script specific to packages 
			// if there is a new package or if there is mismatch in the number of packages generated last 
			// time and this time. 
			//
			// Thus, it only generates the package specific ANT script fragements only if 
			// there is any modification on the list of packages to be compiled
			if not(<file-exists>cache-path) <+ not(<packages-not-modified>package-qnames*) then 
				with-spxverify(
					packages-specific-ant-string := <packages-specific-ant>(package-qnames*, main-ant-output-file-name ,autogen-ant-output-file-name);
					<save-to-file>(cache-path ,packages-specific-ant-string);
					<refresh-file>cache-path;
					<index-generated-package-ids> package-qnames* 
					, !$[Failed to create autogen build script - [main-ant-output-file-name]]  	
				);
				
				ensure-build-file-is-upto-date( id |cache-path , main-ant-output-path)
			end;
			ensure-build-file-is-upto-date( not(<file-exists> main-ant-output-path) <+ <is-newer> (main-ant-output-path, cache-path) |cache-path , main-ant-output-path) 
		
		 packages-not-modified: 
			new-package-qnames*  -> <id>
		 	 where 
		 	 	old-package-qnames* := <get-generated-package-ids>;  
		 		if <eq>(<length>new-package-qnames* , <length>old-package-qnames*) then 
		 			!new-package-qnames* ;
		 			list-loop(
		 				<elem>(<id> , old-package-qnames*)
		 			) 
		 		else
		 			fail
	 			end	   
		
		ensure-build-file-is-upto-date ( s |cache-path , main-path) =
			if s then
				with-spxverify( 
					<copy-file>(cache-path ,main-path);
					<refresh-file>main-path
					, !$[Failed to copy build script from cache to the build directory]
					)  
			end 
			
		
		generate-autogenerated-build-file = 		
			?(autogen-ant-output-path ,autogen-ant-output-file-name);
			<dirname; ensure-directory-exists> autogen-ant-output-path; // ensures the directory exists 
			cache-path := <spx-cache-path(|"cache.buid.xml")>autogen-ant-output-path;
			if not(<file-exists>cache-path) then 
				with-spxverify(
			 		<save-to-file>(cache-path , <get-ant-autogeneratedscript>())
					, !$[Failed to create autogen build script - [autogen-ant-output-file-name]]
			 	);
			 	ensure-build-file-is-upto-date( id |cache-path , autogen-ant-output-path)
			end;
		 	ensure-build-file-is-upto-date(  not(<file-exists>autogen-ant-output-path) <+ <is-newer>(autogen-ant-output-path , cache-path)  |cache-path , autogen-ant-output-path)
		 	
		
		packages-specific-ant: (pakage-qname*, main-ant-output-file-name ,autogen-ant-output-file-name)  ->
$[<?xml version="1.0" encoding="UTF-8" ?>
		
<project name="[main-ant-output-file-name]" default="build-spx-packages">
    <!-- autogenerated artifacts relative directory path -->	
    <property name="packages.root" location="[packages-root]"/>
    
    <import file="[autogen-ant-output-file-name].xml"/>
    [<map(emit-package-specific-ant)>pakage-qname*]
    
    <!-- Main target -->
    <target name="build-spx-packages">
      [build-package-dependencies]
    
    </target>
  	
</project>] 
	where 
		with-spxverify( 
			packages-root                :=	<get-autogenerated-artifacts-dir>;
			build-package-dependencies   :=	<map(get-package-target-name);concat-strings>pakage-qname*
		)
	
	emit-package-specific-ant : p@Package(package-untyped-qname@QName(qname-parts*)) -> $[ 
  <target name="[package-target-name]">
    <property name="package.path" location="[package-directory]"/>
    <property name="lang.id.specific.directoy"    location="${src-gen}/[language-id-directory]"/>
    <property name="lang.id.specific.subdirectoy" value ="[language-id-directory]"/>
    <property name="package.name"                 value = "[language-name]"/>
    <property name="package.qname"                value = "[package-qname-string]"/>
    <property name="package.main.sdf.module"      value = "[language-name]"/>
    <property name="package.main.str.module"      value = "[language-name]"/>
    <property name="package.main.esv.module"      value = "[language-name].main"/>
    <property name="metasdfmodule"                value = "Stratego-[language-name]"/>
    <property name="lang.sdf.specific.params"     value = "[language-sdf-specific-params]"/>
    <property name="lang.str.specific.params"     value = "[language-str-specific-params]"/>
    
    <antcall target = "spx.default">
      <param name = "package.name"                  value = "${package.name}"/>
      <param name = "package.qname"                 value = "${package.qname}"/>
      <param name = "package.path"                  value = "${package.path}"/>
      <param name = "lang.id.specific.directoy"     value = "${lang.id.specific.directoy}"/>
      <param name = "lang.id.specific.subdirectoy"  value = "${lang.id.specific.subdirectoy}"/>
      <param name = "package.main.sdf.module"       value = "${package.main.sdf.module}"/>
      <param name = "package.main.str.module"       value = "${package.main.str.module}"/>
      <param name = "package.main.esv.module"       value = "${package.main.esv.module}"/>
      <param name = "metasdfmodule"                 value = "${metasdfmodule}"/>
      <param name="lang.sdf.specific.params"        value="${lang.sdf.specific.params}"/>
      <param name="lang.str.specific.params"        value="${lang.str.specific.params}"/>
    </antcall>
  </target>	
	]
	where 
		with-spxverify(
			relative-autogen-path         :=  <qname-to-path>package-untyped-qname
			; package-directory		        := $[[<get-autogenerated-artifacts-dir>]/[relative-autogen-path]]
	 		; language-name						 	  := <get-language-name>p
	 		; language-id-directory			  := <get-language-id<+get-default-language-id; language-id-to-file-path>p
	 		; package-target-name				  := <get-package-target-name>package-untyped-qname  
	 		; package-qname-string			  :=  <package-qname-to-string>p
	 		; language-sdf-specific-params  := <get-idef-args>p 
	 		; language-str-specific-params  := ""	 
	 		, !"Failed emit-package-specific-ant" 
 		) 

rules
	
	get-package-target-name : 
		Package(q@QName(qname-parts*)) -> 
$[  
  <echo> Invoking following ANT target : "build.package.[package-qname-str]" </echo>
  <antcall target="build.package.[package-qname-str]" />]
    where
      package-qname-str					:= 	<convert-qname(|".")>q
	
	get-package-target-name : 
		package-qname@QName(qname-parts*) -> $[build.package.[package-qname-str]]
		where
			package-qname-str					:= 	<convert-qname(|".")>package-qname

	language-id-to-file-path =
			where(is-string);
			string-tokenize(|<explode-string>".");
			separate-by(|"/");
			concat-strings
	
	get-idef-args = get-imported-defs-of-package  ; map(\s -> $[ -Idef &quot;${basedir}/[s].def&quot; ]\) 		
		
rules
			
	get-ant-autogeneratedscript : 
		() -> $[<?xml version="1.0" encoding="UTF-8" ?>
<project name="build.spx.generated">
  <target name="spx.default" depends="[default-spx-target]"/>
  <target name="spx.default.ctree" depends="refresh,setup-params,check-classpath,init,sdf2table,meta-sdf2table, ppgen,pppack,stratego.aster,stratego.ctree,java.jar,sdf2imp, refresh"/>
  <target name="spx.default.jar"   depends="refresh,setup-params,check-classpath,init,sdf2table,meta-sdf2table,ppgen,pppack,stratego.aster,stratego.jar,java.jar,sdf2imp,refresh"/>
	
  <!-- Initialization -->
  <fail unless="build" message="Please use build.spx.main.xml to build this project or configure the required properties manually"/>
  <mkdir dir="${build}"/>
  <mkdir dir="${src-gen}"/>
  <mkdir dir="${dist}"/>
  <mkdir dir="${include}"/>

  <target name="setup-params">
    <available file="${build}/${lang.id.specific.subdirectoy}/strategies/Main.class" property="java.jar.enabled"/>
    <available file="${packages.root}/${package.main.str.module}.rtree" property="build.stratego.enabled"/>
    <dirname property="externaldefdir" file="${externaldef}"/>
    
     <condition property="java.jar.import" value="-la ${package.qname}.strategies" else="">
        <isset property="java.jar.enabled"/>
      </condition>
      <condition property="java.jar.classpath" value=":${include}/${package.main.str.module}-java.jar" else="">
        <isset property="java.jar.enabled"/>
      </condition>
      <condition property="externaldefimport" value="-I ${externaldefdir}" else="">
        <isset property="externaldef"/>
      </condition>
      <condition property="externaljarimport" value=":${externaljar}" else="">
        <isset property="externaljar"/>
      </condition>
      <condition property="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter">
        <isset property="eclipse.running"/>
      </condition>
      <condition property="externaljarflags" value="${externaljarflags}" else="">
        <isset property="externaljarflags"/>
      </condition>
      <condition property="metasdfmodule.available" value="1">
        <available file="${packages.root}/${metasdfmodule}.sdf"/>
      </condition>
  </target>

  <target name="init" if="eclipse.running">
    <!-- refresh one file/dir in the project to trigger an Ant rebuild with the next build command -->
    <java classname="org.strategoxt.imp.metatooling.building.AntForceRefreshScheduler" failonerror="false">
        <arg value="${include}"/>
    </java>
  </target>
        
  <target name="check-classpath">
    <available classname="org.strategoxt.imp.generator.sdf2imp" property="check-classpath.available"/>
    <antcall target="check-classpath.helper"/>  
  </target>
      
  <target name="java.jar" if="java.jar.enabled">
    <jar basedir="${build}" excludes="{packages.root}/**" update="true" destfile="${include}/${package.name}-java.jar"/>
  </target>
		
  <target name="check-classpath.helper" unless="check-classpath.available">
    <echo level="error" message="Could not load the Spoofax plugin loading classes."/>
    <echo level="error" message="Make sure it is on the class path."/>
    <echo level="error" message=""/>               
    <echo level="error" message="In Eclipse, make sure the Ant builder is configured properly:"/>
    <echo level="error" message="right-click on build.main.xml, go to Run as, Ant build..., JRE tab,"/>
    <echo level="error" message="and ensure Run in the same JRE as the workspace is selected"/>
    <echo level="error" message="alternatively, build the project using Build Project in the Project menu"/>
    <fail/>
  </target>
	        
    <!--lots of redundant steps. TODO : remove the redundant build steps-->
    <target name="refresh" if="eclipse.running">
        <eclipse.convertPath fileSystemPath="${basedir}" 			  property="projectdir"/>
        
        <eclipse.convertPath fileSystemPath="${packages.root}"        property="packages.root.dir"/>
        <eclipse.convertPath fileSystemPath="${package.path}" 	      property="package.root.dir"/>
        
        <eclipse.convertPath fileSystemPath="${include}" 			  property="includedir"/>
        <eclipse.convertPath fileSystemPath="${src-gen}" 			  property="eclipse.path.src-gen"/>
        
        <eclipse.convertPath fileSystemPath="${build}" 				  property="eclipse.path.build"/>	
        <eclipse.convertPath fileSystemPath="${basedir}/.build" property="builddir"/>
        
        <eclipse.refreshLocal resource="${package.path}" depth="infinite"/>
        <eclipse.refreshLocal resource="${packages.root.dir}" depth="infinite"/>
        <eclipse.refreshLocal resource="${package.root.dir}" depth="infinite"/>
      
        <eclipse.refreshLocal resource="${builddir}" depth="infinite"/>
        <eclipse.refreshLocal resource="${includedir}" depth="infinite"/>
        
        <eclipse.refreshLocal resource="${eclipse.path.src-gen}" depth="infinite"/>
        <eclipse.refreshLocal resource="${eclipse.path.build}" depth="infinite"/>
    </target>
    
        
		<target name="utils-files"> <!-- only useful for builds outside of Eclipse -->
        <mkdir dir="utils"/>
        <copy file="${eclipse.spoofaximp.jars}/make_permissive.jar" todir="utils" failonerror="false"/>
        <copy file="${eclipse.spoofaximp.jars}/sdf2imp.jar" todir="utils" failonerror="false"/>
        <copy file="${eclipse.spoofaximp.jars}/aster.jar" todir="utils" failonerror="false"/>
        <copy file="${eclipse.spoofaximp.strategojar}" todir="utils" failonerror="false"/>
  	</target>
  
	  <!-- Pack SDF -->
	  <target name="pack-sdf" unless="externaldef">
        <dependset>
            <srcfileset dir="${packages.root}">
                <include name="**/*.sdf"/>
            </srcfileset>
            <targetfileset file="${include}/${package.name}.def"/>
        </dependset>
        <available file="${include}/${package.name}.def" property="pack-sdf.available"/>
        <antcall target="pack-sdf.helper"/>
    </target>

    <target name="pack-sdf.helper" unless="pack-sdf.available">
        <condition property="utils-include" value="-I ${utils}" else="">
            <available file="${utils}"/>
        </condition>
        <java classname="run" failonerror="true">
            <arg value="org.strategoxt.tools.main-pack-sdf"/>
            <arg value="-i"/>
            <arg value="${packages.root}/${package.main.sdf.module}.sdf"/>
            <arg value="-o"/>
            <arg value="${include}/${package.name}.def"/>
            <arg value="-I"/>
            <arg value="${packages.root}"/>
            <arg value="-I"/>
            <arg value="${package.path}"/>
            <arg line="${utils-include}"/>
            <arg line="${build.sdf.imports}"/>
            <arg line="${lang.sdf.specific.params}"/>
        </java>
    </target>
	
  <target name="copy-sdf" if="externaldef">
    <copy file="${externaldef}" tofile="${include}/${package.name}.def" preservelastmodified="true"/>
  </target>

  <!-- SDF-To-Table -->
  <target name="meta-sdf2table" if="metasdfmodule.available">
    <fail unless="eclipse.spoofaximp.jars" message="Property eclipse.spoofaximp.jars must point to the directory containing StrategoMix.def"/>
    <antcall target="sdf2table">
      <param name="sdfmodule" value="${metasdfmodule}"/>
      <param name="build.sdf.imports" value="-Idef &quot;${eclipse.spoofaximp.jars}/StrategoMix.def&quot; ${build.sdf.imports}"/>
    </antcall>
    <antcall target="meta-sdf2table.helper"/>
  </target>
	
	<target name="meta-sdf2table.helper" if="eclipse.running">
	   <eclipse.convertPath fileSystemPath="${include}" property="includeresource"/>
	   <eclipse.refreshLocal resource="${includeresource}/${metasdfmodule}.tbl" depth="infinite"/>
    </target>
	
	<target name="sdf2table" depends="make-permissive">
		<apply executable="${build.strategoxt.sdf}sdf2table" dest="${include}" failonerror="true">
			<arg value="-i"/>
			<srcfile/>
			<arg value="-o"/>
			<targetfile/>
			<arg value="-m"/>
			<arg value="${package.name}"/>
			
			<fileset file="${include}/${package.name}-Permissive.def"/>
			<mapper type="glob" from="*-Permissive.def" to="*.tbl"/>
		</apply>
   </target>
	
	<target name="make-permissive" depends="pack-sdf,copy-sdf">
		<dependset>
			<srcfileset file="${include}/${package.name}.def"/>
			<targetfileset file="${include}/${package.name}-Permissive.def"/>
    </dependset>
		<available file="${include}/${package.name}-Permissive.def" property="permissive-grammar.available"/>
    <antcall target="make-permissive.helper"/>
  </target>
	
	<target name="make-permissive.helper" unless="permissive-grammar.available">
		<java classname="org.strategoxt.permissivegrammars.make_permissive" failonerror="true">
			<arg value="-i"/>
			<arg value="${include}/${package.name}.def"/>
			<arg value="-o"/>
			<arg value="${include}/${package.name}-Permissive.def"/>
			<arg line="--optimize on"/>
        </java>
    </target>
	
	
	<!-- PP Generation -->
	<target name="ppgen" if="build.stratego.enabled" depends="pack-sdf">
	  <dependset>
	      <srcfileset    file="${include}/${package.name}.def"/>
	      <targetfileset file="${include}/${package.name}.generated.pp"/>
	      <targetfileset file="${include}/${package.name}.generated.pp.af"/>
	  </dependset>
	  <available file="${include}/${package.name}.generated.pp.af" property="ppgen.available"/>
	  <antcall target="ppgen.helper"/>
	  <available file="${include}/${package.name}.generated.pp.af" property="ppgen.available"/>
	  <antcall target="ppgen.helper.fallback"/>
	</target>
	    
  <target name="ppgen.helper" unless="ppgen.available">
      <!-- Any failures here are ignored; they are only a problem when imported from Stratego -->
      <java classname="run" failonerror="false">
          <arg value="org.strategoxt.tools.main-ppgen"/>
          <arg value="-i"/>
          <arg value="${include}/${package.name}.def"/>
          <arg value="-o"/>
          <arg value="${include}/${package.name}.generated.pp.af"/>
          <arg value="-t"/>
      </java>
  	
      <java classname="run" failonerror="false">
          <arg value="org.strategoxt.tools.main-pp-pp-table"/>
          <arg value="-i"/>
          <arg value="${include}/${package.name}.generated.pp.af"/>
          <arg value="-o"/>
          <arg value="${package.path}/${package.name}.generated.pp"/>
      </java>
  </target>
	    
  <target name="ppgen.helper.fallback" unless="ppgen.available">
  	<echo file="${include}/${package.name}.generated.pp.af" message="PP-Table($[$ $]$)"/>
  </target>
  
	
	<!-- PP Packing -->
  <target name="pppack" if="build.stratego.enabled" depends="pack-sdf">
      <dependset>
          <srcfileset file="${package.path}/${package.name}.pp"/>
          <targetfileset file="${include}/${package.name}.pp.af"/>
      </dependset>
      <available file="${package.path}/${package.name}.pp" property="pppack.source-available"/>
      <available file="${include}/${package.name}.pp.af" property="pppack.available"/>
      <antcall target="pppack.helper"/>
      <available file="${include}/${package.name}.pp.af" property="pppack.available"/>
      <antcall target="pppack.helper.fallback"/>
  </target>
	
	 <target name="pppack.helper" unless="pppack.available" if="pppack.source-available">
	 	<java classname="run" failonerror="true">
	  	<arg value="org.strategoxt.tools.main-parse-pp-table"/>
	    <arg value="-i"/>
	    <arg value="${package.path}/${package.name}.pp"/>
	    <arg value="-o"/>
	    <arg value="${include}/${package.name}.pp.af"/>
	  </java>
	</target>

	<target name="pppack.helper.fallback" unless="pppack.available">
      <echo file="${include}/${package.name}.pp.af" message="PP-Table($[$ $]$)"/>
  </target>
	
	<target name="copy-jar" if="externaljar">
  	<copy file="${externaljar}" todir="${include}" preservelastmodified="true"/>
  </target>
	
	<!-- Generates Signature file  *.STR from RTG file -->
	<target name="rtg2sig" if="build.stratego.enabled" depends="sdf2rtg">
		<dependset>
	  	<srcfileset file="${include}/${package.name}.rtg"/>
	   	<targetfileset file="${include}/${package.name}.str"/>
	  </dependset>
	  <available file="${include}/${package.name}.str" property="rtg2sig.available"/>
	  <antcall target="rtg2sig.helper"/>
	</target>
	    
	<target name="rtg2sig.helper" unless="rtg2sig.available">
		<java classname="run" failonerror="true">
	  	<arg value="org.strategoxt.tools.main-rtg2sig"/>
    	<arg value="-i"/>
	    <arg value="${include}/${package.name}.rtg"/>
	    <arg value="-o"/>
	    <arg value="${include}/${package.name}.str"/>
	    <arg value="--module"/>
	    <arg value="${sdfmodule}"/>
	 	</java>
	</target>
	 
	
	<!-- Generates *.RTG file from SDF *def files  -->
	<target name="sdf2rtg" depends="pack-sdf,copy-sdf">
		<dependset>
	  	<srcfileset file="${include}/${package.name}.def"/>
	    <targetfileset file="${include}/${package.name}.rtg"/>
	  </dependset>
	  <available file="${include}/${package.name}.rtg" property="sdf2rtg.available"/>
	  <antcall target="sdf2rtg.helper"/>
	</target>
	    
	<target name="sdf2rtg.helper" unless="sdf2rtg.available">
		<java classname="run" failonerror="true">
	  	<arg value="org.strategoxt.tools.main-sdf2rtg"/>
	    <arg value="-i"/>
	    <arg value="${include}/${package.name}.def"/>
	    <arg value="-m"/>
	    <arg value="${sdfmodule}"/>
			<arg value="-o"/>
	    <arg value="${include}/${package.name}.rtg"/>
	    <arg value="--ignore-missing-cons"/>
	    <arg value="-Xnativepath"/>
	    <arg value="${build.strategoxt.sdf}"/>
	 </java>
	</target>
	
	
  <!-- Aster to Stratego -->
   <target name="stratego.aster">
       <available file="${packages.root}/${package.main.str.module}.rtree" property="aster-output.available"/>
       <pathconvert property="aster-input" setonempty="false" pathsep=" ">
           <path><fileset dir="${basedir}" includes="*.astr"/></path>
       </pathconvert>
       <dependset>
           <srcfileset dir="${basedir}">
               <include name="**/*.astr"/>
           </srcfileset>
           <targetfileset file="${packages.root}/${package.main.str.module}.rtree"/>
       </dependset>
       <condition property="aster-output.uptodate">
           <and>
               <isset property="aster-output.available"/>
               <available file="${packages.root}/${package.main.str.module}.rtree"/>
           </and>
       </condition>
       <available file="${packages.root}/${package.main.str.module}.rtree" property="aster-output.uptodate"/>
       <antcall target="stratego.aster.helper"/>
   </target>

   <target name="stratego.aster.helper" if="aster-input" unless="aster-output.uptodate">
       <java classname="org.strategoxt.aster.Main" failonerror="true">
           <arg value="-i"/>
           <fileset dir="${packages.root}">
               <include name="**/*.astr"/>
           </fileset>
       </java>
   </target>
	
   <!-- Stratego to Java compiler -->
   <target name="stratego.jar" depends="utils-files">
        <dependset>
            <srcfileset dir="${package.path}">
                <include name="**/*.str"/>
                <include name="**/*.astr"/>
            </srcfileset>
            <targetfileset file="${lang.id.specific.directoy}/generated/${package.name}.java"/>
         </dependset>
         
         <mkdir dir="${lang.id.specific.directoy}/generated"/>
         <available file="${lang.id.specific.directoy}/generated/${package.name}.java" property="strc-java.available"/>
         <antcall target="copy-jar"/>
         <antcall target="stratego.jar.deletehelper"/>
         
         <antcall target="stratego.jvm.helper">
            <param name="build.stratego.outputfile" value="${lang.id.specific.directoy}/generated/${package.name}.java"/>
            <param name="build.stratego.extraargs" value="-la java-front ${java.jar.import}"/>
         </antcall>
         
         <javac 
            classpath="utils/strategoxt.jar:${src-gen}${externaljarimport}${java.jar.classpath}" srcdir="${src-gen}" 
            includes="${lang.id.specific.subdirectoy}/generated/**" 
            destdir="${build}" 
            source="1.5" 
            target="1.5" 
            debug="on"
        />
        
        <!-- copy imported terms -->
        <copy todir="${build}/${lang.id.specific.subdirectoy}/generated">
            <fileset dir="${lang.id.specific.directoy}/generated" excludes="**/*.java"/>
        </copy>
        
        <jar basedir="${build}" includes="${lang.id.specific.subdirectoy}/generated/**" destfile="${include}/${package.name}.tmp.jar"/>
        <move file="${include}/${package.name}.tmp.jar" tofile="${include}/${package.name}.jar"/>
        <delete>
            <fileset dir="${build}" includes="${lang.id.specific.subdirectoy}/generated/**"/>
        </delete>
     </target>
	
	
		<!-- Stratego to Java interpreter -->
    <target name="stratego.ctree" >
    	<dependset>
            <srcfileset dir="${packages.root}">
                <include name="**/*.rtree"/>
                <include name="**/*.str"/>
            </srcfileset>
            <targetfileset file="${include}/${package.name}.ctree"/>
      </dependset>
      
      <mkdir dir="${src-gen}/${lang.id.specific.subdirectoy}/generated"/>
      <available file="${include}/${package.name}.ctree" property="strc-java.available"/>
      
      <antcall target="copy-jar"/>
      <antcall target="stratego.jvm.helper">
      	<param name="build.stratego.outputfile" value="${include}/${package.name}.ctree"/>
      	<param name="build.stratego.extraargs" value="-F"/>
      </antcall>
    </target>
        
    <target name="stratego.jar.deletehelper" unless="strc-java.available">
	    <delete>
	      	<fileset dir="${src-gen}" includes="${lang.id.specific.subdirectoy}/generated/**"/>
          <fileset dir="${build}" includes="${lang.id.specific.subdirectoy}/generated/**"/>
      </delete>
	  </target>
            
    <target name="stratego.jvm.helper" unless="strc-java.available" if="build.stratego.enabled">
        <delete file="${include}/${package.name}.rtree" failonerror="false"/>
        <java classname="org.strategoxt.strj.Main" failonerror="true">
            <arg value="-I"/>
            <arg value="${package.path}"/>
            <arg value="-i"/>
            <arg value="${packages.root}/${package.main.str.module}.str"/>
            <arg value="-o"/>
            <arg value="${build.stratego.outputfile}"/>
            <arg value="-p"/> 
            <arg value="${package.qname}.___autogenerated"/>  <!-- Note : added this extra parameter since, java package name does not allow dash unlike the ID is defined-->
            <arg value="--library"/>
            <arg value="--clean"/>
            <arg line="${build.stratego.args}"/>
            <arg line="${build.stratego.extraargs}"/>
            <arg line="${externaljarflags}"/>
            <arg line="${externaldefimport}"/>
            <arg line="-I &quot;${include}&quot; --cache-dir &quot;${basedir}/.cache&quot;"/>
            <arg line="${lang.str.specific.params}"/>
        </java>
        <delete file="${include}/${package.name}.rtree" failonerror="false"/>
        <mkdir dir="${build}/${lang.id.specific.subdirectoy}/generated"/>
    </target>
                
    <target name="clean" description="clean up">
      <delete dir="${build}"/>
      <delete file="${include}/${package.main.sdf.module}.def"/>
      <delete dir="${lang.id.specific.directoy}/generated/"/>
    </target>
	
	  <!-- <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse,sdf2imp.standalone"/> -->
	  
	  <target name="sdf2imp" depends="sdf2table,sdf2imp.eclipse"/>
	        
		<target name="sdf2imp.eclipse" if="eclipse.running" >
			<copy file="${packages.root}/${package.main.esv.module}.esv" tofile="${include}/${package.name}.packed.esv" preservelastmodified="true"/>
			<copy file="${packages.root}/${package.main.esv.module}.esv" tofile="${include}/${package.name}.main.esv" preservelastmodified="true"/>
			<antcall target = "refresh"/>  
			<java classname="org.strategoxt.imp.metatooling.building.AntSpxDescriptorBuilder" failonerror="true">
				<arg value="${include}/${package.name}.packed.esv"/> <!-- esv main file-->
			</java>
		</target>
	
  <target name="sdf2imp.standalone" unless="eclipse.running" depends="sdf2table,sdf2rtg">
		<java classname="org.strategoxt.imp.generator.sdf2imp" failonerror="true">
			<arg value="-i"/>
      <arg value="${packages.root}/${package.main.esv.module}.packed.esv"/>
      <arg value="-p"/>
      <arg value="${include}/${package.name}.tbl"/>
    </java>
  </target>
</project>
]
	where
		if <eq>(Jar() , <get-str-output-strategy> ) then 
			default-spx-target := "spx.default.jar"
		else
			default-spx-target := "spx.default.ctree"
		end		