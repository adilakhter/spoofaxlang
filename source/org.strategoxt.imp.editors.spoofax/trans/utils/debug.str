module utils/debug

imports
	common
	context/signatures
	context/symboltable
	context/scope-tree
	
signature 
	constructors 
		DegugAllFlag               : Flag 
		DebugStrFlag               : Flag 
		DebugSDFFlag               : Flag 
		DebugDeclarationFlag       : Flag   
		DebugSymbolTableFlag       : Flag
		DebugCompilerFlag          : Flag  
		DebugSemanticAnalysisFlag  : Flag


rules
	debug-level-INFO = !"Info"
	
	debug-level-WARNING = !"Warning"
	
	debug-level-ERROR  = !"Error" 
	
	debug-at-generator = !"Generator"
	
	debug-at-linker = !"Linker"
			
rules 
	
	is-debug-enabled : 
		flag -> <id>
		where
			to-index := <get-constructor>flag;
			<get-declared(|flag)> to-index 
					  
	enable-debug-flag : 
		flag -> <id>
		where
			with-spxverify(
				to-index := <get-constructor>flag;
				<store-declared(| flag)> ( to-index, to-index)
		  )   	
	
	disable-debug-flag :
		flag -> <id>
		where
			with-spxverify(
				to-index := <get-constructor>flag;
				<undef-declared(| flag)> to-index
		  )
 	 
rules
	
	enable-debug-all   = where(!DegugAllFlag() ;  enable-debug-flag)

	disable-debug-all  = where(!DegugAllFlag() ;  disable-debug-flag) 

	DebugAll = where(!DegugAllFlag() ; is-debug-enabled)
rules

		// Debug switches
	enable-declaration-debugging  = where(!DebugDeclarationFlag() ;  enable-debug-flag)

	disable-declaration-debugging = where(!DebugDeclarationFlag() ;  disable-debug-flag)

	dbg-declaration(msg|site, type) = where(not(<is-debug-enabled>DebugDeclarationFlag() <+ DebugAll) <+   <debug>$[ $[$Declaration | [site] | [type] $]$ [<msg>]])

rules
		
	enable-symboltable-debugging  = where(!DebugSymbolTableFlag() ;  enable-debug-flag)

	disable-symboltable-debugging = where(!DebugSymbolTableFlag() ;  disable-debug-flag)

  dbg-symboltable(msg|site, type)  = where(not(<is-debug-enabled>DebugSymbolTableFlag() <+ DebugAll) <+  <debug>$[$[$SymbolTable | [site] | [type] $]$  [<msg>]])

rules  
  enable-semantic-analysis-debugging  = where(!DebugSemanticAnalysisFlag() ;  enable-debug-flag)

	disable-semantic-analysis-debugging  = where(!DebugSemanticAnalysisFlag() ;  disable-debug-flag)

  dbg-analysis(msg|site, type)  = where(not(<is-debug-enabled>DebugSemanticAnalysisFlag() <+ DebugAll) <+  <debug>$[$[$Analysis| [site] | [type] $]$  [<msg>]])

rules

	enable-compiler-debugging    = where(!DebugCompilerFlag() ;  enable-debug-flag)

	disable-compiler-debugging   = where(!DebugCompilerFlag() ;  disable-debug-flag)

 	debug-compiler(msg) = where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler$]$ [<msg>]])  
	
	debug-compiler(msg | site, type) =  where(not(<is-debug-enabled>DebugCompilerFlag() <+ DebugAll)<+   <debug>$[ $[$Compiler|[site]|[type]$]$ [<msg>]])  

	
rules

 	debug-time(s|msg) =
      where(starttime := <times>)
    ; s
    ; where(
          total := <diff-times> (<times>,starttime)
        ; t1 := <self-children-user-time; ticks-to-seconds; real-to-string(|3)> total
        ; <concat-strings> [msg, ": ", t1, " s"]
        ; debug
      )

rules
	throw-unable-read-exception(|message) = debug(!message);fail
	
	throw-unable-read-file = debug(!"unable to read file : ")

rules
	throw-precompile-exception = debug(!"Could not precompile: "); fail
	
	throw-invalid-argument-exception(|strategy-name) = <debug>$[invalid argument at [strategy-name] : [<print-as-string><id>]]; fail
