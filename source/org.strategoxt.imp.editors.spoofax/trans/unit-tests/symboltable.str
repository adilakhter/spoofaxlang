	module unit-tests/symboltable

imports 
	normalize/-
	include/spoofaxlang
	lib/editor-common.generated
	context/symboltable
	common
	context/-
	utils/debug
imports 
  context/str/signature-generator

signature constructors

rules 
	
	test-constructors1: 	
		(selected, position, ast, path, project-path) -> None()
		where
				packageDef := PackageDecl(Package( ["test" , "A"]) , "String Path ");
				<debug(!"Test PackageDef : ")>packageDef

	test-constructors2: 	
		(selected, position, ast, path, project-path) -> None()
		where
				moduleDef := ModuleDef(Module( ["test" , "A"]) , "String Path 2" , Package(["test"]) , Module(None(), SPXModuleName("Outliner"), []) , Module(None(), SPXModuleName("Outliner"), []));
				<debug(!"Test ModuleDef : ")>moduleDef
		where		
				packageDef := PackageDecl(Package( ["test" , "A"]) , "String Path ");
				<index-module-definition'>
				  ModuleDef(
			      Module(QName(["test" , "A"])) ,  // name of the module 
			      "StringPath2" ,  // path 
			      Package(["test"]) , // package name  
			      Module(None(), SPXModuleName("Outliner"), []) , // ast  
			      Module(None(), SPXModuleName("Outliner"), [])  // annotated ast 
		      )
	      
rules 
	test-spx-index-init:
    (selected, position, ast, path, project-path) -> None()
    where
    	debug(!"Invoking : SPX_index_init");
      prim("SPX_index_init" , "test");
      debug(!"SPX_index_init is ok!")
 		where
 			prim("SPX_index_add_module")

 		where
 			debug(!"Invoking : SPX_index_save");
      prim("SPX_index_save" , "test");
      debug(!"SPX_index_save is ok!")
      	

rules 
	test-spx-packagedeclaration-save: 
		(selected, position, ast, path, project-path) ->(filename, result) 
		where 
		  project-name := "test";
		  result := "";
	    filename := <guarantee-extension(|"test.aterm")> path
    where
      index-init
	
	test-spx-index-compilation-unit-save: 
		(selected, position, ast, path, project-path) ->(filename, result) 
		where 
		  project-name := "test";
		   filename := <guarantee-extension(|"test.aterm")> path
    where
      index-init;
    	full-path := <concat-strings>[project-path, "/" , path];
 		  parsedAST := <parse-file>full-path  ;
 		  <debug(!"Storing AST : ")>parsedAST ;
 		  <index-compilation-unit>(full-path , parsedAST);
 		  debug(!"Saving!");
 		  index-close;
 		  debug(!"Now reading it!");
 		  index-init;
 		  debug(!"Init is done!");
 		  debug(!"getting comp unit ? !");
 		  <get-indexed-compilation-unit>full-path;
      ?result
rules 
  // Initializes index  with the project name specifed  
  test-spx-index-init:
    (selected, position, ast, path, project-path) -> None()
     where
    	debug(!"Invoking : SPX_index_init");
      index-init;
      debug(!"SPX_index_init is ok!")
 
 
 	// TODO : add more real-life tests 
  test-spx-index-save:   
  	(selected, position, ast, path, project-path) -> None()
     where
    	debug(!"Invoking : SPX_index_save");
      index-close;
      debug(!"SPX_index_save is ok!")


rules 
	test-new-spx-index:
    (selected, position, ast', path, project-path) -> (filename, result'')
	 with  
      file-path := <concat-strings> [project-path , "/trans/" , "unit-tests/resources/test.spx"];
      ast := <parse-spoofaxlang-file> file-path 
    with index-init ; index-clearall
    with 
    	current-spx-file-path := file-path; 
	    filename := <guarantee-extension(|"aterm.desugared")> path;
	    result'   := <normalize-all> ( ast , currently-precompiling-spx-abspath) // returning desugared AST
	  with  
		     index-init;
         packageQName    := Package(QName(["test" , "lang"]));
         moduleQName     := Module(QName(["test" , "lang" , "Identifier"]));
         package-decl    := <get-indexed-package-declaration>packageQName
         where(<debug> $[Test Get Package Declaration  with : [<print-as-string>packageQName] , [<print-as-string>package-decl]]);
         
         module-def      := <get-indexed-module-definition>moduleQName 
         where(<debug> $[Test Get Module Definition with : [<print-as-string>moduleQName ] , [<print-as-string>module-def]]);
         result          :=   <get-indexed-module-declarations>file-path;
         result''        :=  <get-indexed-module-declarations>packageQName ;
         
         where(<debug> $[Testing get-declared-modules-qname]);
         list-modules-qanme := <get-declared-modules-qname> packageQName;
         where(<debug> $[ length of the list should be 4 . actual : [<print-as-string> <length>list-modules-qanme]]);
         where(<debug> $[Testing get-declared-modules-qname with list of package]);
         
         list-modules-qanme' := <get-declared-modules-qname> [packageQName];
         where(<debug> $[ length of the list should be 4 . actual : [<print-as-string> <length>list-modules-qanme']]);
         
         where(<debug> $[Testing get-all-declared-modules-qname]);
         list-modules-qanme-all := <get-all-declared-modules-qname>;
         where(<debug> $[ length of the list should be 4 . actual : [<print-as-string> <length>list-modules-qanme-all]]);
         
         where(<debug> $[Testing get-all-declared-package-qname]);
         list-package-qanme-all := <get-all-declared-packages-qname>;
         where(<debug> $[ length of the list should be 1 . actual : [<print-as-string> <length>list-package-qanme-all ]]);
         
         where(<debug> $[Testing get-declared-package-qname  of file ]);
         list-package-qanme := <get-declared-packages-qname> file-path;
         where(<debug> $[ length of the list should be 1 . actual : [<print-as-string> <length>list-package-qanme]]);
         
         index-close;
         index-init; 
         
         where(<debug> $[Testing get (desugared) module definition of : [<print-as-string>moduleQName]]);
         moduleAST := <get-desugared-module-ast> moduleQName     ;
         where(<debug> $[Found Following Module AST : [<print-as-string>moduleAST]]);
         
         where(<debug> $[Testing get module definition of : [<print-as-string>moduleQName]]);
         moduleAST' := <get-module-ast> moduleQName     ;
         where(<debug> $[Found Following Module AST : [<print-as-string>moduleAST']]);

         index-close;   
         index-init
         
             
         
    <+
        where(<debug> $[Error Occured during Indexing. Closing underlying connection...]);
        index-close; // if any error occurs , it tries to close the connection
        fail 
	  
	    
  
 test-new-spx-index1:
    (selected, position, ast', path, project-path) -> None()
    with index-init ; index-clearall
    with enable-symboltable-debugging
    with 
      [moduledef|_] := <collect-all-module-definition; debug(!"moduledefs :")> ast';
      <debug(!"module def :" )>moduledef;
      moduleID      := Module(QName(["test" , "lang" , "testM"]));
      scopedModuleID := <to-scoped-symbol>moduleID;
      <index-symbol-definition> ( scopedModuleID  ,ModuleType() , moduledef);
      debug(!"Indexing done!.Found following module def in index lookup :");
      namespace := <get-scope-from-symbol> scopedModuleID;
      key := <remove-scope-from-symbol> scopedModuleID;
      <debug(!"Trying to resolve symbol definition: ")>(namespace , key , ModuleType());  
      <resolve-all-symbol-definitions>(key , ModuleType());
      <debug(!" Results found ... with STRSections :  ")> <collect-all-str-sections>;
      index-close   
    <+
        where(<debug> $[Error Occured during Indexing. Closing underlying connection...]);
        index-close; // if any error occurs , it tries to close the connection
        fail 
    

  	
  collect-all-module-definition =  collect-om(?Module(_,_,_))
    
  collect-all-str-sections = collect-om(?STRSection(_))
          
  debug-symboltable-test :
    (selected, position, ast', path, project-path) -> None()
    where
      editor-init;
      dbg-symboltable(! "test" | "debug-symboltable-test" , "Info");
      debug(!"id :")


rules 
  // signature explode testing 
 test-str-signature:
    (selected, position, ast', path, project-path) -> None()
    where
     {  
      sig1 := ("strategoName" , 1 , 1)
      ;<debug(!"id : ")><signature-to-declaration-id>sig1
      ;<debug(!"sname : ")><signature-to-str-args-length>sig1
      ;<debug(!"tname : ")><signature-to-term-args-length>sig1
     } 
   where
     {
      sig1 := ("strategoName" , 1)
      ;<debug(!"id : ")><signature-to-declaration-id>sig1
      ;<debug(!"sname : ")><signature-to-str-args-length>sig1
      ;<debug(!"tname : ")><signature-to-term-args-length>sig1
     }
   where
     {
      sig1 := "strategoName"
      ;<debug(!"id : ")><signature-to-declaration-id>sig1
      ;<debug(!"sname : ")><signature-to-str-args-length>sig1
      ;<debug(!"tname : ")><signature-to-term-args-length>sig1
     }  
      
      
      
      
               