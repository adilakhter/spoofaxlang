module templatelang-to-str-2

language SpoofaxLang
target language Stratego-Sugar

// FIXME: This testsuite should really eval the generated stratego code on sample
//        input, instead of testing the exact form of the generated stratego code.
//        This is currently not really possible, however ...

test if then statement [[
  package example
  module example
  templates
    Statement.IfThen = <
      <MetaAnno*; separator="\n">
      if <Exp> then
        <Statement*; separator="\n">
      end
    >
]]
run test-templatelang-to-str to [[
  module prettyprinter
  imports
    libstratego-lib
  strategies
    pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
    pp-list(s|t) = map(s); separate-by(|t); concat-strings
    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
    pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
    pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)

    all-lines-except-first(s) =
        is-string
      ; string-tokenize-keep-empty(|['
'])
      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
               + where(![] => laststring))    // ... or not.
      ; ([id | map(s)] + [])
      ; <separate-by> ("\n", <id>)
      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
      ; concat-strings

    prefix-lines-except-first(|p) =
      all-lines-except-first(<conc-strings> (p, <id>))
  strategies
    prettyprint-Statement: IfThen(a, b, c) -> zz
      where
        a' := <pp-list(prettyprint-MetaAnno|"\n")> a;
        b' := <prettyprint-Exp> b;
        c' := <pp-list(prettyprint-Statement|"\n")> c;
        zz := <concat-strings> [<pp-ih-1(|"")> a', "if ", b', " then", <pp-ih-2(|"  ")> c', "\nend"]
  strategies
    prettyprint-MetaAnno = is-string
    prettyprint-Exp = is-string
]]
