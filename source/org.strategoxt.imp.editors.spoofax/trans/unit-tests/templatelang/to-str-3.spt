module templatelang-to-str-3

language SpoofaxLang
target language Stratego-Sugar

setup [[
  package example
  module example
  templates
]]

target setup header [[
  module prettyprinter
  imports
    libstratego-lib
  strategies
    pp-option(s) = \None() -> ""\ + \Some(t) -> <s> t\
    pp-list(s|t) = map(s); separate-by(|t); concat-strings
    pp-ih-0(|t) = ?"" <+ prefix-lines(|t)
    pp-ih-1(|t) = ?"" <+ prefix-lines(|t); <conc-strings> (<id>, "\n")
    pp-ih-2(|t) = ?"" <+ prefix-lines(|t); <conc-strings> ("\n", <id>)
    pp-ih-3(|t) = ?"" <+ prefix-lines-except-first(|t)

    all-lines-except-first(s) =
        is-string
      ; string-tokenize-keep-empty(|['
'])
      ; at-last( \ [""] -> [] \  // Do not run s on a final empty line.
               < where(!["\n"] => laststring) // ... but remember that the second last line was delimited by a newline
               + where(![] => laststring))    // ... or not.
      ; ([id | map(s)] + [])
      ; <separate-by> ("\n", <id>)
      ; <conc> (<id>, laststring) // Restore the final newline, if there was one.
      ; concat-strings

    prefix-lines-except-first(|p) =
      all-lines-except-first(<conc-strings> (p, <id>))
]]

test injection (1) [[ QId = <<ID>> ]]
run test-templatelang-to-str

test injection (2) [[ QId = <#<ID>#> ]]
run test-templatelang-to-str

test keyword injection (1) [[ Expression.SomeKeyword = <somekeyword> ]]
run test-templatelang-to-str

test keyword injection (2) [[ Expression.SomeKeyword = < somekeyword > ]]
run test-templatelang-to-str

test indentation of placeholder at end of template [[
  Start.Configuration = <
    configuration
      <Setting*; separator="\n">
  >
]]
run test-templatelang-to-str to [[
  strategies
    prettyprint-Start :
      Configuration(a) -> zz
      where a' := <pp-list(prettyprint-Setting|"\n")> a
            ; zz := <concat-strings> ["configuration", <pp-ih-2(|"  ")> a']
  strategies
    prettyprint-Setting = is-string
]]

// silly test; there might be a real use case though
test indentation of placeholder at start of template [[
  Start.Configuration = <
      <Setting*; separator="\n">
    configuration
  >
]]
run test-templatelang-to-str to [[
  strategies
    prettyprint-Start :
      Configuration(a) -> zz
      where a' := <pp-list(prettyprint-Setting|"\n")> a
            ; zz := <concat-strings> [<pp-ih-1(|"  ")> a', "configuration"]
  strategies
    prettyprint-Setting = is-string
]]

test escaped chars in literal (1) [[ X.Y = <<\"\t>> ]]
run test-templatelang-to-str to [[
  strategies
    prettyprint-X :
      Y() -> "\"\t"
  strategies
]]

test escaped chars in literal (2) [[ X.Y = <<\"\t><Z>> ]]
run test-templatelang-to-str to [[
  strategies
    prettyprint-X :
      Y(a) -> zz
      where a' := <prettyprint-Z> a
            ; zz := <concat-strings> ["\"\t", a']
  strategies
    prettyprint-Z = is-string
]]
