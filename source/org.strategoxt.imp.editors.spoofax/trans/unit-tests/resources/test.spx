package test.lang 
	
//test-new-spx-index
module langconstructs-test 
	context-free syntax   
	  "module" ID Definition*        -> Start      {"Module"} 
    "entity" ID "{" Property* "}"   -> Definition {"Entity"}
	  ID  ":" Type -> Property   {"Property"} 
	rules 
	  pp-entitylang: Property(x, type) -> Property(x, type)
    rules
    // generate java codes from entitylang
    to-java: Module(x, d*) ->
    $[ package [x];    
       
       [d'*]
     ]
    with
      d'* := <to-java> d*
        
    to-java: Entity(x, p*) ->      
    $[ class [x] {   
           [p'*] 
       }
     ]
    with
      p'* := <to-java1> p*

    to-java: Property(x, type) -> $[
      private [<to-java>type] [x];
      
      public [<to-java>type] get_[x] {
          return [x];
      }
      
      public void set_[x] ([<to-java>type] [x]) { 
          this.[x] = [x];    
      }
     ]     
    
     to-java: t* -> <map(to-java)> t*

module Identifier
		lexical syntax 
	  	[a-zA-Z][a-zA-Z0-9]* -> ID
		   INTE IN -> ID
	 
module Literals 
		lexical syntax 
			"-"? [0-9]+          -> INT 
	    
	    "\"" StringChar* "\"" -> STRING
	    ~[\"\n]               -> StringChar 
	    "\\\""                -> StringChar
	    
	    BackSlashChar         -> StringChar
	    "\\"                  -> BackSlashChar  
	    
		lexical restrictions       
  
	    //Ensure greedy matching for lexicals
	  
	    CommentChar   -/- [\/]
	    INT           -/- [0-9]
	    ID            -/- [a-zA-Z0-9\_]
	    
			//Backslash chars in strings may not be followed by " 
	    
	    BackSlashChar -/- [\"]
		
module Keywords
	
	lexical syntax 
 		"int"					  			-> RESERVED 
 		"string"			  			-> RESERVED
 		 RESERVED 						-> ID{reject}

	lexical restrictions
		 //Ensure greedy matching for lexicals
		"int" 
		"string"  -/- [A-Za-z0-9\_]
	    
	
module Layout
    lexical syntax
	    [\ \t\n\r] -> LAYOUT
	    
	    [\*]                             -> CommentChar
	    "/*" (~[\*] | CommentChar)* "*/" -> LAYOUT
	    "//" ~[\n\r]* ([\n\r] | EOF)     -> LAYOUT   
	    
	    -> EOF
	  
	 lexical restrictions 
      //Ensure greedy matching for lexicals
	    //EOF may not be followed by any char
	
	    EOF           -/- ~[]
	
	 context-free restrictions 
  
  		  //Ensure greedy matching for comments

		    LAYOUT? -/- [\ \t\n\r]
		    LAYOUT? -/- [\/].[\/] 
		    LAYOUT? -/- [\/].[\*]