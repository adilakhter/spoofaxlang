module editor/main

imports
	lib/editor-common.generated
	codegen/compile
imports 
	common
	config
	utils/cache	
	utils/debug
	editor/resolve/-
	normalize/main
	codegen/-
	context/-
	analyze/-
	include/SpoofaxLang
	utils/path
	normalize/signatures 
	context/declare
	
rules
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> elem
    where
    	<editor-resolve> node => elem	

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[Hover help: [<write-to-string> target]]


  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals*
    where editor-init
    where <alltd(compute-proposals)> ast
    where 
    	(	<Proposals>() 
    	<+	
    		![]
    	)
    	; ?proposals*   	  
    	
rules
	
	compute-proposals:
		Package(Name(COMPLETION(prefix)) , _)-> <id> 
		where get-package-list
					;	map(?Package(<id>);convert-qname(|".")) => proposals
					; rules(Proposals: () -> proposals) 	

	compute-proposals:
    Package(Name(package-name) , modules* ) -> <id>
    where not(<Proposals>())
    where !QName([package-name]) => package-qname
    where <compute-proposals> Package( package-qname , modules* ) => result            
        
	compute-proposals:
    Package(package-qname@QName(_) , modules* ) -> <id>
		where <one(?COMPLETION(prefix))>package-qname
		

	compute-proposals:
    Package(package-qname@QName(_) , modules* ) -> <id>
    where <not(one(?COMPLETION(prefix)))>package-qname
    where not(<Proposals>())
    where	{| GetEnclosingPackageName
         	 :		rules(GetEnclosingPackageName := Package(package-qname))
         				; <alltd(compute-proposals)>modules* => result
        	|}
        	
	compute-proposals:
			m@Module(_  ,SPXModuleName(mod-name-string) , section*) -><id>
			where not(<Proposals>()) 
      where GetEnclosingPackageName  =>  Package(QName(package-name-part*))
      where	mId :=  Module(QName([package-name-part*| [mod-name-string]]))
      			; {|	GetEnclosingPackageName
    	   			 :		rules(GetEnclosingModuleName := mId) 	
      	  					;	<collect-one(compute-proposals)>section*   		
      	  		|}
      	    	
	compute-proposals:
		ImportPackage(Name(COMPLETION(_))) -> <id>
		where pId := <GetEnclosingPackageName> 
		where get-package-list 
					;	filter(not( ?pId ))
					;	map(?Package(<id>);convert-qname(|".")) => proposals
					; rules(Proposals: () -> proposals) 	
	
	compute-proposals:
		ImportPackage(QName([qid , COMPLETION(prefix)| _])) -> <id>
		where pId := <GetEnclosingPackageName> 
		where full-prefix := <concat-strings> [qid , "." , prefix]
		where get-package-list 
					;	filter(not( ?pId ))   
					;	map(?Package(<id>);convert-qname(|"."))
					; filter(string-starts-with(|full-prefix)) => proposals
					; rules(Proposals: () -> proposals) 	
	
	
	compute-proposals:
		prod(lhs, rhs, attr) -> <id>
		where <oncetd(?QualifiedSort(ctx, COMPLETION(t)))>lhs
		
	
	compute-proposals:
		prod(lhs, rhs, attr) -> <id>
		where <oncetd(?sort(COMPLETION(prefix))+ ?NOCONTEXT(COMPLETION(prefix)))>lhs
		where <get-all-usings><GetEnclosingPackageName>
					;	map(?Package(<id>);convert-qname(|"."))
					; filter(string-starts-with(|prefix); not(?"")) => proposals1
		where activate-scope(<resolve-all-of-current-scope-by-type> SortDeclaration() | <GetEnclosingPackageName>) => proposals2
		where rules(Proposals: () -> [proposals1,proposals2]) 			
  
rules
	
	editor-analyze-with-eval-exec-time: 
	 (ast, path, project-path) -> (analyzed-ast, errors, warnings, infos)
		 	where
	 		debug-time(editor-analyze | "Editor Analyze") =>(analyzed-ast, errors, warnings, infos)
	
	editor-analyze: 
 		(ast, path, project-path) -> (analyzed-ast, errors, warnings, infos)
    where abs-path := <concat-strings>[project-path, "/" ,path]
    where <setup-editor-analyze> ( abs-path , project-path)
    where	debug-compiler(!$[ ------------------------------------------------
					  	Compiling following SPX file: [<print-as-string>abs-path]
			  	])
		where	if <string-ends-with(|".spt")>path then
    				index-init ;
    				compile-clean-symboltable	 		 
    			end  
	 	where with-spxverify(
	    			<store-currently-analyzing-ast> (<get-normalized-path>abs-path  , ast);
	    			<editor-analyze> (ast, abs-path) => (analyzed-ast , issues') 
					);  
		  		!issues' => ( errors, warnings, infos)
		
	editor-analyze:  
 		(ast, path, project-path) -> (ast, [], [], [])
  	where <string-ends-with(|".spt")> path
  	where <not(?CompilationUnit(_,_))>ast

	//TODO FIX : tempoirarily added for testing .
	editor-analyze= 
    ?(compilation-unit, file-absolute-path);
		index-init;
   	on-init-index-updating;
		<open-spx-compilation-unit(normalize-all|<spx-precompiled-cache-path>file-absolute-path)>(compilation-unit, file-absolute-path);
		init-declarations; 
		on-index-updating-completed;
		!file-absolute-path; 
		where(
    	get-declared-packages-qname; 	
    	compile-main
  	) ;
    get-semantic-problmes-by-file => issues* ;
    if not(<fail-if-has-errors>issues*) then
        set-has-errors // checking whether there are errors 
    end ;
    get-all-analyzed-packages;	
    get-related-files-of-packages; 
    filter(not(is-equal-path(| file-absolute-path))) ;
    mark-issues-of-files; 
    !(<get-analyzed-ast>compilation-unit, issues*)				
  
  //TODO FIX : tempoirarily added for testing .  
	setup-editor-analyze: 
		(resource-abs-path,project-path) -> <id>
		where if not(IsAnalyzing; is-equal-path(|resource-abs-path)) then // checking previously analyzed resource
						debug(!"Saving previous unsaved State : ")
		//	 			compile-unload
			 		end 
		where	spxlang-editor-init(|project-path)
    where	rules (IsAnalyzing:= resource-abs-path)

rules 
	// on save event 
	// build-incrementally-service:
	// 	(selected, position, ast, path, project-path) -> None()
	// 	where	not(HasErrors)
	// 	where	spxlang-editor-init(|project-path);
	// 					with-spxverify(
  //  					abs-path := <concat-strings>[project-path, "/" ,path]
	// 						; <store-currently-analyzing-ast>(<string-replace(|"\\", "/")>abs-path, ast)	 
	//   					; <build-spx-incrementally>(ast, abs-path) 
	//    				)

	// build-incrementally-service:
	// 		(selected, position, ast, path, project-path) -> None()
	// 		where	HasErrors;
	// 					<debug>$[Compilation Failed.Please fix the errors before building the artifacts : [<print-as-string>path]]
	// 			

	//TODO FIX : tempoirarily added for testing purpose. replace it with build-incrementally 
	// simplified generate artefacts on save 
	generate-artefacts-on-save:
		(selected, position, ast, path, project-path) -> None()
		where	HasErrors
		where <debug>$[Compilation Failed.Please fix the errors before building the artifacts : [<print-as-string>path]]
		
	generate-artefacts-on-save:
		(selected, position, ast, path, project-path) -> None()
		where	not(HasErrors)
		where abs-path := <concat-strings>[project-path, "/" ,path]
   	where	<setup-editor-analyze>(abs-path , project-path)
   	where	with-spxverify(
  					<store-currently-analyzing-ast> (<get-normalized-path>abs-path  , ast);
  					<generate-artefacts-on-save>(ast, abs-path) 
   				)
	
	generate-artefacts-on-save = 
   ?(ast, file-absolute-path);
   	index-init;
   	on-init-index-updating;
   	init-declarations; 
		on-index-updating-completed;
		!file-absolute-path; 
		get-semantic-problmes-by-file => issues* ;
    if not(<fail-if-has-errors>issues*) then
      set-has-errors // checking whether there are errors 
    else
  		!file-absolute-path; 
  		index-on-init-code-generation;
  		get-declared-packages-qname; 
			list-loop(generate-spx-package);	
			index-on-complete-code-generation 
    end    	