module spoofaxlang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstratego-sdf
  libstrc
imports
  include/SpoofaxLang
  lib/editor-common.generated
imports
  codegen/str/to-stratego
imports
  analyze/sdf/check
  context/sdf/declare
  context/str/-
imports
	codegen/buildscripts
	codegen/compile
	codegen/esv/to-esv
	codegen/sdf/to-sdf
	codegen/sdf/to-name-analysis
 	codegen/sdf/to-signature
  	codegen/main
   	codegen/template/-
imports
	normalize/main
	normalize/signatures
	context/-
imports
	utils/cache
	common
	config
imports
	 editor/main
	 codegen/main
	 unit-tests/main 
/*
	unit-tests/templatelang/-
	unit-tests/utils/-
	unit-tests/-
*/
rules 
	get-index-summary-jvm : 
  	current-project-location -> index-summary
  	where 
  	with-spxverify(	
	  		editor-init; 						         // cleaning up and initializing editors
				previous-working-dir := <getcwd>;
				rules(
					ProjectPath := current-project-location
				);
				<chdir>current-project-location;				// setting current directory to the project location
				initialize-configuration
			)
		where
			new-compile-session(
				enable-command-line-mode
	  		; get-package-list
				; compile-main
			)
		where
			prim("SPX_index_get_summary" , <get-project-path>);
			?index-summary
			 	
	 /**
   * Remove all the index entry related to a compilation unit 
   * located at resource-location.
   * 
   */
  clean-resource-from-spx-index-jvm : 
  	(current-project-location,resource-location) -> <id>
  	where 
  	with-spxverify(	
	  		editor-init; 						         // cleaning up and initializing editors
				previous-working-dir := <getcwd>;
				rules(
					ProjectPath := current-project-location
				);
				<chdir>current-project-location;				// setting current directory to the project location
				initialize-configuration
			)
		where
			index-clean-resource(|resource-location)
	
rules
// 
//   editor-complete:
//     (node, position, ast, path, project-path) -> proposals
//     where
//       proposals := <propose-completion <+ ![]> node
// 
//   editor-resolve:
//     (sort(x), position, ast, path, project-path) -> target
//     where
//       target := <resolve-atleast-one-sdf-declaration> x

 /*  TODO : Fix Editor Resolve
  // editor-resolve:
  //   (unparameterized(x), position, ast, path, project-path) -> target
  //   where
  //     target := <parse-spoofaxlang-file> <resolve-import> x
 */

rules

	show-analyzed-ast:
	  (selected, position, ast, path, project-path) -> (filename, result)
    with
      <guarantee-extension(|"analyzed.aterm")> path  => filename; 
      <editor-analyze>(ast, path, project-path); ?(<id> , _ ,_ ,_)  => result  

 
   /**
   * Generates Aterm representation of the sytnax 
   *
   */
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
  
  
  show-parameterized-sdf:
		(selected, position, ast, path, project-path) -> None()
		where  abs-path := <concat-strings>[project-path, "/" ,path]
	  where with-spxverify(
	  				<guarantee-extension(|".sdf")> path  => filename; 
	    			<editor-analyze>(ast, path, project-path); ?(<id> , _ ,_ ,_)
	    		)
	  where <get-declared-packages-qname> abs-path => p* ; debug(!"0")
	  where <get-declared-modules-qname>abs-path => m*   ; debug(!"1")
	  where <list-loop
	  				(
	  					?p@Package(QName(_)); debug(!"2");
	  					<filter(where(get-enclosing-package-qname; ?p))>m*; 	debug(!"3");
	  					{|	GetEnclosingPackageName:
					   				<declare-current-package-scope>p; debug(!"4");
					   				<generate-sdf-mix-main>m* ; debug(!"5")			 
	  					|}
	  				)> p* 
       
strategies

  main =
  	// Builders
    editor-analyze;
    editor-compile-spx-all-incrementally;
    editor-clean-and-compile-spx-all ;
    editor-build-all;
    editor-build-all-after-cleanup;
    editor-clean-spx;
    show-configuration;
    generate-aterm;
    normalize;
    generate-name-analysis;
    //build-incrementally-service;
    // Completions
    editor-complete;
    // References
    editor-resolve;
    editor-hover;
    // meta tooling
    build-spoofaxlang-jvm;
    // testing
    test-templatelang-to-esv;
    test-templatelang-to-sdf;
    test-templatelang-to-str;
    build-templatelang-sdf;
    build-templatelang-esv;
    build-templatelang-str

  build-templatelang-sdf = fail
  build-templatelang-esv = fail
  build-templatelang-str = fail
