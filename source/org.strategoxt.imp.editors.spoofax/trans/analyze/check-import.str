module analyze/check-import

imports
	context/-
	normalize/-
	context/symboltable
	
imports 
	include/SpoofaxLang
	utils/debug
	utils/path
	common
	
rules
	analyze-section: 
		Imports(ast) -> (errors, [], [])
		where
  		dbg-analysis(!$[ErrorChecking | Imports Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
			; errors   := <collect-om(imports-constraint-error)> ast
		  
rules
	
	imports-constraint-error:
		 ImportLegacyArtifact(Name(m@modulename)) -> ( m, $[Failed to import '[m]'. Module is not found. Please verify it exist at [directory-path] directory.])
		 where
		 	!modulename;
		 	not(is-declared-legacy-artifact) 
		 where
		 	directory-path := <concat-strings;dirname> [<get-project-path>, "/", m]
	
	imports-constraint-error:
		ImportPackage(package-qname@QName(_)) -> (package-qname , $[Failed to resolve '[package-qname-string]'. Please check spx.config for configured SPX sources. ])
		where	!package-qname;	require(is-declared-package)
		where	package-qname-string := <convert-qname(|".")>package-qname
	
	
	imports-constraint-error:
		ImportPackage(Name(name)) -> (name, $[Failed to import '[name]'. Importing of the enclosing  package is not allowed.])
		where
			!<GetEnclosingPackageName> => Package(QName([name])) 
		
	imports-constraint-error:
		ImportPackage(package-qname@QName(_)) -> (package-qname , $[Failed to import '[package-qname-string]'. Importing of the enclosing  package is not allowed.])
		where !<GetEnclosingPackageName> => Package(package-qname) 
		where	package-qname-string := <convert-qname(|".")>package-qname
	
	imports-constraint-error:
		ImportPackage(Name(package-name)) -> (package-name, $[Failed to resolve '[package-name]'.])
		where
			require(
				<is-declared-package>QName([package-name])
			+		
				<is-declared-legacy-artifact>package-name
			) 	
	
	imports-constraint-error:
		ImportSpxModule(Name(package-name), SPXModuleName(modname)) -> 
		<imports-constraint-error>ImportSpxModule(
				QName([package-name]), 
				SPXModuleName(modname)
		)
		
	imports-constraint-error:	
		q@ImportSpxModule(qname@QName(package-qname-parts), SPXModuleName(modname)) -> (q , $[Failed to resolve SPX module : '[module-qname-string]'. Please check spx.config for configured SPX sources. ])
		where
			module-qname 			 := <get-module-untyped-qname> (package-qname-parts , modname);
			require(
				is-declared-module
			)	
		where
			module-qname-string :=  <convert-qname(|".")>module-qname