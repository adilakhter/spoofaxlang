module analyze/esv/check

imports
	common
	context/-
	context/esv/-	
	context/str/-
	context/sdf/-
imports 
	utils/debug 
  include/SpoofaxLang
 
// TODO: warn about multi-char highlighted brackets
// TODO: check if provider/imported/etc. files exist
// TODO: check if there is _any_ provider for observer etc.

rules
	analyze-section: 
		ESVSection(ast) -> (error-esv*, warning-esv* , info-esv*)
  	where
  		dbg-analysis(! $[ErrorChecking | ESV Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)
		where
  		error-esv*   :=  <flatten-list><collect-om(constraint-esv-error, conc)> ast;
  		warning-esv* := <collect-om(constraint-esv-warning, conc)> ast;
  		info-esv*    := <flatten-list><collect-om(constraint-esv-info, conc)> ast

rules 
	get-esv-sorts : values* -> <?Values(<id>);map(!Sort(<id>)) <+ id>values*


rules
	
	constraint-esv-error:  
		sSym@StartSymbols(values*) -> err-messages*
		where <get-esv-sorts>values*	=> sorts*
		where
			<filter(constraint-esv-sort-error(|<id>))>sorts* => err-messages*;
			if !err-messages* => [] then 
				fail
			end	
	
	constraint-esv-error :
		Constructor(x) -> (x, $[Unknown constructor "[x]"])
		where
    	require(<verify-declared-construction-by-name> x)
    	
		
	constraint-esv-error :
    s@Sort(x) -> <constraint-esv-sort-error(|x)>s
    		
	constraint-esv-sort-error(|originSym):
    Sort(x) -> (x, $[Unknown sort "[x]"])
    where
    	require(<verify-sdf-sort-declaration-exists> x)
    
 
  constraint-esv-error:
    Strategy(x) -> (x, $[Unknown strategy "[x]"])
    where
      require(<verify-declared-stratego> x)
     
  constraint-esv-error:
    SemanticProvider(x) -> (x, $[Must be a generated .ctree or .jar file])
    where
      require(<string-ends-with(|".jar") + string-ends-with(|".ctree")> x)
   		
  constraint-esv-error: 
   	LanguageName( name ) -> (name, $[ Multiple declarations of language name. Declared in following packages : [<print-as-string>packages*]])
   	where
   			<get-languagename-declaration-sites> name  		 => packages*
   			; is-not-empty-list
   			; not(ensure-is-unique)
					
rules
	constraint-esv-info:  
		sSym@StartSymbols(values*) -> err-messages*
		where <get-esv-sorts>values*	=> sorts*
		where
			<get-sdf-start-symbols> <GetEnclosingPackageName> => s*; // getting all the context-free-start-symbols for the package   	
			<filter(unknown-start-symbol-error(| sSym, s*))>sorts* => err-messages*;
			if !err-messages* => [] then 
				fail
			end
	
	//TODO FIX : unknown start symbol error - undeterministic behavior
	unknown-start-symbol-error(|root-symbol, start-symbols-found-in-sdf-def) : 
		Sort(x) -> (root-symbol , $[ESV start symbol : "[<print-as-string>x]" is not defined as a SDF start symbol. However, it is automatically considered as a SDF start symbol(if the sort it valid).])
		where 
			<not(fetch-elem(?sort(x)))>start-symbols-found-in-sdf-def
			   		
  constraint-esv-warning: 
   	LanguageName( name ) -> (name, $[Same Language name is declared multiple times in this package.])
   	where
   			<get-languagename-declaration-sites> name =>packages*;
   			is-not-empty-list;
   			make-set;
				ensure-is-unique
		where		
				not(!packages* => [_])
  