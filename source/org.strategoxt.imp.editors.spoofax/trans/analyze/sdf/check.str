module analyze/sdf/check

imports
  lib/editor-common.generated
 	common
 	utils/debug
 	utils/attributes
  context/sdf/-
  context/-
  include/SpoofaxLang
  utils/attributes
  utils/path
  normalize/signatures 
  

rules
	verify-sdf-symbol-declaration-exists=
		?sort(<id>);
		<verify-symbol-exists>( <id>, SortDeclaration())
	<+
		dbg-analysis(! $[ErrorChecking| FAIL| Failed to retrive SDF declaration for symbol [<print-as-string>]] 
               | "verify-sdf-symbol-declaration-exists" ,<debug-level-WARNING>)
		; fail 
  
  verify-sdf-symbol-declaration-exists(|context)=
		?sort(x);
		activate-scope(
			result := <resolve-all-symbol-definitions( id | (LookupLocalScope(), <ONLY_ONE>))>(x,  SortDeclaration())
			| context
		);	
		<is-not-empty-list>result
		
rules
	
	analyze-section:
    KeywordSection(sort* ,_, Some(FollowRestriction(restriction))) -> (error*, [], [])
    where	error*   := <collect-all(context-free-syntax-sort-error+context-free-syntax-warning, conc)> sort*
  
  analyze-section: SDFSectionEH(_, ast) -> <analyze-sdf-errors>ast

	analyze-section:
		SDFSection(ast) -> <analyze-sdf-errors>ast
		where dbg-analysis(! $[ErrorChecking | SDF Section : [<print-as-string>]] | "analyze-section", <debug-level-INFO>)
	
  analyze-section:
    TemplateSection(ast) -> <analyze-sdf-errors>
    where dbg-analysis(!$[ErrorChecking | Template Section : [<print-as-string>]] | "analyze-section" , <debug-level-INFO>)

	analyze-sdf-errors :
		ast -> (error'*, warning'*, [])
		where	dbg-analysis(! $[ErrorChecking | SDF  : [<print-as-string>]] | "analyze-sdf-errors" , <debug-level-INFO>)  
  	where	error*   := <flatten-list><collect-om( ?context-free-syntax       (<collect-om(context-free-syntax-error)>)
                                           + ?lexical-syntax            (<collect-om(lexical-syntax-error)>)
	    																		 + ?context-free-start-symbols(<collect-om(context-free-start-symbols-error)>)
	    																		 + ?kernel-start-symbols      (<collect-om(context-free-start-symbols-error)>)
	    																		 + ?lexical-start-symbols     (<collect-om(context-free-start-symbols-error)>)		
	                                         + ?TemplateSection           (<collect-om(context-free-templates-error)>), conc
	                                         )> ast;
			    warning* := <collect-om( ?context-free-syntax (<collect-om(context-free-syntax-warning)>)
		                             + ?lexical-syntax      (<collect-om(lexical-syntax-warning)>)
			    											 + ?TemplateSection     (<collect-om(context-free-templates-warning)>), conc
			    											 )> ast;
		      serror*   := <collect-all(context-free-syntax-sort-error, conc)> ast;
		     	error'*   := <conc> (serror*, <flatten-list>error*);
			    warning'* := <flatten-list> warning*
			
strategies
	/* TODO : FIX */
	//checks whether constructor rhs-sort is marked for having declared multiple times
/*	 
	has-duplicate-sdf-definitions(|constructor-name) =
		?rhs-sort-name;
		get-duplicate-sort-declarations;
		filter(? (constructor-name, _  ,rhs-sort-name));
 		is-not-empty-list
*/ 	
 
  // Tests if something is a non-terminal in terms of the AST produced.
  is-non-terminal =
    ?sort(_) + ?opt(_) + is-iter
  + namespacedef(id, is-non-terminal) + namespaceref(is-non-terminal)
  + namespaceref2(id, is-non-terminal)

  is-iter =
    ?iter(_) + ?iter-star(_) + ?iter-sep(_, _) + ?iter-star-sep(_, _)


// Limited exisiting sort checking
rules  //global checks

  context-free-syntax-warning:
    sort(x) -> (x, $[No definition for '[x]'])
    where require(verify-sdf-symbol-declaration-exists)

	context-free-syntax-sort-error:
    q@QualifiedSort(Unresolved(), x) -> (q, $[Unknown namesapce(package/module) is referred. No definition for '[x]'])
    
	context-free-syntax-sort-error:
    q@QualifiedSort(p@Package(qname@QName(_)), x) -> (q, $[Missing import reference. Please add '[<convert-qname(|".")>qname]' as an import reference]) 
    where	<get-all-usings><GetEnclosingPackageName>
					;	filter ( ?p )
					; require(is-not-empty-list)
		
	context-free-syntax-sort-error:
    q@QualifiedSort(p@Package(qname@QName(_)), x) -> (x, $[No definition for Qualified Sort '[namespace].[x]'])
    where namespace := <convert-qname(|".")>qname  
		where	require( <verify-sdf-symbol-declaration-exists(|p)>sort(x) )    			

  context-free-syntax-sort-error:
    parameterized-sort(_, _) -> [] // not supported

  context-free-syntax-sort-error:
    'sorts(_) -> [] // ignored

	
/*	
	context-free-syntax-warning:
    p@prod(p*, s, a*) -> (p, $[Possibly multiple definitions of "[x]" [msg-to-append].])
    where
    	x := <get-rhs-sort-name>s;
    	if op-name := <!a*; ?attrs(<id>);getfirst(fetch-cons-name)> then 
    		msg-to-append := $[with "[op-name]" constructor]
    	else
    		op-name := "";
    		msg-to-append := ""
    	end;
    	<has-duplicate-sdf-definitions(|op-name)>x 	 
*/
	
	context-free-start-symbols-error:	
   	sorts* -> err-messages*
   	where
  		s* := <get-esv-start-symbols> <GetEnclosingPackageName>; // getting all the esv start symbols defined in this package   	
			<filter(unknown-start-symbol-error(|s*))>sorts* => err-messages*;
			if !err-messages* => [] then 
				fail
			end
	
	unknown-start-symbol-error(|start-symbols-found-in-esv-def) : 
		s@sort(x) -> (s, $[Unknown Start Symbol :  "[x]". Please specify it as a Start Symbol in Language Description(esv)])
		where 
			<not(fetch-elem(?Sort(x)))>start-symbols-found-in-esv-def 	
  
  lexical-syntax-error = fail
   
rules // Local checks
	
	 context-free-syntax-warning: 
    prod(p*, s, a*) -> (target, $[Missing {"Label"} attribute to label the abstract syntax])
    where
      (
        not(<occurrences(?sort(_))> p* => 1; <occurrences(?lit(_))> p* => 0)
      <+
        <oncetd(is-iter + ?opt(_))> p*
      );
      if !a* => attrs(a'*) then
        not(<one(term(default(appl(unquoted("cons" + "ast"), [fun(quoted(not("\"\"")))]))))> a'*);
        not(<one(?Constructor(_))> a'*);
        not(<one(bracket() + reject())> a'*);
        not(!s; (sort("Keyword") + sort("\"Keyword\"")));
        target := a*
      else
        target := s
      end

  context-free-syntax-warning:
    t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Single argument expected for {cons("Name")} attribute])
    where
      not(<length> a* => 1)
  
  lexical-syntax-warning:
    t @ term(default(appl(unquoted("cons"), a*))) -> (t, $[Constructor only expected in context-free syntax])

  context-free-syntax-warning:
    t @ term(default(annotated(_, _))) -> (t, $[Use round parentheses () for attribute arguments])

  context-free-syntax-error:
    prod([x], s, attrs(a*)) -> (a*, $[Illegal use of {bracket} attribute])
    where
      <one(bracket())> a*

  // TODO: don't warn for | in {reject} productions
  context-free-syntax-warning:
    alt(x, y) -> (<id>, $[The | construct is deprecated: instead of A|B->C use A->C B->C])

  context-free-syntax-warning:
    opt(s @ seq(_, _)) -> (s, $[Extract sequence in optional to separate productions to ensure acceptable abstract syntax])
    where
      <occurrences(is-non-terminal)> s => 1

  context-free-syntax-warning:
    opt(lit) -> (lit, $[Extract literal in optional to separate productions to ensure consistent abstract syntax])
    where
      oncetd(?lit(_))
   // Instruct users to use { X "," }*

  context-free-syntax-warning:
    [sort(x), iter-star(seq(lit(sep), [sort(x)])) | _] -> (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [lit(sep)])), sort(x) | _] ->  (<id>, $[Use {[x] [sep]}+ instead for [sep]-separated lists])

  context-free-syntax-warning:
    [opt(sort(x)), iter-star(seq(lit(sep), [sort(x)])) | _] -> (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [lit(sep)])), opt(sort(x)) | _] -> (<id>, $[Use {[x] [sep]}* instead for [sep]-separated lists])

  context-free-syntax-warning:
    prod(lhs @ [sort(x), opt(seq(lit(sep), [sort(xs)]))], sort(xs), _) ->
    (lhs, $[Use {[x] [sep]}+ instead for [sep]-separated lists])

  // Instruct users to use { X ","? }* (seen in MDSD 2010)

  context-free-syntax-warning:
    [sort(x), iter-star(seq(opt(lit(sep)), [sort(x)])) | _] ->
    (<id>, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [opt(lit(sep))])), sort(x) | _] ->
    (<id>, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [opt(sort(x)), iter-star(seq(opt(lit(sep)), [sort(x)])) | _] ->
    (<id>, $[Use {[x] [sep]?}* instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [iter-star(seq(sort(x), [opt(lit(sep))])), opt(sort(x)) | _] ->
    (<id>, $[Use {[x] [sep]?}* instead for [sep]?-separated lists])

  context-free-syntax-warning:
    prod(lhs @ [sort(x), opt(seq(opt(lit(sep)), [sort(xs)]))], sort(xs), _) ->
    (lhs, $[Use {[x] [sep]?}+ instead for [sep]?-separated lists])

  context-free-syntax-warning:
    [_ | t*] -> <context-free-syntax-warning> t*

  context-free-syntax-warning:
    iter-star(cs) -> (<id>, $[Character class iteration should be in lexical syntax section])
    where
      <oncetd(?range(_, _))> cs

  context-free-syntax-warning:
    iter(cs) -> (<id>, $[Character class iteration should be in lexical syntax section])
    where
      <oncetd(?range(_, _))> cs

  context-free-syntax-warning:
    iter-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)")

  context-free-syntax-warning:
    iter-star-sep(_, bad @ sort(_)) -> (bad, "Non-terminal used as a list separator (use round braces for grouping non-terminals)")

rules // TemplateLang - Local checks

  context-free-syntax-error:
    prod(_, _, attrs(attr*)) ->
      (attr*, "Multiple definition of constructor (already specified at start of production?)")
    where
      <gti> (<filter(fetch-cons); length> attr*, 1)

  context-free-templates-error:
    TemplateProduction(_, _, attrs(attr*)) ->
      (attr*, "Multiple definition of constructor (already specified at start of production?)")
    where
      <gti> (<filter(fetch-cons); length> attr*, 1)

  context-free-templates-warning:
    Template([head | _]) ->
      (head, "Insert a linebreak between the start of a multi line template and its first element")
    where
    	<eq> (<origin-line>, <origin-line> head)

  context-free-templates-warning:
    Layout(t) -> (t, "Do not use tab characters in templates")
    where
    	origin-text; explode-string; one('\t')
