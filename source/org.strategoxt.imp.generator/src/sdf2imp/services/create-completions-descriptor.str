module sdf2imp/services/create-completions-descriptor

imports
  libstratego-lib
  libstratego-sdf

  sdf2imp/util/-
  sdf2imp/main

signature constructors

  lit  : Term -> Term
  prod : Term * Term * Term -> Term
  deprecated : Term
  deprecated : Term -> Term

strategies

  create-completions-descriptor =
    output-initial-descriptor-file(
      <descriptor-name> "-Completions"
    , !|[
        module <descriptor-name> "-Completions"

        imports <descriptor-name> "-Completions.generated"

        completions
          ~~
          ~~// This file is used to define content completion.
          ~~//
          ~~// See the imported file for a brief introduction and examples.
          ~~
        completions
          ~~
          ~~// Syntax completion:
          ~~
          completion template Start :
            "module " <m> (blank)
          ~~
          completion template Definition :
            "entity " <e> " {" (cursor) "}"  (blank)
          ~~
          completion template Property : "property : Type" =
            <x> " : " <T>  (blank)
          ~~
        completions
          ~~// Semantic (identifier) completion:
          ~~
          completion proposer: editor-complete
          ~~
          completion trigger: ":"
      ]|
    );
    create-derived-completions-descriptor

  create-derived-completions-descriptor =
    not(is-heuristic-services-needed);
    verbose-msg(!"Skipping", <descriptor-name> "-Completions.generated")
  <+
    output-derived-descriptor-file(
      <descriptor-name> "-Completions.generated"
    ,
      completion-rules := <collect-all-keywords; map(keyword-to-completion-rule)>;
      !|[
        module <descriptor-name> "-Completions.generated"

        completions
          ~
          ~// Syntactic content completion can be defined as follows:
          ~//
          ~//   completion keyword  : "keyword"
          ~//   completion template : "if " <e> " then\n\t" <s> "\nend"
          ~//
          ~// This defines keyword completion for "keyword" and
          ~// a template completion for the "if" keyword (note the use of \n, \t, and spaces).
          ~// In this template, the text selection expands to the "e" placeholder identifier
          ~// enclosed in <> brackets.
          ~//
          ~// Use the (blank) annotation if you want a template completion only to
          ~// appear on blank lines:
          ~//
          ~//   completion template: "section " <title> "\n\t" (blank)
          ~//
          ~// You can specify a specific SDF sort for which a completion
          ~// rule should trigger as follows:
          ~//
          ~//   completion template Section :
          ~//     "section " <title> "\n\t" (blank)
          ~//
          ~// Finally, you can override the prefix of the completion:
          ~//
          ~//   completion template Statement : "assignment" =
          ~//     <x> " = " <y> (blank)
          ~//
          ~// Semantic content completion can be defined as follows:
          ~//
          ~//   completion proposer : completion-function-call
          ~//   completion trigger  : "\."
          ~//
          ~// This sets completion-function-call as the completion strategy,
          ~// and declares that [A-Za-z0-9_]+ may be used as a lexical pattern
          ~// to parse identifiers (used to set the text selection with suggestions).
          ~// The completion trigger uses a regular expression to specify that
          ~// completions should be proposed as the user types ".".
          ~//
          ~// Completions make use of the identifier lexical defined in YourLanguage-Syntax.esv
          ~// to select identifiers in completion suggestions.
          ~//
          ~// Semantic completion uses the semantic provider defined in YourLanguage-Builders.esv
          ~~// All semantic services may make use of the dynamic rules created by the observer.

        completions
          ~~
          ~// Derived completions may follow
          ~
          ~*completion-rules
      ]|
    )

strategies

  keyword-to-completion-rule:
    keyword -> |[ completion keyword : ~String(keyword) ]|

  collect-all-keywords =
    (InputFile <+ DefaultDefFile);
    parse-sdf-definition-file;
    collect-all(?prod(<pattern-to-keywords>, _, _));
    concat;
    make-set

  prod-to-keywords:
    prod(pattern, _, attrs) -> keywords
    where
      keywords := <pattern-to-keywords> pattern;
      not(!attrs => attrs(<one(term(?deprecated() + ?deprecated(_)))>))

  pattern-to-keywords =
    pattern-to-keywords-1 <+ pattern-to-keywords-2 <+ []

  pattern-to-keywords-1:
    [lit(lit) | p*] -> [keyword | <pattern-to-keywords> p'*]
    where
      <is-prefixed-keyword> lit
    with
      keyword-suffix := <take-while(lit(is-prefixed-keyword))> p*;
      keyword        := <map(?lit(<id>)); separate-by(|" "); concat-strings> [lit(lit) | keyword-suffix];
      p'*            := <drop-while(?lit(_))> p*

  pattern-to-keywords-2:
    [_ | p*] -> <pattern-to-keywords> p*

  /**
   * Tests if the given string is a keyword prefixed
   * by non-alphabetic characters (e.g., ~java: or {annotation})
   */
  is-prefixed-keyword =
    explode-string;
    where([not(is-alpha) | id]); // not("")
    one(is-alpha);
    not(one("\"" + "\\")) // only allow stringchars for pretty-printing
