/**
 * Strategies used directly by the Java code of the IDE.
 */
module sdf2imp/util/ide-support

imports
  libstratego-lib
  libstratego-sglr

strategies

  // (Used from StrategoObserver.java)
  postprocess-feedback-results =
    (is-list <+ ![<id>]);
    flatten-list;
    map(
      try(
        (id, postprocess-feedback-message)
      )
    )
  
  internal postprocess-feedback-message =
    if is-list then
      flatten-list;
      map(is-string <+ write-to-string);
      concat-strings
    else
      is-string <+ write-to-string
    end
  
  simplify-ambiguity-report:
  	amb([]) -> $[ambiguity in literal or layout]
  
  simplify-ambiguity-report:
    amb(a* @ [_ | _]) -> $[either [a'*]]
    where
      !a*;
      map(try(?ToMetaExpr(<id>)));
      map(simplify-ambiguity-element);
      where(<eq> (<id>, <make-set>)); // no duplicates
      a'* := <separate-by(|" or ")>

  simplify-ambiguity-element:
    [x] -> $[list of [<simplify-ambiguity-element> x]]

  simplify-ambiguity-element:
    x#(_) -> x'
    with
      x' := <is-string <+ write-to-string> x

rules

  position-of-term(is-term):
    t -> []
    where
      is-term
  
  position-of-term(is-term):
    _#(t*) -> <position-of-term(is-term|0)> t*
  
  position-of-term(is-term|start-index):
    [t | t*] -> position
    where
      if i* := <position-of-term(is-term)> t then
        position := [start-index | i*]
      else
        position := <position-of-term(is-term | <inc> start-index)> t*
      end

  term-at-position(|position):
    t -> t'
    where
      at-position(?t'|position)
   
  at-position(s|position):
    c#(t*) -> t'
    where
      !position => [i | position']
    where
      t' := c#(<at-index(at-position(s|position'))> (i, t*))

  at-position(s|position):
    t -> t'
    where
      !position => [];
      t' := <s> t
